{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport const useDragAndDrop = () => {\n  _s();\n  const [draggedCardIndex, setDraggedCardIndex] = useState(null);\n  const [isDraggingToPlay, setIsDraggingToPlay] = useState(false);\n  const handleDragStart = (e, cardIndex) => {\n    setDraggedCardIndex(cardIndex);\n    setIsDraggingToPlay(false);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', cardIndex.toString());\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n\n    // Add visual feedback for play drop zone\n    const target = e.currentTarget;\n    if (target.classList.contains('play-drop-zone')) {\n      target.classList.add('drag-over');\n    }\n  };\n  const handleDrop = (e, dropIndex, cardOrder, setCardOrder) => {\n    e.preventDefault();\n    if (draggedCardIndex === null) return;\n    setCardOrder(prevOrder => {\n      const newOrder = [...prevOrder];\n      const draggedCardOriginalIndex = newOrder[draggedCardIndex];\n\n      // Remove the dragged card from its current position\n      newOrder.splice(draggedCardIndex, 1);\n\n      // Insert it at the new position\n      newOrder.splice(dropIndex, 0, draggedCardOriginalIndex);\n      return newOrder;\n    });\n    setDraggedCardIndex(null);\n  };\n  const handleDropToPlay = (e, cardOrder, playableCards, onPlayCard) => {\n    e.preventDefault();\n    if (draggedCardIndex === null) return;\n    const originalIndex = cardOrder[draggedCardIndex];\n    if (playableCards.includes(originalIndex)) {\n      onPlayCard(originalIndex);\n    }\n    setDraggedCardIndex(null);\n  };\n  const handleDragEnd = () => {\n    setDraggedCardIndex(null);\n    setIsDraggingToPlay(false);\n\n    // Remove drag-over visual feedback\n    const dropZone = document.querySelector('.play-drop-zone');\n    if (dropZone) {\n      dropZone.classList.remove('drag-over');\n    }\n  };\n  return {\n    draggedCardIndex,\n    isDraggingToPlay,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDropToPlay,\n    handleDragEnd\n  };\n};\n_s(useDragAndDrop, \"H4vlRbNkGC2rSliUvwcw9HPWE7A=\");","map":{"version":3,"names":["useState","useDragAndDrop","_s","draggedCardIndex","setDraggedCardIndex","isDraggingToPlay","setIsDraggingToPlay","handleDragStart","e","cardIndex","dataTransfer","effectAllowed","setData","toString","handleDragOver","preventDefault","dropEffect","target","currentTarget","classList","contains","add","handleDrop","dropIndex","cardOrder","setCardOrder","prevOrder","newOrder","draggedCardOriginalIndex","splice","handleDropToPlay","playableCards","onPlayCard","originalIndex","includes","handleDragEnd","dropZone","document","querySelector","remove"],"sources":["/Users/enkhmendeee/muushig/client/src/hooks/useDragAndDrop.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport const useDragAndDrop = () => {\n  const [draggedCardIndex, setDraggedCardIndex] = useState<number | null>(null);\n  const [isDraggingToPlay, setIsDraggingToPlay] = useState(false);\n\n  const handleDragStart = (e: React.DragEvent, cardIndex: number) => {\n    setDraggedCardIndex(cardIndex);\n    setIsDraggingToPlay(false);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', cardIndex.toString());\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n    \n    // Add visual feedback for play drop zone\n    const target = e.currentTarget as HTMLElement;\n    if (target.classList.contains('play-drop-zone')) {\n      target.classList.add('drag-over');\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent, dropIndex: number, cardOrder: number[], setCardOrder: (order: number[]) => void) => {\n    e.preventDefault();\n    if (draggedCardIndex === null) return;\n\n    setCardOrder(prevOrder => {\n      const newOrder = [...prevOrder];\n      const draggedCardOriginalIndex = newOrder[draggedCardIndex];\n      \n      // Remove the dragged card from its current position\n      newOrder.splice(draggedCardIndex, 1);\n      \n      // Insert it at the new position\n      newOrder.splice(dropIndex, 0, draggedCardOriginalIndex);\n      \n      return newOrder;\n    });\n    \n    setDraggedCardIndex(null);\n  };\n\n  const handleDropToPlay = (e: React.DragEvent, cardOrder: number[], playableCards: number[], onPlayCard: (cardIndex: number) => void) => {\n    e.preventDefault();\n    if (draggedCardIndex === null) return;\n\n    const originalIndex = cardOrder[draggedCardIndex];\n    if (playableCards.includes(originalIndex)) {\n      onPlayCard(originalIndex);\n    }\n    \n    setDraggedCardIndex(null);\n  };\n\n  const handleDragEnd = () => {\n    setDraggedCardIndex(null);\n    setIsDraggingToPlay(false);\n    \n    // Remove drag-over visual feedback\n    const dropZone = document.querySelector('.play-drop-zone');\n    if (dropZone) {\n      dropZone.classList.remove('drag-over');\n    }\n  };\n\n  return {\n    draggedCardIndex,\n    isDraggingToPlay,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDropToPlay,\n    handleDragEnd\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGJ,QAAQ,CAAgB,IAAI,CAAC;EAC7E,MAAM,CAACK,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAMO,eAAe,GAAGA,CAACC,CAAkB,EAAEC,SAAiB,KAAK;IACjEL,mBAAmB,CAACK,SAAS,CAAC;IAC9BH,mBAAmB,CAAC,KAAK,CAAC;IAC1BE,CAAC,CAACE,YAAY,CAACC,aAAa,GAAG,MAAM;IACrCH,CAAC,CAACE,YAAY,CAACE,OAAO,CAAC,WAAW,EAAEH,SAAS,CAACI,QAAQ,CAAC,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMC,cAAc,GAAIN,CAAkB,IAAK;IAC7CA,CAAC,CAACO,cAAc,CAAC,CAAC;IAClBP,CAAC,CAACE,YAAY,CAACM,UAAU,GAAG,MAAM;;IAElC;IACA,MAAMC,MAAM,GAAGT,CAAC,CAACU,aAA4B;IAC7C,IAAID,MAAM,CAACE,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;MAC/CH,MAAM,CAACE,SAAS,CAACE,GAAG,CAAC,WAAW,CAAC;IACnC;EACF,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACd,CAAkB,EAAEe,SAAiB,EAAEC,SAAmB,EAAEC,YAAuC,KAAK;IAC1HjB,CAAC,CAACO,cAAc,CAAC,CAAC;IAClB,IAAIZ,gBAAgB,KAAK,IAAI,EAAE;IAE/BsB,YAAY,CAACC,SAAS,IAAI;MACxB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;MAC/B,MAAME,wBAAwB,GAAGD,QAAQ,CAACxB,gBAAgB,CAAC;;MAE3D;MACAwB,QAAQ,CAACE,MAAM,CAAC1B,gBAAgB,EAAE,CAAC,CAAC;;MAEpC;MACAwB,QAAQ,CAACE,MAAM,CAACN,SAAS,EAAE,CAAC,EAAEK,wBAAwB,CAAC;MAEvD,OAAOD,QAAQ;IACjB,CAAC,CAAC;IAEFvB,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAED,MAAM0B,gBAAgB,GAAGA,CAACtB,CAAkB,EAAEgB,SAAmB,EAAEO,aAAuB,EAAEC,UAAuC,KAAK;IACtIxB,CAAC,CAACO,cAAc,CAAC,CAAC;IAClB,IAAIZ,gBAAgB,KAAK,IAAI,EAAE;IAE/B,MAAM8B,aAAa,GAAGT,SAAS,CAACrB,gBAAgB,CAAC;IACjD,IAAI4B,aAAa,CAACG,QAAQ,CAACD,aAAa,CAAC,EAAE;MACzCD,UAAU,CAACC,aAAa,CAAC;IAC3B;IAEA7B,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAED,MAAM+B,aAAa,GAAGA,CAAA,KAAM;IAC1B/B,mBAAmB,CAAC,IAAI,CAAC;IACzBE,mBAAmB,CAAC,KAAK,CAAC;;IAE1B;IACA,MAAM8B,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,iBAAiB,CAAC;IAC1D,IAAIF,QAAQ,EAAE;MACZA,QAAQ,CAACjB,SAAS,CAACoB,MAAM,CAAC,WAAW,CAAC;IACxC;EACF,CAAC;EAED,OAAO;IACLpC,gBAAgB;IAChBE,gBAAgB;IAChBE,eAAe;IACfO,cAAc;IACdQ,UAAU;IACVQ,gBAAgB;IAChBK;EACF,CAAC;AACH,CAAC;AAACjC,EAAA,CA1EWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}