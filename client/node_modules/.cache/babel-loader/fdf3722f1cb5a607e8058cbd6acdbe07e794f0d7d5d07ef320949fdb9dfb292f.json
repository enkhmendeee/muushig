{"ast":null,"code":"var _jsxFileName = \"/Users/enkhmendeee/muushig/client/src/pages/GameRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GameHeader from '../components/layout/GameHeader';\nimport GameTable from '../components/game/GameTable';\nimport GameControls from '../components/game/GameControls';\nimport ChatPanel from '../components/game/ChatPanel';\nimport ExchangeModal from '../components/game/ExchangeModal';\nimport { useDragAndDrop } from '../hooks/useDragAndDrop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameRoom = ({\n  socket,\n  gameState,\n  currentPlayer,\n  onLeaveGame\n}) => {\n  _s();\n  var _gameState$players$ga, _gameState$players$ga2;\n  const [chatMessage, setChatMessage] = useState('');\n  const [playableCards, setPlayableCards] = useState([]);\n  const [showChat, setShowChat] = useState(false);\n  const [selectedCardsForExchange, setSelectedCardsForExchange] = useState([]);\n  const [showExchangeModal, setShowExchangeModal] = useState(false);\n  const [isTrumpExchange, setIsTrumpExchange] = useState(false);\n  const [botActionMessage, setBotActionMessage] = useState('');\n  const [cardOrder, setCardOrder] = useState([]);\n  const prevPlayersRef = React.useRef(gameState.players);\n\n  // Update currentPlayer with latest data from gameState\n  const updatedCurrentPlayer = gameState.players.find(player => player.id === currentPlayer.id) || currentPlayer;\n\n  // Use drag and drop hook\n  const {\n    handleDragOver,\n    handleDropToPlay\n  } = useDragAndDrop();\n\n  // Initialize card order when hand changes\n  useEffect(() => {\n    if (Array.isArray(updatedCurrentPlayer.hand)) {\n      // Filter out indices that no longer exist in the hand\n      setCardOrder(prevOrder => {\n        const handArray = updatedCurrentPlayer.hand;\n        const newOrder = prevOrder.filter(index => index < handArray.length);\n        // Add any new indices that might have been added\n        for (let i = 0; i < handArray.length; i++) {\n          if (!newOrder.includes(i)) {\n            newOrder.push(i);\n          }\n        }\n        return newOrder;\n      });\n    }\n  }, [updatedCurrentPlayer.hand]);\n  useEffect(() => {\n    if (socket && gameState.gamePhase === 'playing' && isMyTurn) {\n      socket.emit('get_playable_cards', {\n        gameId: gameState.id\n      });\n    }\n  }, [socket, gameState.gamePhase, gameState.currentPlayerIndex, updatedCurrentPlayer.id]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('playable_cards', data => {\n      if (data.gameId === gameState.id) {\n        setPlayableCards(data.playableCards);\n      }\n    });\n    return () => {\n      socket.off('playable_cards');\n    };\n  }, [socket, gameState.id, currentPlayer.name]);\n\n  // Track bot decisions and show notifications\n  useEffect(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (currentPlayer !== null && currentPlayer !== void 0 && currentPlayer.isBot) {\n      // Clear any existing bot action message when a new bot starts thinking\n      setBotActionMessage('');\n    }\n  }, [gameState.currentPlayerIndex, gameState.players]);\n\n  // Track when bots make decisions\n  useEffect(() => {\n    const prevPlayers = prevPlayersRef.current;\n    const currentPlayers = gameState.players;\n    currentPlayers.forEach((player, index) => {\n      const prevPlayer = prevPlayers[index];\n      if (player.isBot && prevPlayer && prevPlayer.enteredRound === undefined && player.enteredRound !== undefined) {\n        const action = player.enteredRound ? 'entered' : 'declined';\n        setBotActionMessage(`${player.name} ${action} the round`);\n\n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n\n      // Track exchange decisions\n      if (player.isBot && prevPlayer && !prevPlayer.hasExchanged && player.hasExchanged) {\n        const action = gameState.gamePhase === 'trump_exchanging' ? 'exchanged trump card' : 'exchanged cards';\n        setBotActionMessage(`${player.name} ${action}`);\n\n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n    });\n    prevPlayersRef.current = currentPlayers;\n  }, [gameState.players]);\n  const handleReady = () => {\n    if (!socket) return;\n    socket.emit('ready_check', {\n      gameId: gameState.id,\n      isReady: true\n    });\n  };\n  const handleUnready = () => {\n    if (!socket) return;\n    socket.emit('ready_check', {\n      gameId: gameState.id,\n      isReady: false\n    });\n  };\n  const handleStartGame = () => {\n    if (!socket) return;\n    socket.emit('start_game', {\n      gameId: gameState.id\n    });\n  };\n  const handleEnterTurn = () => {\n    if (!socket) return;\n    socket.emit('enter_turn', {\n      gameId: gameState.id\n    });\n  };\n  const handleSkipTurn = () => {\n    if (!socket) return;\n    socket.emit('skip_turn', {\n      gameId: gameState.id\n    });\n  };\n  const handlePlayCard = cardIndex => {\n    if (!socket) return;\n    socket.emit('play_card', {\n      gameId: gameState.id,\n      cardIndex\n    });\n  };\n  const handleCardSelectForExchange = cardIndex => {\n    setSelectedCardsForExchange(prev => {\n      if (prev.includes(cardIndex)) {\n        return prev.filter(index => index !== cardIndex);\n      }\n      if (isTrumpExchange) {\n        // For trump exchange, only allow one card selection\n        return [cardIndex];\n      }\n\n      // For regular exchange, limit to tree size\n      const maxExchangeable = gameState.tree.length;\n      if (prev.length >= maxExchangeable) {\n        // If already at max, don't add more cards\n        return prev;\n      }\n      return [...prev, cardIndex];\n    });\n  };\n  const handleExchangeCards = () => {\n    if (!socket || selectedCardsForExchange.length === 0) return;\n    if (isTrumpExchange) {\n      // For trump exchange, only exchange the first selected card\n      socket.emit('exchange_trump', {\n        gameId: gameState.id,\n        cardIndex: selectedCardsForExchange[0]\n      });\n    } else {\n      // For regular exchange, validate against tree size\n      const maxExchangeable = gameState.tree.length;\n      if (selectedCardsForExchange.length > maxExchangeable) {\n        console.warn(`Cannot exchange ${selectedCardsForExchange.length} cards when only ${maxExchangeable} are available in tree`);\n        return;\n      }\n      socket.emit('exchange_cards', {\n        gameId: gameState.id,\n        cardIndices: selectedCardsForExchange\n      });\n    }\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n  const handleSkipExchange = () => {\n    if (!socket) return;\n    if (isTrumpExchange) {\n      socket.emit('exchange_trump', {\n        gameId: gameState.id,\n        cardIndex: -1\n      });\n    } else {\n      socket.emit('exchange_cards', {\n        gameId: gameState.id,\n        cardIndices: []\n      });\n    }\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n  const handleOpenExchange = () => {\n    setIsTrumpExchange(false);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n  const handleOpenTrumpExchange = () => {\n    setIsTrumpExchange(true);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n  const handleSkipTrumpExchange = () => {\n    if (!socket) return;\n    socket.emit('exchange_trump', {\n      gameId: gameState.id,\n      cardIndex: -1\n    });\n  };\n  const handleSendChat = () => {\n    if (!socket || !chatMessage.trim()) return;\n    socket.emit('send_chat', {\n      gameId: gameState.id,\n      message: chatMessage.trim()\n    });\n    setChatMessage('');\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendChat();\n    }\n  };\n  const isMyTurn = ((_gameState$players$ga = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga === void 0 ? void 0 : _gameState$players$ga.id) === updatedCurrentPlayer.id;\n  const canMakeDecision = gameState.gamePhase === 'dealing' && updatedCurrentPlayer.enteredRound === undefined && isMyTurn;\n  const canExchange = gameState.gamePhase === 'exchanging' && updatedCurrentPlayer.enteredRound === true && !updatedCurrentPlayer.hasExchanged && isMyTurn;\n  const canExchangeTrump = gameState.gamePhase === 'trump_exchanging' && updatedCurrentPlayer.enteredRound === true && updatedCurrentPlayer.isDealer && ((_gameState$players$ga2 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga2 === void 0 ? void 0 : _gameState$players$ga2.id) === updatedCurrentPlayer.id;\n  const canPlayCard = gameState.gamePhase === 'playing' && updatedCurrentPlayer.enteredRound === true && isMyTurn;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-room-new\",\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      gameState: gameState,\n      onLeaveGame: onLeaveGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameTable, {\n      gameState: gameState,\n      currentPlayer: updatedCurrentPlayer,\n      canPlayCard: canPlayCard,\n      playableCards: playableCards,\n      onDragOver: handleDragOver,\n      onDropToPlay: e => handleDropToPlay(e, cardOrder, playableCards, handlePlayCard),\n      botActionMessage: botActionMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameControls, {\n      gameState: gameState,\n      currentPlayer: updatedCurrentPlayer,\n      canMakeDecision: canMakeDecision,\n      canExchange: canExchange,\n      canExchangeTrump: canExchangeTrump,\n      onReady: handleReady,\n      onUnready: handleUnready,\n      onStartGame: handleStartGame,\n      onEnterTurn: handleEnterTurn,\n      onSkipTurn: handleSkipTurn,\n      onOpenExchange: handleOpenExchange,\n      onOpenTrumpExchange: handleOpenTrumpExchange,\n      onSkipExchange: handleSkipExchange,\n      onSkipTrumpExchange: handleSkipTrumpExchange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExchangeModal, {\n      showExchangeModal: showExchangeModal,\n      isTrumpExchange: isTrumpExchange,\n      gameState: gameState,\n      currentPlayer: updatedCurrentPlayer,\n      selectedCardsForExchange: selectedCardsForExchange,\n      onCardSelectForExchange: handleCardSelectForExchange,\n      onExchangeCards: handleExchangeCards,\n      onSkipExchange: handleSkipExchange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatPanel, {\n      showChat: showChat,\n      chatMessage: chatMessage,\n      chatMessages: gameState.chatMessages,\n      onToggleChat: () => setShowChat(!showChat),\n      onSendChat: handleSendChat,\n      onChatMessageChange: setChatMessage,\n      onKeyPress: handleKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n};\n_s(GameRoom, \"FzhYmneMn5gXHuRgjNBqIa1T8DY=\", false, function () {\n  return [useDragAndDrop];\n});\n_c = GameRoom;\nexport default GameRoom;\nvar _c;\n$RefreshReg$(_c, \"GameRoom\");","map":{"version":3,"names":["React","useState","useEffect","GameHeader","GameTable","GameControls","ChatPanel","ExchangeModal","useDragAndDrop","jsxDEV","_jsxDEV","GameRoom","socket","gameState","currentPlayer","onLeaveGame","_s","_gameState$players$ga","_gameState$players$ga2","chatMessage","setChatMessage","playableCards","setPlayableCards","showChat","setShowChat","selectedCardsForExchange","setSelectedCardsForExchange","showExchangeModal","setShowExchangeModal","isTrumpExchange","setIsTrumpExchange","botActionMessage","setBotActionMessage","cardOrder","setCardOrder","prevPlayersRef","useRef","players","updatedCurrentPlayer","find","player","id","handleDragOver","handleDropToPlay","Array","isArray","hand","prevOrder","handArray","newOrder","filter","index","length","i","includes","push","gamePhase","isMyTurn","emit","gameId","currentPlayerIndex","on","data","off","name","isBot","prevPlayers","current","currentPlayers","forEach","prevPlayer","enteredRound","undefined","action","setTimeout","hasExchanged","handleReady","isReady","handleUnready","handleStartGame","handleEnterTurn","handleSkipTurn","handlePlayCard","cardIndex","handleCardSelectForExchange","prev","maxExchangeable","tree","handleExchangeCards","console","warn","cardIndices","handleSkipExchange","handleOpenExchange","handleOpenTrumpExchange","handleSkipTrumpExchange","handleSendChat","trim","message","handleKeyPress","e","key","shiftKey","preventDefault","canMakeDecision","canExchange","canExchangeTrump","isDealer","canPlayCard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDragOver","onDropToPlay","onReady","onUnready","onStartGame","onEnterTurn","onSkipTurn","onOpenExchange","onOpenTrumpExchange","onSkipExchange","onSkipTrumpExchange","onCardSelectForExchange","onExchangeCards","chatMessages","onToggleChat","onSendChat","onChatMessageChange","onKeyPress","_c","$RefreshReg$"],"sources":["/Users/enkhmendeee/muushig/client/src/pages/GameRoom.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Socket } from 'socket.io-client';\nimport { Player, GameState } from '../types/game';\nimport GameHeader from '../components/layout/GameHeader';\nimport GameTable from '../components/game/GameTable';\nimport GameControls from '../components/game/GameControls';\nimport ChatPanel from '../components/game/ChatPanel';\nimport ExchangeModal from '../components/game/ExchangeModal';\nimport { useDragAndDrop } from '../hooks/useDragAndDrop';\n\nconst GameRoom: React.FC<{\n  socket: Socket | null;\n  gameState: GameState;\n  currentPlayer: Player;\n  onLeaveGame: () => void;\n}> = ({ socket, gameState, currentPlayer, onLeaveGame }) => {\n  const [chatMessage, setChatMessage] = useState('');\n  const [playableCards, setPlayableCards] = useState<number[]>([]);\n  const [showChat, setShowChat] = useState(false);\n  const [selectedCardsForExchange, setSelectedCardsForExchange] = useState<number[]>([]);\n  const [showExchangeModal, setShowExchangeModal] = useState(false);\n  const [isTrumpExchange, setIsTrumpExchange] = useState(false);\n  const [botActionMessage, setBotActionMessage] = useState<string>('');\n  const [cardOrder, setCardOrder] = useState<number[]>([]);\n\n  const prevPlayersRef = React.useRef(gameState.players);\n  \n  // Update currentPlayer with latest data from gameState\n  const updatedCurrentPlayer = gameState.players.find(player => player.id === currentPlayer.id) || currentPlayer;\n\n  // Use drag and drop hook\n  const {\n    handleDragOver,\n    handleDropToPlay,\n  } = useDragAndDrop();\n\n  // Initialize card order when hand changes\n  useEffect(() => {\n    if (Array.isArray(updatedCurrentPlayer.hand)) {\n      // Filter out indices that no longer exist in the hand\n      setCardOrder(prevOrder => {\n        const handArray = updatedCurrentPlayer.hand as any[];\n        const newOrder = prevOrder.filter(index => index < handArray.length);\n        // Add any new indices that might have been added\n        for (let i = 0; i < handArray.length; i++) {\n          if (!newOrder.includes(i)) {\n            newOrder.push(i);\n          }\n        }\n        return newOrder;\n      });\n    }\n  }, [updatedCurrentPlayer.hand]);\n\n  useEffect(() => {\n    if (socket && gameState.gamePhase === 'playing' && isMyTurn) {\n      socket.emit('get_playable_cards', { gameId: gameState.id });\n    }\n  }, [socket, gameState.gamePhase, gameState.currentPlayerIndex, updatedCurrentPlayer.id]);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('playable_cards', (data: { gameId: string; playableCards: number[] }) => {\n      if (data.gameId === gameState.id) {\n        setPlayableCards(data.playableCards);\n      }\n    });\n\n    return () => {\n      socket.off('playable_cards');\n    };\n  }, [socket, gameState.id, currentPlayer.name]);\n\n  // Track bot decisions and show notifications\n  useEffect(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (currentPlayer?.isBot) {\n      // Clear any existing bot action message when a new bot starts thinking\n      setBotActionMessage('');\n    }\n  }, [gameState.currentPlayerIndex, gameState.players]);\n\n  // Track when bots make decisions\n  useEffect(() => {\n    const prevPlayers = prevPlayersRef.current;\n    const currentPlayers = gameState.players;\n    \n    currentPlayers.forEach((player, index) => {\n      const prevPlayer = prevPlayers[index];\n      if (player.isBot && \n          prevPlayer && \n          prevPlayer.enteredRound === undefined && \n          player.enteredRound !== undefined) {\n        const action = player.enteredRound ? 'entered' : 'declined';\n        setBotActionMessage(`${player.name} ${action} the round`);\n        \n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n      \n      // Track exchange decisions\n      if (player.isBot && \n          prevPlayer && \n          !prevPlayer.hasExchanged && \n          player.hasExchanged) {\n        const action = gameState.gamePhase === 'trump_exchanging' ? 'exchanged trump card' : 'exchanged cards';\n        setBotActionMessage(`${player.name} ${action}`);\n        \n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n    });\n    \n    prevPlayersRef.current = currentPlayers;\n  }, [gameState.players]);\n\n  const handleReady = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: true });\n  };\n\n  const handleUnready = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: false });\n  };\n\n  const handleStartGame = () => {\n    if (!socket) return;\n    socket.emit('start_game', { gameId: gameState.id });\n  };\n\n  const handleEnterTurn = () => {\n    if (!socket) return;\n    socket.emit('enter_turn', { gameId: gameState.id });\n  };\n\n  const handleSkipTurn = () => {\n    if (!socket) return;\n    socket.emit('skip_turn', { gameId: gameState.id });\n  };\n\n  const handlePlayCard = (cardIndex: number) => {\n    if (!socket) return;\n    socket.emit('play_card', { gameId: gameState.id, cardIndex });\n  };\n\n  const handleCardSelectForExchange = (cardIndex: number) => {\n    setSelectedCardsForExchange(prev => {\n      if (prev.includes(cardIndex)) {\n        return prev.filter(index => index !== cardIndex);\n      }\n      \n      if (isTrumpExchange) {\n        // For trump exchange, only allow one card selection\n        return [cardIndex];\n      }\n      \n      // For regular exchange, limit to tree size\n      const maxExchangeable = gameState.tree.length;\n      if (prev.length >= maxExchangeable) {\n        // If already at max, don't add more cards\n        return prev;\n      }\n      \n      return [...prev, cardIndex];\n    });\n  };\n\n  const handleExchangeCards = () => {\n    if (!socket || selectedCardsForExchange.length === 0) return;\n    \n    if (isTrumpExchange) {\n      // For trump exchange, only exchange the first selected card\n      socket.emit('exchange_trump', { \n        gameId: gameState.id, \n        cardIndex: selectedCardsForExchange[0] \n      });\n    } else {\n      // For regular exchange, validate against tree size\n      const maxExchangeable = gameState.tree.length;\n      if (selectedCardsForExchange.length > maxExchangeable) {\n        console.warn(`Cannot exchange ${selectedCardsForExchange.length} cards when only ${maxExchangeable} are available in tree`);\n        return;\n      }\n      \n      socket.emit('exchange_cards', { \n        gameId: gameState.id, \n        cardIndices: selectedCardsForExchange \n      });\n    }\n    \n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleSkipExchange = () => {\n    if (!socket) return;\n    \n    if (isTrumpExchange) {\n      socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n    } else {\n      socket.emit('exchange_cards', { gameId: gameState.id, cardIndices: [] });\n    }\n    \n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleOpenExchange = () => {\n    setIsTrumpExchange(false);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleOpenTrumpExchange = () => {\n    setIsTrumpExchange(true);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleSkipTrumpExchange = () => {\n    if (!socket) return;\n    socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n  };\n\n  const handleSendChat = () => {\n    if (!socket || !chatMessage.trim()) return;\n    socket.emit('send_chat', { gameId: gameState.id, message: chatMessage.trim() });\n    setChatMessage('');\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendChat();\n    }\n  };\n\n  const isMyTurn = gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canMakeDecision = gameState.gamePhase === 'dealing' && updatedCurrentPlayer.enteredRound === undefined && isMyTurn;\n  const canExchange = gameState.gamePhase === 'exchanging' && updatedCurrentPlayer.enteredRound === true && !updatedCurrentPlayer.hasExchanged && isMyTurn;\n  const canExchangeTrump = gameState.gamePhase === 'trump_exchanging' && updatedCurrentPlayer.enteredRound === true && updatedCurrentPlayer.isDealer && gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canPlayCard = gameState.gamePhase === 'playing' && updatedCurrentPlayer.enteredRound === true && isMyTurn;\n\n  return (\n    <div className=\"game-room-new\">\n      <GameHeader gameState={gameState} onLeaveGame={onLeaveGame} />\n      \n      <GameTable\n        gameState={gameState}\n        currentPlayer={updatedCurrentPlayer}\n        canPlayCard={canPlayCard}\n        playableCards={playableCards}\n        onDragOver={handleDragOver}\n        onDropToPlay={(e) => handleDropToPlay(e, cardOrder, playableCards, handlePlayCard)}\n        botActionMessage={botActionMessage}\n      />\n\n      <GameControls\n        gameState={gameState}\n        currentPlayer={updatedCurrentPlayer}\n        canMakeDecision={canMakeDecision}\n        canExchange={canExchange}\n        canExchangeTrump={canExchangeTrump}\n        onReady={handleReady}\n        onUnready={handleUnready}\n        onStartGame={handleStartGame}\n        onEnterTurn={handleEnterTurn}\n        onSkipTurn={handleSkipTurn}\n        onOpenExchange={handleOpenExchange}\n        onOpenTrumpExchange={handleOpenTrumpExchange}\n        onSkipExchange={handleSkipExchange}\n        onSkipTrumpExchange={handleSkipTrumpExchange}\n      />\n\n      <ExchangeModal\n        showExchangeModal={showExchangeModal}\n        isTrumpExchange={isTrumpExchange}\n        gameState={gameState}\n        currentPlayer={updatedCurrentPlayer}\n        selectedCardsForExchange={selectedCardsForExchange}\n        onCardSelectForExchange={handleCardSelectForExchange}\n        onExchangeCards={handleExchangeCards}\n        onSkipExchange={handleSkipExchange}\n      />\n\n      <ChatPanel\n        showChat={showChat}\n        chatMessage={chatMessage}\n        chatMessages={gameState.chatMessages}\n        onToggleChat={() => setShowChat(!showChat)}\n        onSendChat={handleSendChat}\n        onChatMessageChange={setChatMessage}\n        onKeyPress={handleKeyPress}\n      />\n    </div>\n  );\n};\n\nexport default GameRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}