{"ast":null,"code":"var _jsxFileName = \"/Users/enkhmendeee/muushig/client/src/pages/GameRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getSuitSymbol } from '../utils/gameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameRoom = ({\n  socket,\n  gameState,\n  currentPlayer,\n  onLeaveGame\n}) => {\n  _s();\n  var _gameState$players$ga, _gameState$players$ga2, _gameState$players$ga3, _gameState$players$ga4, _gameState$players$ga5, _gameState$players$ga6, _gameState$players$ga7, _gameState$players$ga8, _gameState$players$ga9, _gameState$players$ga0, _gameState$players$ga1, _gameState$players$ga10, _gameState$players$ga11, _gameState$players$ga12, _gameState$players$ga13, _gameState$players$ga14, _gameState$trumpCard, _gameState$trumpCard2, _gameState$players$fi;\n  const [chatMessage, setChatMessage] = useState('');\n  const [playableCards, setPlayableCards] = useState([]);\n  const [showChat, setShowChat] = useState(false);\n  const [selectedCardsForExchange, setSelectedCardsForExchange] = useState([]);\n  const [showExchangeModal, setShowExchangeModal] = useState(false);\n  const [isTrumpExchange, setIsTrumpExchange] = useState(false);\n  const [botActionMessage, setBotActionMessage] = useState('');\n  const [cardOrder, setCardOrder] = useState([]);\n  const [draggedCardIndex, setDraggedCardIndex] = useState(null);\n  const [isDraggingToPlay, setIsDraggingToPlay] = useState(false);\n  const actualPlayerIndex = gameState.players.findIndex(player => player.id === currentPlayer.id);\n  const prevPlayersRef = React.useRef(gameState.players);\n\n  // Update currentPlayer with latest data from gameState\n  const updatedCurrentPlayer = gameState.players.find(player => player.id === currentPlayer.id) || currentPlayer;\n\n  // Initialize card order when hand changes\n  useEffect(() => {\n    if (Array.isArray(updatedCurrentPlayer.hand)) {\n      // Filter out indices that no longer exist in the hand\n      setCardOrder(prevOrder => {\n        const handArray = updatedCurrentPlayer.hand;\n        const newOrder = prevOrder.filter(index => index < handArray.length);\n        // Add any new indices that might have been added\n        for (let i = 0; i < handArray.length; i++) {\n          if (!newOrder.includes(i)) {\n            newOrder.push(i);\n          }\n        }\n        return newOrder;\n      });\n    }\n  }, [updatedCurrentPlayer.hand]);\n  useEffect(() => {\n    if (socket && gameState.gamePhase === 'playing' && isMyTurn) {\n      socket.emit('get_playable_cards', {\n        gameId: gameState.id\n      });\n    }\n  }, [socket, gameState.gamePhase, gameState.currentPlayerIndex, updatedCurrentPlayer.id]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('playable_cards', data => {\n      if (data.gameId === gameState.id) {\n        setPlayableCards(data.playableCards);\n      }\n    });\n    socket.on('dismiss_score_overlay_error', data => {\n      alert(data.message);\n      // If the error is due to connection loss, try to reconnect\n      if (data.message.includes('Connection lost')) {\n        // Try to reconnect to the game\n        socket.emit('reconnect_to_game', {\n          gameId: gameState.id,\n          playerName: currentPlayer.name\n        });\n      }\n    });\n    socket.on('reconnect_error', data => {\n      alert(`Reconnection failed: ${data.message}`);\n    });\n    socket.on('reconnected', data => {\n      // Successfully reconnected\n    });\n    socket.on('score_overlay_dismissed', data => {\n      console.log('Score overlay dismissed by player:', data.playerId);\n    });\n    return () => {\n      socket.off('playable_cards');\n      socket.off('dismiss_score_overlay_error');\n      socket.off('reconnect_error');\n      socket.off('reconnected');\n      socket.off('score_overlay_dismissed');\n    };\n  }, [socket, gameState.id, currentPlayer.name]);\n\n  // Track bot decisions and show notifications\n  useEffect(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (currentPlayer !== null && currentPlayer !== void 0 && currentPlayer.isBot) {\n      // Clear any existing bot action message when a new bot starts thinking\n      setBotActionMessage('');\n    }\n  }, [gameState.currentPlayerIndex, gameState.players]);\n\n  // Track when bots make decisions\n  useEffect(() => {\n    const prevPlayers = prevPlayersRef.current;\n    const currentPlayers = gameState.players;\n    currentPlayers.forEach((player, index) => {\n      const prevPlayer = prevPlayers[index];\n      if (player.isBot && prevPlayer && prevPlayer.enteredRound === undefined && player.enteredRound !== undefined) {\n        const action = player.enteredRound ? 'entered' : 'declined';\n        setBotActionMessage(`${player.name} ${action} the round`);\n\n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n\n      // Track exchange decisions\n      if (player.isBot && prevPlayer && !prevPlayer.hasExchanged && player.hasExchanged) {\n        const action = gameState.gamePhase === 'trump_exchanging' ? 'exchanged trump card' : 'exchanged cards';\n        setBotActionMessage(`${player.name} ${action}`);\n\n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n    });\n    prevPlayersRef.current = currentPlayers;\n  }, [gameState.players]);\n  const handleReady = () => {\n    if (!socket) return;\n    socket.emit('ready_check', {\n      gameId: gameState.id,\n      isReady: true\n    });\n  };\n  const handleUnready = () => {\n    if (!socket) return;\n    socket.emit('ready_check', {\n      gameId: gameState.id,\n      isReady: false\n    });\n  };\n  const handleStartGame = () => {\n    if (!socket) return;\n    socket.emit('start_game', {\n      gameId: gameState.id\n    });\n  };\n  const handleEnterTurn = () => {\n    if (!socket) return;\n    socket.emit('enter_turn', {\n      gameId: gameState.id\n    });\n  };\n  const handleSkipTurn = () => {\n    if (!socket) return;\n    socket.emit('skip_turn', {\n      gameId: gameState.id\n    });\n  };\n  const handlePlayCard = cardIndex => {\n    if (!socket) return;\n    socket.emit('play_card', {\n      gameId: gameState.id,\n      cardIndex\n    });\n  };\n  const handleCardSelectForExchange = cardIndex => {\n    setSelectedCardsForExchange(prev => {\n      if (prev.includes(cardIndex)) {\n        return prev.filter(index => index !== cardIndex);\n      } else {\n        if (isTrumpExchange) {\n          // For trump exchange, only allow one card selection\n          return [cardIndex];\n        } else {\n          // For regular exchange, limit to tree size\n          const maxExchangeable = gameState.tree.length;\n          if (prev.length >= maxExchangeable) {\n            // If already at max, don't add more cards\n            return prev;\n          } else {\n            return [...prev, cardIndex];\n          }\n        }\n      }\n    });\n  };\n  const handleExchangeCards = () => {\n    if (!socket || selectedCardsForExchange.length === 0) return;\n    if (isTrumpExchange) {\n      // For trump exchange, only exchange the first selected card\n      socket.emit('exchange_trump', {\n        gameId: gameState.id,\n        cardIndex: selectedCardsForExchange[0]\n      });\n    } else {\n      // For regular exchange, validate against tree size\n      const maxExchangeable = gameState.tree.length;\n      if (selectedCardsForExchange.length > maxExchangeable) {\n        console.warn(`Cannot exchange ${selectedCardsForExchange.length} cards when only ${maxExchangeable} are available in tree`);\n        return;\n      }\n      socket.emit('exchange_cards', {\n        gameId: gameState.id,\n        cardIndices: selectedCardsForExchange\n      });\n    }\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n  const handleSkipExchange = () => {\n    if (!socket) return;\n    if (isTrumpExchange) {\n      socket.emit('exchange_trump', {\n        gameId: gameState.id,\n        cardIndex: -1\n      });\n    } else {\n      socket.emit('exchange_cards', {\n        gameId: gameState.id,\n        cardIndices: []\n      });\n    }\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n  const handleOpenExchange = () => {\n    setIsTrumpExchange(false);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n  const handleOpenTrumpExchange = () => {\n    setIsTrumpExchange(true);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n  const handleSkipTrumpExchange = () => {\n    if (!socket) return;\n    socket.emit('exchange_trump', {\n      gameId: gameState.id,\n      cardIndex: -1\n    });\n  };\n  const handleDismissScoreOverlay = () => {\n    console.log('handleDismissScoreOverlay called');\n    if (!socket) {\n      console.log('No socket available');\n      return;\n    }\n    console.log('Emitting dismiss_score_overlay for game:', gameState.id);\n    socket.emit('dismiss_score_overlay', {\n      gameId: gameState.id\n    });\n  };\n  const handleStartNextRound = () => {\n    if (!socket) return;\n    socket.emit('start_next_round', {\n      gameId: gameState.id\n    });\n  };\n  const handleSendChat = () => {\n    if (!socket || !chatMessage.trim()) return;\n    socket.emit('send_chat', {\n      gameId: gameState.id,\n      message: chatMessage.trim()\n    });\n    setChatMessage('');\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendChat();\n    }\n  };\n\n  // Drag and drop handlers for card reordering and playing\n  const handleDragStart = (e, cardIndex) => {\n    setDraggedCardIndex(cardIndex);\n    setIsDraggingToPlay(false);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', cardIndex.toString());\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n\n    // Add visual feedback for play drop zone\n    const target = e.currentTarget;\n    if (target.classList.contains('play-drop-zone')) {\n      target.classList.add('drag-over');\n    }\n  };\n  const handleDrop = (e, dropIndex) => {\n    e.preventDefault();\n    if (draggedCardIndex === null) return;\n    setCardOrder(prevOrder => {\n      const newOrder = [...prevOrder];\n      const draggedCardOriginalIndex = newOrder[draggedCardIndex];\n\n      // Remove the dragged card from its current position\n      newOrder.splice(draggedCardIndex, 1);\n\n      // Insert it at the new position\n      newOrder.splice(dropIndex, 0, draggedCardOriginalIndex);\n      return newOrder;\n    });\n    setDraggedCardIndex(null);\n  };\n  const handleDropToPlay = e => {\n    e.preventDefault();\n    if (draggedCardIndex === null || !canPlayCard) return;\n    const originalIndex = cardOrder[draggedCardIndex];\n    if (playableCards.includes(originalIndex)) {\n      handlePlayCard(originalIndex);\n    }\n    setDraggedCardIndex(null);\n  };\n  const handleDragEnd = () => {\n    setDraggedCardIndex(null);\n    setIsDraggingToPlay(false);\n\n    // Remove drag-over visual feedback\n    const dropZone = document.querySelector('.play-drop-zone');\n    if (dropZone) {\n      dropZone.classList.remove('drag-over');\n    }\n  };\n  const isMyTurn = ((_gameState$players$ga = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga === void 0 ? void 0 : _gameState$players$ga.id) === updatedCurrentPlayer.id;\n  const canMakeDecision = gameState.gamePhase === 'dealing' && updatedCurrentPlayer.enteredRound === undefined && isMyTurn;\n  const canExchange = gameState.gamePhase === 'exchanging' && updatedCurrentPlayer.enteredRound === true && !updatedCurrentPlayer.hasExchanged && isMyTurn;\n  const canExchangeTrump = gameState.gamePhase === 'trump_exchanging' && updatedCurrentPlayer.enteredRound === true && updatedCurrentPlayer.isDealer && ((_gameState$players$ga2 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga2 === void 0 ? void 0 : _gameState$players$ga2.id) === updatedCurrentPlayer.id;\n  const canPlayCard = gameState.gamePhase === 'playing' && updatedCurrentPlayer.enteredRound === true && isMyTurn;\n\n  // Debug card playing state\n  console.log(`Card playing debug:`, {\n    gamePhase: gameState.gamePhase,\n    currentPlayerIndex: gameState.currentPlayerIndex,\n    currentPlayerName: (_gameState$players$ga3 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga3 === void 0 ? void 0 : _gameState$players$ga3.name,\n    myPlayerName: updatedCurrentPlayer.name,\n    myPlayerId: updatedCurrentPlayer.id,\n    currentPlayerId: (_gameState$players$ga4 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga4 === void 0 ? void 0 : _gameState$players$ga4.id,\n    isMyTurn,\n    enteredRound: updatedCurrentPlayer.enteredRound,\n    canPlayCard,\n    playableCards,\n    playableCardsLength: playableCards.length,\n    roundScores: gameState.roundScores,\n    roundScoresLength: gameState.roundScores.length\n  });\n\n  // Calculate player positions around the table\n  const getPlayerPosition = (index, totalPlayers, actualPlayerIndex) => {\n    // Calculate relative position (how many positions away from current player)\n    let relativeIndex = index - actualPlayerIndex;\n    if (relativeIndex < 0) {\n      relativeIndex += totalPlayers;\n    }\n\n    // Position current player at bottom (270 degrees), others relative to that\n    const angle = relativeIndex * 360 / totalPlayers + 90; // Start from bottom\n\n    // Adjust radius based on number of players to prevent overlapping\n    const baseRadius = 250;\n    const radius = totalPlayers <= 3 ? baseRadius : baseRadius + (totalPlayers - 3) * 30;\n    const x = Math.cos(angle * Math.PI / 180) * radius;\n    const y = Math.sin(angle * Math.PI / 180) * radius;\n    return {\n      x,\n      y\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-room-new\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header-new\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"phase-badge-new\",\n          children: gameState.gamePhase.replace('_', ' ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bot-info\",\n          children: [\"\\uD83E\\uDD16 \", gameState.players.filter(p => p.isBot).length, \" Bots\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-id-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"room-badge-clickable\",\n          onClick: () => {\n            navigator.clipboard.writeText(gameState.id);\n            // Optional: Show a brief notification\n            const button = document.querySelector('.room-badge-clickable');\n            if (button) {\n              const originalText = button.textContent;\n              button.textContent = 'Copied!';\n              button.classList.add('copied');\n              setTimeout(() => {\n                button.textContent = originalText;\n                button.classList.remove('copied');\n              }, 2000);\n            }\n          },\n          title: \"Click to copy game ID\",\n          children: [\"Room: \", gameState.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onLeaveGame,\n        className: \"leave-btn-new\",\n        children: \"Leave Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `table-center ${canPlayCard ? 'play-drop-zone' : ''}`,\n          \"aria-label\": canPlayCard ? \"Card drop zone\" : undefined,\n          onDragOver: canPlayCard ? handleDragOver : undefined,\n          onDragLeave: e => {\n            if (canPlayCard && !e.currentTarget.contains(e.relatedTarget)) {\n              e.currentTarget.classList.remove('drag-over');\n            }\n          },\n          onDrop: canPlayCard ? e => handleDropToPlay(e) : undefined,\n          onKeyDown: canPlayCard ? e => e.preventDefault() : undefined,\n          onTouchStart: canPlayCard ? e => e.preventDefault() : undefined,\n          onMouseDown: canPlayCard ? e => e.preventDefault() : undefined,\n          children: [gameState.trumpCard && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trump-card-new\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card trump-new\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: gameState.trumpCard.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: getSuitSymbol(gameState.trumpCard.suit)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"trump-label\",\n              children: \"Trump\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-card-back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-count\",\n              children: gameState.tree.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this), gameState.currentHouse.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-house-new\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"house-label\",\n              children: \"Current House\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"house-cards-new\",\n              children: gameState.currentHouse.map((houseCard, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"house-card-new\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card house-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `card-rank ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`,\n                    children: houseCard.card.rank\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 465,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `card-suit ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`,\n                    children: getSuitSymbol(houseCard.card.suit)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 468,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-player-name\",\n                  children: houseCard.playerName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 23\n                }, this)]\n              }, `${houseCard.playerId}-${houseCard.card.suit}-${houseCard.card.rank}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this), gameState.houses.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"completed-houses\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"houses-label\",\n              children: [\"Completed Houses: \", gameState.houses.length, \"/5\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'dealing' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga5 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga5 !== void 0 && _gameState$players$ga5.isBot ? '🤖 ' : '', (_gameState$players$ga6 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga6 === void 0 ? void 0 : _gameState$players$ga6.name, \" is deciding to enter...\", ((_gameState$players$ga7 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga7 === void 0 ? void 0 : _gameState$players$ga7.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'exchanging' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga8 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga8 !== void 0 && _gameState$players$ga8.isBot ? '🤖 ' : '', (_gameState$players$ga9 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga9 === void 0 ? void 0 : _gameState$players$ga9.name, \" is exchanging cards...\", ((_gameState$players$ga0 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga0 === void 0 ? void 0 : _gameState$players$ga0.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'trump_exchanging' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga1 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga1 !== void 0 && _gameState$players$ga1.isBot ? '🤖 ' : '', (_gameState$players$ga10 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga10 === void 0 ? void 0 : _gameState$players$ga10.name, \" is exchanging trump card...\", ((_gameState$players$ga11 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga11 === void 0 ? void 0 : _gameState$players$ga11.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga12 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga12 !== void 0 && _gameState$players$ga12.isBot ? '🤖 ' : '', (_gameState$players$ga13 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga13 === void 0 ? void 0 : _gameState$players$ga13.name, \" is playing a card...\", ((_gameState$players$ga14 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga14 === void 0 ? void 0 : _gameState$players$ga14.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 15\n          }, this), botActionMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bot-action-notification\",\n            children: botActionMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this), gameState.players.map((player, index) => {\n          const position = getPlayerPosition(index, gameState.players.length, actualPlayerIndex);\n          const isCurrentPlayer = player.id === updatedCurrentPlayer.id;\n          const isActiveTurn = gameState.currentPlayerIndex === index;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `player-position ${isCurrentPlayer ? 'current-player' : ''} ${isActiveTurn ? 'active-turn' : ''}`,\n            style: {\n              '--x': `${position.x}px`,\n              '--y': `${position.y}px`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar\",\n              children: [player.isHost && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"crown\",\n                children: \"\\uD83D\\uDC51\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 37\n              }, this), player.isDealer && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"dealer-icon\",\n                children: \"\\uD83C\\uDFAF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 39\n              }, this), player.isMouth && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mouth-icon\",\n                children: \"\\uD83D\\uDC44\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 38\n              }, this), player.isBot && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"bot-icon\",\n                children: \"\\uD83E\\uDD16\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 36\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar-icon\",\n                children: player.name.charAt(0).toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-info-new\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-name-new\",\n                children: player.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-score-new\",\n                children: [player.score, \"/-\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-houses-new\",\n                children: [\"Houses: \", player.housesBuilt]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-hand-new\",\n              children: isCurrentPlayer ?\n              /*#__PURE__*/\n              // Show actual cards for current player\n              _jsxDEV(\"div\", {\n                className: \"hand-cards\",\n                children: Array.isArray(player.hand) ? cardOrder.map((originalIndex, displayIndex) => {\n                  const card = player.hand[originalIndex];\n                  // Skip rendering if card doesn't exist (was played)\n                  if (!card) return null;\n                  return /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `card hand-card ${playableCards.includes(originalIndex) ? 'playable' : ''} ${canPlayCard ? 'my-turn' : ''} ${selectedCardsForExchange.includes(originalIndex) ? 'selected-for-exchange' : ''} ${draggedCardIndex === displayIndex ? 'dragging' : ''}`,\n                    draggable: canPlayCard ? playableCards.includes(originalIndex) : true,\n                    onDragStart: e => handleDragStart(e, displayIndex),\n                    onDragOver: handleDragOver,\n                    onDrop: e => handleDrop(e, displayIndex),\n                    onDragEnd: handleDragEnd,\n                    onClick: () => {\n                      console.log(`Card clicked: originalIndex=${originalIndex}, displayIndex=${displayIndex}, canExchange=${canExchange}, isMyTurn=${isMyTurn}, canPlayCard=${canPlayCard}, playableCards=${playableCards}`);\n                      if (canExchange) {\n                        handleCardSelectForExchange(originalIndex);\n                      }\n                    },\n                    disabled: canPlayCard && !playableCards.includes(originalIndex),\n                    \"aria-label\": `Play ${card.rank} of ${card.suit}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                      children: card.rank\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 586,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                      children: getSuitSymbol(card.suit)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 589,\n                      columnNumber: 29\n                    }, this)]\n                  }, `${card.suit}-${card.rank}-${originalIndex}-${displayIndex}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 565,\n                    columnNumber: 27\n                  }, this);\n                }) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-count\",\n                  children: [player.hand, \" cards\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 21\n              }, this) :\n              /*#__PURE__*/\n              // Show card backs for other players\n              _jsxDEV(\"div\", {\n                className: \"opponent-cards\",\n                children: Array.isArray(player.hand) ? player.hand.map((_, cardIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card card-back\"\n                }, `${player.id}-card-back-${cardIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 602,\n                  columnNumber: 25\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-count\",\n                  children: [player.hand, \" cards\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 604,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-status-new\",\n              children: [player.isReady && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ready-badge-new\",\n                children: \"Ready\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 38\n              }, this), player.enteredRound === true && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"entered-badge-new\",\n                children: \"Entered\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 52\n              }, this), player.enteredRound === false && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"declined-badge-new\",\n                children: \"Declined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 53\n              }, this), player.hasExchanged && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"exchanged-badge-new\",\n                children: \"Exchanged\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 43\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 17\n            }, this)]\n          }, player.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls-new\",\n      children: [gameState.gamePhase === 'waiting' && !updatedCurrentPlayer.isReady && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReady,\n        className: \"ready-btn-new\",\n        children: \"Ready\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 11\n      }, this), gameState.gamePhase === 'waiting' && updatedCurrentPlayer.isReady && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUnready,\n        className: \"unready-btn-new\",\n        children: \"Unready\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 11\n      }, this), updatedCurrentPlayer.isHost && gameState.gamePhase === 'ready' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartGame,\n        className: \"start-btn-new\",\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 11\n      }, this), canMakeDecision && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"decision-buttons-new\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEnterTurn,\n          className: \"enter-btn-new\",\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSkipTurn,\n          className: \"skip-btn-new\",\n          children: \"Skip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 11\n      }, this), canExchange && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOpenExchange,\n          className: \"exchange-btn\",\n          children: [\"Exchange Cards (\", gameState.tree.length, \" available)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSkipExchange,\n          className: \"skip-exchange-btn\",\n          children: \"Skip Exchange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 11\n      }, this), canExchangeTrump && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOpenTrumpExchange,\n          className: \"exchange-btn\",\n          children: \"Exchange Trump Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSkipTrumpExchange,\n          className: \"skip-exchange-btn\",\n          children: \"Skip Trump Exchange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this), showExchangeModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exchange-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: isTrumpExchange ? 'Exchange Trump Card' : 'Exchange Cards'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 13\n        }, this), isTrumpExchange && gameState.trumpCard && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trump-card-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card trump-new\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n              children: gameState.trumpCard.rank\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n              children: getSuitSymbol(gameState.trumpCard.suit)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trump-label\",\n            children: \"Trump Card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isTrumpExchange ? `Select one card to exchange with the trump card (${(_gameState$trumpCard = gameState.trumpCard) === null || _gameState$trumpCard === void 0 ? void 0 : _gameState$trumpCard.rank} of ${(_gameState$trumpCard2 = gameState.trumpCard) === null || _gameState$trumpCard2 === void 0 ? void 0 : _gameState$trumpCard2.suit})` : `Select cards to exchange with the tree. You can exchange up to ${gameState.tree.length} cards.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exchange-cards-preview\",\n          children: Array.isArray(updatedCurrentPlayer.hand) && updatedCurrentPlayer.hand.map((card, index) => {\n            const isSelected = selectedCardsForExchange.includes(index);\n            const maxReached = !isTrumpExchange && selectedCardsForExchange.length >= gameState.tree.length && !isSelected;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `card exchange-card ${isSelected ? 'selected' : ''} ${maxReached ? 'disabled' : ''}`,\n              onClick: () => handleCardSelectForExchange(index),\n              disabled: maxReached,\n              title: maxReached ? `Cannot select more than ${gameState.tree.length} cards` : '',\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: card.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 711,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: getSuitSymbol(card.suit)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 21\n              }, this)]\n            }, `${card.suit}-${card.rank}-${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exchange-modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleExchangeCards,\n            disabled: selectedCardsForExchange.length === 0 || !isTrumpExchange && selectedCardsForExchange.length > gameState.tree.length,\n            className: \"confirm-exchange-btn\",\n            children: isTrumpExchange ? `Exchange ${selectedCardsForExchange.length} Card` : `Exchange ${selectedCardsForExchange.length} Cards (max ${gameState.tree.length})`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSkipExchange,\n            className: \"skip-exchange-btn\",\n            children: isTrumpExchange ? 'Skip Trump Exchange' : 'Skip Exchange'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 9\n    }, this), gameState.gamePhase === 'round_finished' && gameState.roundScores.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-overlay-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-overlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Round \", gameState.roundScores[gameState.roundScores.length - 1].roundNumber, \" Results\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-results\",\n          children: gameState.roundScores[gameState.roundScores.length - 1].playerScores.map((playerScore, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `score-row ${playerScore.playerId === gameState.roundScores[gameState.roundScores.length - 1].winner ? 'winner' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: playerScore.playerName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"score-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"previous-score\",\n                children: playerScore.previousScore\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 750,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"arrow\",\n                children: \"\\u2192\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 751,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"new-score\",\n                children: playerScore.newScore\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 752,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"houses-built\",\n                children: [\"(\", playerScore.housesBuilt, \" houses)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 753,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 19\n            }, this)]\n          }, playerScore.playerId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"round-winner\",\n          children: [\"\\uD83C\\uDFC6 \", (_gameState$players$fi = gameState.players.find(p => p.id === gameState.roundScores[gameState.roundScores.length - 1].winner)) === null || _gameState$players$fi === void 0 ? void 0 : _gameState$players$fi.name, \" won the round!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDismissScoreOverlay,\n          className: \"dismiss-score-btn\",\n          disabled: !socket,\n          children: !socket ? 'Reconnecting...' : 'Continue to Next Round'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowChat(!showChat),\n      className: \"chat-toggle-btn\",\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 7\n    }, this), showChat && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowChat(false),\n          className: \"close-chat\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-new\",\n        children: gameState.chatMessages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message-new ${message.type}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-sender\",\n            children: [message.playerName, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-text\",\n            children: message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 17\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-new\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type a message...\",\n          value: chatMessage,\n          onChange: e => setChatMessage(e.target.value),\n          onKeyDown: handleKeyPress,\n          className: \"message-input-new\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendChat,\n          className: \"send-btn-new\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n};\n_s(GameRoom, \"z46YzEZRcWLtqOXqHKILRJdW5Kk=\");\n_c = GameRoom;\nexport default GameRoom;\nvar _c;\n$RefreshReg$(_c, \"GameRoom\");","map":{"version":3,"names":["React","useState","useEffect","getSuitSymbol","jsxDEV","_jsxDEV","GameRoom","socket","gameState","currentPlayer","onLeaveGame","_s","_gameState$players$ga","_gameState$players$ga2","_gameState$players$ga3","_gameState$players$ga4","_gameState$players$ga5","_gameState$players$ga6","_gameState$players$ga7","_gameState$players$ga8","_gameState$players$ga9","_gameState$players$ga0","_gameState$players$ga1","_gameState$players$ga10","_gameState$players$ga11","_gameState$players$ga12","_gameState$players$ga13","_gameState$players$ga14","_gameState$trumpCard","_gameState$trumpCard2","_gameState$players$fi","chatMessage","setChatMessage","playableCards","setPlayableCards","showChat","setShowChat","selectedCardsForExchange","setSelectedCardsForExchange","showExchangeModal","setShowExchangeModal","isTrumpExchange","setIsTrumpExchange","botActionMessage","setBotActionMessage","cardOrder","setCardOrder","draggedCardIndex","setDraggedCardIndex","isDraggingToPlay","setIsDraggingToPlay","actualPlayerIndex","players","findIndex","player","id","prevPlayersRef","useRef","updatedCurrentPlayer","find","Array","isArray","hand","prevOrder","handArray","newOrder","filter","index","length","i","includes","push","gamePhase","isMyTurn","emit","gameId","currentPlayerIndex","on","data","alert","message","playerName","name","console","log","playerId","off","isBot","prevPlayers","current","currentPlayers","forEach","prevPlayer","enteredRound","undefined","action","setTimeout","hasExchanged","handleReady","isReady","handleUnready","handleStartGame","handleEnterTurn","handleSkipTurn","handlePlayCard","cardIndex","handleCardSelectForExchange","prev","maxExchangeable","tree","handleExchangeCards","warn","cardIndices","handleSkipExchange","handleOpenExchange","handleOpenTrumpExchange","handleSkipTrumpExchange","handleDismissScoreOverlay","handleStartNextRound","handleSendChat","trim","handleKeyPress","e","key","shiftKey","preventDefault","handleDragStart","dataTransfer","effectAllowed","setData","toString","handleDragOver","dropEffect","target","currentTarget","classList","contains","add","handleDrop","dropIndex","draggedCardOriginalIndex","splice","handleDropToPlay","canPlayCard","originalIndex","handleDragEnd","dropZone","document","querySelector","remove","canMakeDecision","canExchange","canExchangeTrump","isDealer","currentPlayerName","myPlayerName","myPlayerId","currentPlayerId","playableCardsLength","roundScores","roundScoresLength","getPlayerPosition","totalPlayers","relativeIndex","angle","baseRadius","radius","x","Math","cos","PI","y","sin","className","children","replace","fileName","_jsxFileName","lineNumber","columnNumber","p","onClick","navigator","clipboard","writeText","button","originalText","textContent","title","onDragOver","onDragLeave","relatedTarget","onDrop","onKeyDown","onTouchStart","onMouseDown","trumpCard","suit","rank","currentHouse","map","houseCard","card","houses","position","isCurrentPlayer","isActiveTurn","style","isHost","isMouth","charAt","toUpperCase","score","housesBuilt","displayIndex","draggable","onDragStart","onDragEnd","disabled","_","isSelected","maxReached","roundNumber","playerScores","playerScore","winner","previousScore","newScore","chatMessages","type","placeholder","value","onChange","_c","$RefreshReg$"],"sources":["/Users/enkhmendeee/muushig/client/src/pages/GameRoom.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Socket } from 'socket.io-client';\nimport { Player, GameState, ChatMessage } from '../types/game';\nimport { getSuitSymbol } from '../utils/gameUtils';\n\nconst GameRoom: React.FC<{\n  socket: Socket | null;\n  gameState: GameState;\n  currentPlayer: Player;\n  onLeaveGame: () => void;\n}> = ({ socket, gameState, currentPlayer, onLeaveGame }) => {\n  const [chatMessage, setChatMessage] = useState('');\n  const [playableCards, setPlayableCards] = useState<number[]>([]);\n  const [showChat, setShowChat] = useState(false);\n  const [selectedCardsForExchange, setSelectedCardsForExchange] = useState<number[]>([]);\n  const [showExchangeModal, setShowExchangeModal] = useState(false);\n  const [isTrumpExchange, setIsTrumpExchange] = useState(false);\n  const [botActionMessage, setBotActionMessage] = useState<string>('');\n  const [cardOrder, setCardOrder] = useState<number[]>([]);\n  const [draggedCardIndex, setDraggedCardIndex] = useState<number | null>(null);\n  const [isDraggingToPlay, setIsDraggingToPlay] = useState(false);\n  const actualPlayerIndex = gameState.players.findIndex(player => player.id === currentPlayer.id);\n  const prevPlayersRef = React.useRef(gameState.players);\n  \n  // Update currentPlayer with latest data from gameState\n  const updatedCurrentPlayer = gameState.players.find(player => player.id === currentPlayer.id) || currentPlayer;\n\n  // Initialize card order when hand changes\n  useEffect(() => {\n    if (Array.isArray(updatedCurrentPlayer.hand)) {\n      // Filter out indices that no longer exist in the hand\n      setCardOrder(prevOrder => {\n        const handArray = updatedCurrentPlayer.hand as any[];\n        const newOrder = prevOrder.filter(index => index < handArray.length);\n        // Add any new indices that might have been added\n        for (let i = 0; i < handArray.length; i++) {\n          if (!newOrder.includes(i)) {\n            newOrder.push(i);\n          }\n        }\n        return newOrder;\n      });\n    }\n  }, [updatedCurrentPlayer.hand]);\n\n  useEffect(() => {\n    if (socket && gameState.gamePhase === 'playing' && isMyTurn) {\n      socket.emit('get_playable_cards', { gameId: gameState.id });\n    }\n  }, [socket, gameState.gamePhase, gameState.currentPlayerIndex, updatedCurrentPlayer.id]);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('playable_cards', (data: { gameId: string; playableCards: number[] }) => {\n      if (data.gameId === gameState.id) {\n        setPlayableCards(data.playableCards);\n      }\n    });\n\n    socket.on('dismiss_score_overlay_error', (data: { message: string }) => {\n      alert(data.message);\n      // If the error is due to connection loss, try to reconnect\n      if (data.message.includes('Connection lost')) {\n        // Try to reconnect to the game\n        socket.emit('reconnect_to_game', { \n          gameId: gameState.id, \n          playerName: currentPlayer.name \n        });\n      }\n    });\n\n    socket.on('reconnect_error', (data: { message: string }) => {\n      alert(`Reconnection failed: ${data.message}`);\n    });\n\n    socket.on('reconnected', (data: { gameId: string; player: any }) => {\n      // Successfully reconnected\n    });\n\n    socket.on('score_overlay_dismissed', (data: { playerId: string }) => {\n      console.log('Score overlay dismissed by player:', data.playerId);\n    });\n\n    return () => {\n      socket.off('playable_cards');\n      socket.off('dismiss_score_overlay_error');\n      socket.off('reconnect_error');\n      socket.off('reconnected');\n      socket.off('score_overlay_dismissed');\n    };\n  }, [socket, gameState.id, currentPlayer.name]);\n\n  // Track bot decisions and show notifications\n  useEffect(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (currentPlayer?.isBot) {\n      // Clear any existing bot action message when a new bot starts thinking\n      setBotActionMessage('');\n    }\n  }, [gameState.currentPlayerIndex, gameState.players]);\n\n  // Track when bots make decisions\n  useEffect(() => {\n    const prevPlayers = prevPlayersRef.current;\n    const currentPlayers = gameState.players;\n    \n    currentPlayers.forEach((player, index) => {\n      const prevPlayer = prevPlayers[index];\n      if (player.isBot && \n          prevPlayer && \n          prevPlayer.enteredRound === undefined && \n          player.enteredRound !== undefined) {\n        const action = player.enteredRound ? 'entered' : 'declined';\n        setBotActionMessage(`${player.name} ${action} the round`);\n        \n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n      \n      // Track exchange decisions\n      if (player.isBot && \n          prevPlayer && \n          !prevPlayer.hasExchanged && \n          player.hasExchanged) {\n        const action = gameState.gamePhase === 'trump_exchanging' ? 'exchanged trump card' : 'exchanged cards';\n        setBotActionMessage(`${player.name} ${action}`);\n        \n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n    });\n    \n    prevPlayersRef.current = currentPlayers;\n  }, [gameState.players]);\n\n  const handleReady = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: true });\n  };\n\n  const handleUnready = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: false });\n  };\n\n  const handleStartGame = () => {\n    if (!socket) return;\n    socket.emit('start_game', { gameId: gameState.id });\n  };\n\n  const handleEnterTurn = () => {\n    if (!socket) return;\n    socket.emit('enter_turn', { gameId: gameState.id });\n  };\n\n  const handleSkipTurn = () => {\n    if (!socket) return;\n    socket.emit('skip_turn', { gameId: gameState.id });\n  };\n\n  const handlePlayCard = (cardIndex: number) => {\n    if (!socket) return;\n    socket.emit('play_card', { gameId: gameState.id, cardIndex });\n  };\n\n  const handleCardSelectForExchange = (cardIndex: number) => {\n    setSelectedCardsForExchange(prev => {\n      if (prev.includes(cardIndex)) {\n        return prev.filter(index => index !== cardIndex);\n      } else {\n        if (isTrumpExchange) {\n          // For trump exchange, only allow one card selection\n          return [cardIndex];\n        } else {\n          // For regular exchange, limit to tree size\n          const maxExchangeable = gameState.tree.length;\n          if (prev.length >= maxExchangeable) {\n            // If already at max, don't add more cards\n            return prev;\n          } else {\n            return [...prev, cardIndex];\n          }\n        }\n      }\n    });\n  };\n\n  const handleExchangeCards = () => {\n    if (!socket || selectedCardsForExchange.length === 0) return;\n    \n    if (isTrumpExchange) {\n      // For trump exchange, only exchange the first selected card\n      socket.emit('exchange_trump', { \n        gameId: gameState.id, \n        cardIndex: selectedCardsForExchange[0] \n      });\n    } else {\n      // For regular exchange, validate against tree size\n      const maxExchangeable = gameState.tree.length;\n      if (selectedCardsForExchange.length > maxExchangeable) {\n        console.warn(`Cannot exchange ${selectedCardsForExchange.length} cards when only ${maxExchangeable} are available in tree`);\n        return;\n      }\n      \n      socket.emit('exchange_cards', { \n        gameId: gameState.id, \n        cardIndices: selectedCardsForExchange \n      });\n    }\n    \n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleSkipExchange = () => {\n    if (!socket) return;\n    \n    if (isTrumpExchange) {\n      socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n    } else {\n      socket.emit('exchange_cards', { gameId: gameState.id, cardIndices: [] });\n    }\n    \n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleOpenExchange = () => {\n    setIsTrumpExchange(false);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleOpenTrumpExchange = () => {\n    setIsTrumpExchange(true);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleSkipTrumpExchange = () => {\n    if (!socket) return;\n    socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n  };\n\n  const handleDismissScoreOverlay = () => {\n    console.log('handleDismissScoreOverlay called');\n    if (!socket) {\n      console.log('No socket available');\n      return;\n    }\n    console.log('Emitting dismiss_score_overlay for game:', gameState.id);\n    socket.emit('dismiss_score_overlay', { gameId: gameState.id });\n  };\n\n  const handleStartNextRound = () => {\n    if (!socket) return;\n    socket.emit('start_next_round', { gameId: gameState.id });\n  };\n\n  const handleSendChat = () => {\n    if (!socket || !chatMessage.trim()) return;\n    socket.emit('send_chat', { gameId: gameState.id, message: chatMessage.trim() });\n    setChatMessage('');\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendChat();\n    }\n  };\n\n  // Drag and drop handlers for card reordering and playing\n  const handleDragStart = (e: React.DragEvent, cardIndex: number) => {\n    setDraggedCardIndex(cardIndex);\n    setIsDraggingToPlay(false);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', cardIndex.toString());\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n    \n    // Add visual feedback for play drop zone\n    const target = e.currentTarget as HTMLElement;\n    if (target.classList.contains('play-drop-zone')) {\n      target.classList.add('drag-over');\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent, dropIndex: number) => {\n    e.preventDefault();\n    if (draggedCardIndex === null) return;\n\n    setCardOrder(prevOrder => {\n      const newOrder = [...prevOrder];\n      const draggedCardOriginalIndex = newOrder[draggedCardIndex];\n      \n      // Remove the dragged card from its current position\n      newOrder.splice(draggedCardIndex, 1);\n      \n      // Insert it at the new position\n      newOrder.splice(dropIndex, 0, draggedCardOriginalIndex);\n      \n      return newOrder;\n    });\n    \n    setDraggedCardIndex(null);\n  };\n\n  const handleDropToPlay = (e: React.DragEvent) => {\n    e.preventDefault();\n    if (draggedCardIndex === null || !canPlayCard) return;\n\n    const originalIndex = cardOrder[draggedCardIndex];\n    if (playableCards.includes(originalIndex)) {\n      handlePlayCard(originalIndex);\n    }\n    \n    setDraggedCardIndex(null);\n  };\n\n  const handleDragEnd = () => {\n    setDraggedCardIndex(null);\n    setIsDraggingToPlay(false);\n    \n    // Remove drag-over visual feedback\n    const dropZone = document.querySelector('.play-drop-zone');\n    if (dropZone) {\n      dropZone.classList.remove('drag-over');\n    }\n  };\n\n  const isMyTurn = gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canMakeDecision = gameState.gamePhase === 'dealing' && updatedCurrentPlayer.enteredRound === undefined && isMyTurn;\n  const canExchange = gameState.gamePhase === 'exchanging' && updatedCurrentPlayer.enteredRound === true && !updatedCurrentPlayer.hasExchanged && isMyTurn;\n  const canExchangeTrump = gameState.gamePhase === 'trump_exchanging' && updatedCurrentPlayer.enteredRound === true && updatedCurrentPlayer.isDealer && gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canPlayCard = gameState.gamePhase === 'playing' && updatedCurrentPlayer.enteredRound === true && isMyTurn;\n\n  // Debug card playing state\n  console.log(`Card playing debug:`, {\n    gamePhase: gameState.gamePhase,\n    currentPlayerIndex: gameState.currentPlayerIndex,\n    currentPlayerName: gameState.players[gameState.currentPlayerIndex]?.name,\n    myPlayerName: updatedCurrentPlayer.name,\n    myPlayerId: updatedCurrentPlayer.id,\n    currentPlayerId: gameState.players[gameState.currentPlayerIndex]?.id,\n    isMyTurn,\n    enteredRound: updatedCurrentPlayer.enteredRound,\n    canPlayCard,\n    playableCards,\n    playableCardsLength: playableCards.length,\n    roundScores: gameState.roundScores,\n    roundScoresLength: gameState.roundScores.length\n  });\n\n  // Calculate player positions around the table\n  const getPlayerPosition = (index: number, totalPlayers: number, actualPlayerIndex: number) => {\n    // Calculate relative position (how many positions away from current player)\n    let relativeIndex = index - actualPlayerIndex;\n    if (relativeIndex < 0) {\n      relativeIndex += totalPlayers;\n    }\n    \n    // Position current player at bottom (270 degrees), others relative to that\n    const angle = (relativeIndex * 360) / totalPlayers + 90; // Start from bottom\n    \n    // Adjust radius based on number of players to prevent overlapping\n    const baseRadius = 250;\n    const radius = totalPlayers <= 3 ? baseRadius : baseRadius + (totalPlayers - 3) * 30;\n    \n    const x = Math.cos((angle * Math.PI) / 180) * radius;\n    const y = Math.sin((angle * Math.PI) / 180) * radius;\n    \n    return { x, y };\n  };\n\n  return (\n    <div className=\"game-room-new\">\n      {/* Header */}\n      <div className=\"game-header-new\">\n        <div className=\"room-info\">\n          <span className=\"phase-badge-new\">{gameState.gamePhase.replace('_', ' ')}</span>\n          <span className=\"bot-info\">🤖 {gameState.players.filter(p => p.isBot).length} Bots</span>\n        </div>\n        <div className=\"room-id-center\">\n          <button \n            className=\"room-badge-clickable\"\n            onClick={() => {\n              navigator.clipboard.writeText(gameState.id);\n              // Optional: Show a brief notification\n              const button = document.querySelector('.room-badge-clickable');\n              if (button) {\n                const originalText = button.textContent;\n                button.textContent = 'Copied!';\n                button.classList.add('copied');\n                setTimeout(() => {\n                  button.textContent = originalText;\n                  button.classList.remove('copied');\n                }, 2000);\n              }\n            }}\n            title=\"Click to copy game ID\"\n          >\n            Room: {gameState.id}\n          </button>\n        </div>\n        <button onClick={onLeaveGame} className=\"leave-btn-new\">Leave Game</button>\n      </div>\n\n      {/* Game Table */}\n      <div className=\"game-table-container\">\n        <div className=\"game-table\">\n          {/* Central Table Area */}\n          <div \n            className={`table-center ${canPlayCard ? 'play-drop-zone' : ''}`}\n            aria-label={canPlayCard ? \"Card drop zone\" : undefined}\n            onDragOver={canPlayCard ? handleDragOver : undefined}\n            onDragLeave={(e) => {\n              if (canPlayCard && !e.currentTarget.contains(e.relatedTarget as Node)) {\n                e.currentTarget.classList.remove('drag-over');\n              }\n            }}\n            onDrop={canPlayCard ? (e) => handleDropToPlay(e) : undefined}\n            onKeyDown={canPlayCard ? (e) => e.preventDefault() : undefined}\n            onTouchStart={canPlayCard ? (e) => e.preventDefault() : undefined}\n            onMouseDown={canPlayCard ? (e) => e.preventDefault() : undefined}\n          >\n            {/* Trump Card */}\n            {gameState.trumpCard && (\n              <div className=\"trump-card-new\">\n                <div className=\"card trump-new\">\n                  <span className={`card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {gameState.trumpCard.rank}\n                  </span>\n                  <span className={`card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {getSuitSymbol(gameState.trumpCard.suit)}\n                  </span>\n                </div>\n                <div className=\"trump-label\">Trump</div>\n              </div>\n            )}\n\n            {/* Tree Cards */}\n            <div className=\"tree-cards\">\n              <div className=\"tree-card-back\"></div>\n              <div className=\"tree-count\">{gameState.tree.length}</div>\n            </div>\n\n            {/* Current House */}\n            {gameState.currentHouse.length > 0 && (\n              <div className=\"current-house-new\">\n                <div className=\"house-label\">Current House</div>\n                <div className=\"house-cards-new\">\n                  {gameState.currentHouse.map((houseCard, index) => (\n                    <div key={`${houseCard.playerId}-${houseCard.card.suit}-${houseCard.card.rank}-${index}`} className=\"house-card-new\">\n                      <div className=\"card house-card\">\n                        <span className={`card-rank ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                          {houseCard.card.rank}\n                        </span>\n                        <span className={`card-suit ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                          {getSuitSymbol(houseCard.card.suit)}\n                        </span>\n                      </div>\n                      <div className=\"card-player-name\">{houseCard.playerName}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Completed Houses */}\n            {gameState.houses.length > 0 && (\n              <div className=\"completed-houses\">\n                <div className=\"houses-label\">Completed Houses: {gameState.houses.length}/5</div>\n              </div>\n            )}\n\n            {/* Game Status Message */}\n            {gameState.gamePhase === 'dealing' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is deciding to enter...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            {gameState.gamePhase === 'exchanging' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is exchanging cards...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            {gameState.gamePhase === 'trump_exchanging' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is exchanging trump card...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            {gameState.gamePhase === 'playing' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is playing a card...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            \n            {/* Bot Action Notification */}\n            {botActionMessage && (\n              <div className=\"bot-action-notification\">\n                {botActionMessage}\n              </div>\n            )}\n          </div>\n\n          {/* Players Around the Table */}\n          {gameState.players.map((player, index) => {\n            const position = getPlayerPosition(index, gameState.players.length, actualPlayerIndex);\n            const isCurrentPlayer = player.id === updatedCurrentPlayer.id;\n            const isActiveTurn = gameState.currentPlayerIndex === index;\n            \n            return (\n              <div\n                key={player.id}\n                className={`player-position ${isCurrentPlayer ? 'current-player' : ''} ${isActiveTurn ? 'active-turn' : ''}`}\n                style={{\n                  '--x': `${position.x}px`,\n                  '--y': `${position.y}px`\n                } as React.CSSProperties}\n              >\n                <div className=\"player-avatar\">\n                  {player.isHost && <span className=\"crown\">👑</span>}\n                  {player.isDealer && <span className=\"dealer-icon\">🎯</span>}\n                  {player.isMouth && <span className=\"mouth-icon\">👄</span>}\n                  {player.isBot && <span className=\"bot-icon\">🤖</span>}\n                  <div className=\"avatar-icon\">\n                    {player.name.charAt(0).toUpperCase()}\n                  </div>\n                </div>\n                \n                <div className=\"player-info-new\">\n                  <div className=\"player-name-new\">{player.name}</div>\n                  <div className=\"player-score-new\">{player.score}/-</div>\n                  <div className=\"player-houses-new\">Houses: {player.housesBuilt}</div>\n                </div>\n\n                                  {/* Player Hand */}\n                <div className=\"player-hand-new\">\n                  {isCurrentPlayer ? (\n                    // Show actual cards for current player\n                    <div className=\"hand-cards\">\n                      {Array.isArray(player.hand) ? cardOrder.map((originalIndex, displayIndex) => {\n                        const card = (player.hand as any[])[originalIndex];\n                        // Skip rendering if card doesn't exist (was played)\n                        if (!card) return null;\n                        return (\n                          <button \n                            key={`${card.suit}-${card.rank}-${originalIndex}-${displayIndex}`}\n                            className={`card hand-card ${playableCards.includes(originalIndex) ? 'playable' : ''} ${\n                              canPlayCard ? 'my-turn' : ''\n                            } ${selectedCardsForExchange.includes(originalIndex) ? 'selected-for-exchange' : ''} ${\n                              draggedCardIndex === displayIndex ? 'dragging' : ''\n                            }`}\n                            draggable={canPlayCard ? playableCards.includes(originalIndex) : true}\n                            onDragStart={(e) => handleDragStart(e, displayIndex)}\n                            onDragOver={handleDragOver}\n                            onDrop={(e) => handleDrop(e, displayIndex)}\n                            onDragEnd={handleDragEnd}\n                            onClick={() => {\n                              console.log(`Card clicked: originalIndex=${originalIndex}, displayIndex=${displayIndex}, canExchange=${canExchange}, isMyTurn=${isMyTurn}, canPlayCard=${canPlayCard}, playableCards=${playableCards}`);\n                              if (canExchange) {\n                                handleCardSelectForExchange(originalIndex);\n                              }\n                            }}\n                            disabled={canPlayCard && !playableCards.includes(originalIndex)}\n                            aria-label={`Play ${card.rank} of ${card.suit}`}\n                          >\n                            <span className={`card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                              {card.rank}\n                            </span>\n                            <span className={`card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                              {getSuitSymbol(card.suit)}\n                            </span>\n                          </button>\n                        );\n                      }) : (\n                        <div className=\"card-count\">{player.hand} cards</div>\n                      )}\n                    </div>\n                  ) : (\n                    // Show card backs for other players\n                    <div className=\"opponent-cards\">\n                      {Array.isArray(player.hand) ? player.hand.map((_, cardIndex) => (\n                        <div key={`${player.id}-card-back-${cardIndex}`} className=\"card card-back\"></div>\n                      )) : (\n                        <div className=\"card-count\">{player.hand} cards</div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Player Status */}\n                <div className=\"player-status-new\">\n                  {player.isReady && <span className=\"ready-badge-new\">Ready</span>}\n                  {player.enteredRound === true && <span className=\"entered-badge-new\">Entered</span>}\n                  {player.enteredRound === false && <span className=\"declined-badge-new\">Declined</span>}\n                  {player.hasExchanged && <span className=\"exchanged-badge-new\">Exchanged</span>}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Game Controls */}\n      <div className=\"game-controls-new\">\n        \n        {gameState.gamePhase === 'waiting' && !updatedCurrentPlayer.isReady && (\n          <button onClick={handleReady} className=\"ready-btn-new\">Ready</button>\n        )}\n\n        {(gameState.gamePhase === 'waiting' ) && updatedCurrentPlayer.isReady && (\n          <button onClick={handleUnready} className=\"unready-btn-new\">Unready</button>\n        )}\n        \n        {updatedCurrentPlayer.isHost && gameState.gamePhase === 'ready' && (\n          <button onClick={handleStartGame} className=\"start-btn-new\">Start Game</button>\n        )}\n        \n        {canMakeDecision && (\n          <div className=\"decision-buttons-new\">\n            <button onClick={handleEnterTurn} className=\"enter-btn-new\">Enter</button>\n            <button onClick={handleSkipTurn} className=\"skip-btn-new\">Skip</button>\n          </div>\n        )}\n\n        {canExchange && (\n          <div className=\"exchange-controls\">\n            <button \n              onClick={handleOpenExchange}\n              className=\"exchange-btn\"\n            >\n              Exchange Cards ({gameState.tree.length} available)\n            </button>\n            <button onClick={handleSkipExchange} className=\"skip-exchange-btn\">\n              Skip Exchange\n            </button>\n          </div>\n        )}\n\n        {canExchangeTrump && (\n          <div className=\"exchange-controls\">\n            <button \n              onClick={handleOpenTrumpExchange}\n              className=\"exchange-btn\"\n            >\n              Exchange Trump Card\n            </button>\n            <button onClick={handleSkipTrumpExchange} className=\"skip-exchange-btn\">\n              Skip Trump Exchange\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Exchange Modal */}\n      {showExchangeModal && (\n        <div className=\"exchange-modal-overlay\">\n          <div className=\"exchange-modal\">\n            <h3>{isTrumpExchange ? 'Exchange Trump Card' : 'Exchange Cards'}</h3>\n            {isTrumpExchange && gameState.trumpCard && (\n              <div className=\"trump-card-display\">\n                <div className=\"card trump-new\">\n                  <span className={`card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {gameState.trumpCard.rank}\n                  </span>\n                  <span className={`card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {getSuitSymbol(gameState.trumpCard.suit)}\n                  </span>\n                </div>\n                <div className=\"trump-label\">Trump Card</div>\n              </div>\n            )}\n            <p>\n              {isTrumpExchange \n                ? `Select one card to exchange with the trump card (${gameState.trumpCard?.rank} of ${gameState.trumpCard?.suit})`\n                : `Select cards to exchange with the tree. You can exchange up to ${gameState.tree.length} cards.`\n              }\n            </p>\n            <div className=\"exchange-cards-preview\">\n              {Array.isArray(updatedCurrentPlayer.hand) && updatedCurrentPlayer.hand.map((card, index) => {\n                const isSelected = selectedCardsForExchange.includes(index);\n                const maxReached = !isTrumpExchange && selectedCardsForExchange.length >= gameState.tree.length && !isSelected;\n                \n                return (\n                  <button\n                    key={`${card.suit}-${card.rank}-${index}`}\n                    className={`card exchange-card ${isSelected ? 'selected' : ''} ${maxReached ? 'disabled' : ''}`}\n                    onClick={() => handleCardSelectForExchange(index)}\n                    disabled={maxReached}\n                    title={maxReached ? `Cannot select more than ${gameState.tree.length} cards` : ''}\n                  >\n                    <span className={`card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                      {card.rank}\n                    </span>\n                    <span className={`card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                      {getSuitSymbol(card.suit)}\n                    </span>\n                  </button>\n                );\n              })}\n            </div>\n            <div className=\"exchange-modal-buttons\">\n              <button \n                onClick={handleExchangeCards}\n                disabled={selectedCardsForExchange.length === 0 || (!isTrumpExchange && selectedCardsForExchange.length > gameState.tree.length)}\n                className=\"confirm-exchange-btn\"\n              >\n                {isTrumpExchange \n                  ? `Exchange ${selectedCardsForExchange.length} Card`\n                  : `Exchange ${selectedCardsForExchange.length} Cards (max ${gameState.tree.length})`\n                }\n              </button>\n              <button onClick={handleSkipExchange} className=\"skip-exchange-btn\">\n                {isTrumpExchange ? 'Skip Trump Exchange' : 'Skip Exchange'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Score Overlay */}\n      {gameState.gamePhase === 'round_finished' && gameState.roundScores.length > 0 && (\n        <div className=\"score-overlay-overlay\">\n          <div className=\"score-overlay\">\n            <h3>Round {gameState.roundScores[gameState.roundScores.length - 1].roundNumber} Results</h3>\n            <div className=\"score-results\">\n              {gameState.roundScores[gameState.roundScores.length - 1].playerScores.map((playerScore, index) => (\n                <div key={playerScore.playerId} className={`score-row ${playerScore.playerId === gameState.roundScores[gameState.roundScores.length - 1].winner ? 'winner' : ''}`}>\n                  <div className=\"player-name\">{playerScore.playerName}</div>\n                  <div className=\"score-details\">\n                    <span className=\"previous-score\">{playerScore.previousScore}</span>\n                    <span className=\"arrow\">→</span>\n                    <span className=\"new-score\">{playerScore.newScore}</span>\n                    <span className=\"houses-built\">({playerScore.housesBuilt} houses)</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"round-winner\">\n              🏆 {gameState.players.find(p => p.id === gameState.roundScores[gameState.roundScores.length - 1].winner)?.name} won the round!\n            </div>\n            <button \n              onClick={handleDismissScoreOverlay} \n              className=\"dismiss-score-btn\"\n              disabled={!socket}\n            >\n              {!socket ? 'Reconnecting...' : 'Continue to Next Round'}\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Chat Toggle */}\n      <button \n        onClick={() => setShowChat(!showChat)} \n        className=\"chat-toggle-btn\"\n      >\n        💬\n      </button>\n\n      {/* Chat Panel */}\n      {showChat && (\n        <div className=\"chat-panel\">\n          <div className=\"chat-header\">\n            <h3>Chat</h3>\n            <button onClick={() => setShowChat(false)} className=\"close-chat\">×</button>\n          </div>\n          <div className=\"chat-messages-new\">\n            {gameState.chatMessages.map((message: ChatMessage) => (\n              <div key={message.id} className={`chat-message-new ${message.type}`}>\n                <span className=\"message-sender\">{message.playerName}:</span>\n                <span className=\"message-text\">{message.message}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"chat-input-new\">\n            <input\n              type=\"text\"\n              placeholder=\"Type a message...\"\n              value={chatMessage}\n              onChange={(e) => setChatMessage(e.target.value)}\n              onKeyDown={handleKeyPress}\n              className=\"message-input-new\"\n            />\n            <button onClick={handleSendChat} className=\"send-btn-new\">Send</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}