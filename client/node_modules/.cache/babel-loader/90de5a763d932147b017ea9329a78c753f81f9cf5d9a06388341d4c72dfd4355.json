{"ast":null,"code":"import React,{useState,useEffect}from'react';import GameHeader from'../components/layout/GameHeader';import GameTable from'../components/game/GameTable';import GameControls from'../components/game/GameControls';import ChatPanel from'../components/game/ChatPanel';import ExchangeModal from'../components/game/ExchangeModal';import{useDragAndDrop}from'../hooks/useDragAndDrop';import{useBotMessage}from'../hooks/useBotMessage';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GameRoom=_ref=>{var _gameState$players$ga,_gameState$players$ga2;let{socket,gameState,currentPlayer,onLeaveGame}=_ref;const[chatMessage,setChatMessage]=useState('');const[playableCards,setPlayableCards]=useState([]);const[showChat,setShowChat]=useState(false);const[selectedCardsForExchange,setSelectedCardsForExchange]=useState([]);const[showExchangeModal,setShowExchangeModal]=useState(false);const[isTrumpExchange,setIsTrumpExchange]=useState(false);const[cardOrder,setCardOrder]=useState([]);const{botActionMessage,showBotMessage,clearBotMessage}=useBotMessage();const prevPlayersRef=React.useRef(gameState.players);// Update currentPlayer with latest data from gameState\nconst updatedCurrentPlayer=gameState.players.find(player=>player.id===currentPlayer.id)||currentPlayer;// Use drag and drop hook\nconst{draggedCardIndex,handleDragStart,handleDragOver,handleDrop,handleDropToPlay,handleDragEnd}=useDragAndDrop();// Initialize card order when hand changes\nuseEffect(()=>{if(Array.isArray(updatedCurrentPlayer.hand)){// Filter out indices that no longer exist in the hand\nsetCardOrder(prevOrder=>{const handArray=Array.isArray(updatedCurrentPlayer.hand)?updatedCurrentPlayer.hand:[];const newOrder=prevOrder.filter(index=>index<handArray.length);// Add any new indices that might have been added\nfor(let i=0;i<handArray.length;i++){if(!newOrder.includes(i)){newOrder.push(i);}}return newOrder;});}},[updatedCurrentPlayer.hand]);useEffect(()=>{if(socket&&gameState.gamePhase==='playing'&&isMyTurn){socket.emit('get_playable_cards',{gameId:gameState.id});}},[socket,gameState.gamePhase,gameState.currentPlayerIndex,updatedCurrentPlayer.id]);useEffect(()=>{if(!socket)return;socket.on('playable_cards',data=>{if(data.gameId===gameState.id){setPlayableCards(data.playableCards);}});return()=>{socket.off('playable_cards');};},[socket,gameState.id,currentPlayer.name]);// Track bot decisions and show notifications\nuseEffect(()=>{const currentPlayer=gameState.players[gameState.currentPlayerIndex];if(currentPlayer!==null&&currentPlayer!==void 0&&currentPlayer.isBot){// Clear any existing bot action message when a new bot starts thinking\nclearBotMessage();}},[gameState.currentPlayerIndex,gameState.players,clearBotMessage]);// Track when bots make decisions\nuseEffect(()=>{const prevPlayers=prevPlayersRef.current;const currentPlayers=gameState.players;currentPlayers.forEach((player,index)=>{const prevPlayer=prevPlayers[index];if(player.isBot&&prevPlayer&&prevPlayer.enteredRound===undefined&&player.enteredRound!==undefined){const action=player.enteredRound?'entered':'declined';showBotMessage(\"\".concat(player.name,\" \").concat(action,\" the round\"));}// Track exchange decisions\nif(player.isBot&&prevPlayer&&!prevPlayer.hasExchanged&&player.hasExchanged){const action=gameState.gamePhase==='trump_exchanging'?'exchanged trump card':'exchanged cards';showBotMessage(\"\".concat(player.name,\" \").concat(action));}});prevPlayersRef.current=currentPlayers;},[gameState.players,showBotMessage]);const handleReady=()=>{if(!socket)return;socket.emit('ready_check',{gameId:gameState.id,isReady:true});};const handleUnready=()=>{if(!socket)return;socket.emit('ready_check',{gameId:gameState.id,isReady:false});};const handleStartGame=()=>{if(!socket)return;socket.emit('start_game',{gameId:gameState.id});};const handleEnterTurn=()=>{if(!socket)return;socket.emit('enter_turn',{gameId:gameState.id});};const handleSkipTurn=()=>{if(!socket)return;socket.emit('skip_turn',{gameId:gameState.id});};const handlePlayCard=cardIndex=>{if(!socket)return;socket.emit('play_card',{gameId:gameState.id,cardIndex});};const handleCardSelectForExchange=cardIndex=>{setSelectedCardsForExchange(prev=>{if(prev.includes(cardIndex)){return prev.filter(index=>index!==cardIndex);}if(isTrumpExchange){// For trump exchange, only allow one card selection\nreturn[cardIndex];}// For regular exchange, limit to tree size\nconst maxExchangeable=gameState.tree.length;if(prev.length>=maxExchangeable){// If already at max, don't add more cards\nreturn prev;}return[...prev,cardIndex];});};const handleExchangeCards=()=>{if(!socket||selectedCardsForExchange.length===0)return;if(isTrumpExchange){// For trump exchange, only exchange the first selected card\nsocket.emit('exchange_trump',{gameId:gameState.id,cardIndex:selectedCardsForExchange[0]});}else{// For regular exchange, validate against tree size\nconst maxExchangeable=gameState.tree.length;if(selectedCardsForExchange.length>maxExchangeable){console.warn(\"Cannot exchange \".concat(selectedCardsForExchange.length,\" cards when only \").concat(maxExchangeable,\" are available in tree\"));return;}socket.emit('exchange_cards',{gameId:gameState.id,cardIndices:selectedCardsForExchange});}setSelectedCardsForExchange([]);setShowExchangeModal(false);setIsTrumpExchange(false);};const handleSkipExchange=()=>{if(!socket)return;if(isTrumpExchange){socket.emit('exchange_trump',{gameId:gameState.id,cardIndex:-1});}else{socket.emit('exchange_cards',{gameId:gameState.id,cardIndices:[]});}setShowExchangeModal(false);setIsTrumpExchange(false);};const handleOpenExchange=()=>{setIsTrumpExchange(false);setSelectedCardsForExchange([]);setShowExchangeModal(true);};const handleOpenTrumpExchange=()=>{setIsTrumpExchange(true);setSelectedCardsForExchange([]);setShowExchangeModal(true);};const handleSkipTrumpExchange=()=>{if(!socket)return;socket.emit('exchange_trump',{gameId:gameState.id,cardIndex:-1});};const handleSendChat=()=>{if(!socket||!chatMessage.trim())return;socket.emit('send_chat',{gameId:gameState.id,message:chatMessage.trim()});setChatMessage('');};const handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSendChat();}};const isMyTurn=((_gameState$players$ga=gameState.players[gameState.currentPlayerIndex])===null||_gameState$players$ga===void 0?void 0:_gameState$players$ga.id)===updatedCurrentPlayer.id;const canMakeDecision=gameState.gamePhase==='dealing'&&updatedCurrentPlayer.enteredRound===undefined&&isMyTurn;const canExchange=gameState.gamePhase==='exchanging'&&updatedCurrentPlayer.enteredRound===true&&!updatedCurrentPlayer.hasExchanged&&isMyTurn;const canExchangeTrump=gameState.gamePhase==='trump_exchanging'&&updatedCurrentPlayer.enteredRound===true&&updatedCurrentPlayer.isDealer&&((_gameState$players$ga2=gameState.players[gameState.currentPlayerIndex])===null||_gameState$players$ga2===void 0?void 0:_gameState$players$ga2.id)===updatedCurrentPlayer.id;const canPlayCard=gameState.gamePhase==='playing'&&updatedCurrentPlayer.enteredRound===true&&isMyTurn;return/*#__PURE__*/_jsxs(\"div\",{className:\"game-room-new\",children:[/*#__PURE__*/_jsx(GameHeader,{gameState:gameState,onLeaveGame:onLeaveGame}),/*#__PURE__*/_jsx(GameTable,{gameState:gameState,currentPlayer:updatedCurrentPlayer,canPlayCard:canPlayCard,playableCards:playableCards,selectedCardsForExchange:selectedCardsForExchange,cardOrder:cardOrder,draggedCardIndex:draggedCardIndex,onDragOver:handleDragOver,onDrop:(e,dropIndex)=>handleDrop(e,dropIndex,cardOrder,setCardOrder),onDropToPlay:e=>handleDropToPlay(e,cardOrder,playableCards,handlePlayCard),onDragStart:handleDragStart,onDragEnd:handleDragEnd,onCardSelectForExchange:handleCardSelectForExchange,onPlayCard:handlePlayCard,botActionMessage:botActionMessage}),/*#__PURE__*/_jsx(GameControls,{gameState:gameState,currentPlayer:updatedCurrentPlayer,canMakeDecision:canMakeDecision,canExchange:canExchange,canExchangeTrump:canExchangeTrump,onReady:handleReady,onUnready:handleUnready,onStartGame:handleStartGame,onEnterTurn:handleEnterTurn,onSkipTurn:handleSkipTurn,onOpenExchange:handleOpenExchange,onOpenTrumpExchange:handleOpenTrumpExchange,onSkipExchange:handleSkipExchange,onSkipTrumpExchange:handleSkipTrumpExchange}),/*#__PURE__*/_jsx(ExchangeModal,{showExchangeModal:showExchangeModal,isTrumpExchange:isTrumpExchange,gameState:gameState,currentPlayer:updatedCurrentPlayer,selectedCardsForExchange:selectedCardsForExchange,onCardSelectForExchange:handleCardSelectForExchange,onExchangeCards:handleExchangeCards,onSkipExchange:handleSkipExchange}),/*#__PURE__*/_jsx(ChatPanel,{showChat:showChat,chatMessage:chatMessage,chatMessages:gameState.chatMessages,onToggleChat:()=>setShowChat(!showChat),onSendChat:handleSendChat,onChatMessageChange:setChatMessage,onKeyPress:handleKeyPress})]});};export default GameRoom;","map":{"version":3,"names":["React","useState","useEffect","GameHeader","GameTable","GameControls","ChatPanel","ExchangeModal","useDragAndDrop","useBotMessage","jsx","_jsx","jsxs","_jsxs","GameRoom","_ref","_gameState$players$ga","_gameState$players$ga2","socket","gameState","currentPlayer","onLeaveGame","chatMessage","setChatMessage","playableCards","setPlayableCards","showChat","setShowChat","selectedCardsForExchange","setSelectedCardsForExchange","showExchangeModal","setShowExchangeModal","isTrumpExchange","setIsTrumpExchange","cardOrder","setCardOrder","botActionMessage","showBotMessage","clearBotMessage","prevPlayersRef","useRef","players","updatedCurrentPlayer","find","player","id","draggedCardIndex","handleDragStart","handleDragOver","handleDrop","handleDropToPlay","handleDragEnd","Array","isArray","hand","prevOrder","handArray","newOrder","filter","index","length","i","includes","push","gamePhase","isMyTurn","emit","gameId","currentPlayerIndex","on","data","off","name","isBot","prevPlayers","current","currentPlayers","forEach","prevPlayer","enteredRound","undefined","action","concat","hasExchanged","handleReady","isReady","handleUnready","handleStartGame","handleEnterTurn","handleSkipTurn","handlePlayCard","cardIndex","handleCardSelectForExchange","prev","maxExchangeable","tree","handleExchangeCards","console","warn","cardIndices","handleSkipExchange","handleOpenExchange","handleOpenTrumpExchange","handleSkipTrumpExchange","handleSendChat","trim","message","handleKeyPress","e","key","shiftKey","preventDefault","canMakeDecision","canExchange","canExchangeTrump","isDealer","canPlayCard","className","children","onDragOver","onDrop","dropIndex","onDropToPlay","onDragStart","onDragEnd","onCardSelectForExchange","onPlayCard","onReady","onUnready","onStartGame","onEnterTurn","onSkipTurn","onOpenExchange","onOpenTrumpExchange","onSkipExchange","onSkipTrumpExchange","onExchangeCards","chatMessages","onToggleChat","onSendChat","onChatMessageChange","onKeyPress"],"sources":["/Users/enkhmendeee/muushig/client/src/pages/GameRoom.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Socket } from 'socket.io-client';\nimport { Player, GameState } from '../types/game';\nimport GameHeader from '../components/layout/GameHeader';\nimport GameTable from '../components/game/GameTable';\nimport GameControls from '../components/game/GameControls';\nimport ChatPanel from '../components/game/ChatPanel';\nimport ExchangeModal from '../components/game/ExchangeModal';\nimport { useDragAndDrop } from '../hooks/useDragAndDrop';\nimport { useBotMessage } from '../hooks/useBotMessage';\n\nconst GameRoom: React.FC<{\n  socket: Socket | null;\n  gameState: GameState;\n  currentPlayer: Player;\n  onLeaveGame: () => void;\n}> = ({ socket, gameState, currentPlayer, onLeaveGame }) => {\n  const [chatMessage, setChatMessage] = useState('');\n  const [playableCards, setPlayableCards] = useState<number[]>([]);\n  const [showChat, setShowChat] = useState(false);\n  const [selectedCardsForExchange, setSelectedCardsForExchange] = useState<number[]>([]);\n  const [showExchangeModal, setShowExchangeModal] = useState(false);\n  const [isTrumpExchange, setIsTrumpExchange] = useState(false);\n  const [cardOrder, setCardOrder] = useState<number[]>([]);\n  \n  const { botActionMessage, showBotMessage, clearBotMessage } = useBotMessage();\n\n  const prevPlayersRef = React.useRef(gameState.players);\n  \n  // Update currentPlayer with latest data from gameState\n  const updatedCurrentPlayer = gameState.players.find(player => player.id === currentPlayer.id) || currentPlayer;\n\n  // Use drag and drop hook\n  const {\n    draggedCardIndex,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDropToPlay,\n    handleDragEnd,\n  } = useDragAndDrop();\n\n  // Initialize card order when hand changes\n  useEffect(() => {\n    if (Array.isArray(updatedCurrentPlayer.hand)) {\n      // Filter out indices that no longer exist in the hand\n      setCardOrder(prevOrder => {\n        const handArray = Array.isArray(updatedCurrentPlayer.hand) ? updatedCurrentPlayer.hand : [];\n        const newOrder = prevOrder.filter(index => index < handArray.length);\n        // Add any new indices that might have been added\n        for (let i = 0; i < handArray.length; i++) {\n          if (!newOrder.includes(i)) {\n            newOrder.push(i);\n          }\n        }\n        return newOrder;\n      });\n    }\n  }, [updatedCurrentPlayer.hand]);\n\n  useEffect(() => {\n    if (socket && gameState.gamePhase === 'playing' && isMyTurn) {\n      socket.emit('get_playable_cards', { gameId: gameState.id });\n    }\n  }, [socket, gameState.gamePhase, gameState.currentPlayerIndex, updatedCurrentPlayer.id]);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('playable_cards', (data: { gameId: string; playableCards: number[] }) => {\n      if (data.gameId === gameState.id) {\n        setPlayableCards(data.playableCards);\n      }\n    });\n\n    return () => {\n      socket.off('playable_cards');\n    };\n  }, [socket, gameState.id, currentPlayer.name]);\n\n  // Track bot decisions and show notifications\n  useEffect(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (currentPlayer?.isBot) {\n      // Clear any existing bot action message when a new bot starts thinking\n      clearBotMessage();\n    }\n  }, [gameState.currentPlayerIndex, gameState.players, clearBotMessage]);\n\n  // Track when bots make decisions\n  useEffect(() => {\n    const prevPlayers = prevPlayersRef.current;\n    const currentPlayers = gameState.players;\n    \n    currentPlayers.forEach((player, index) => {\n      const prevPlayer = prevPlayers[index];\n      if (player.isBot && \n          prevPlayer && \n          prevPlayer.enteredRound === undefined && \n          player.enteredRound !== undefined) {\n        const action = player.enteredRound ? 'entered' : 'declined';\n        showBotMessage(`${player.name} ${action} the round`);\n      }\n      \n      // Track exchange decisions\n      if (player.isBot && \n          prevPlayer && \n          !prevPlayer.hasExchanged && \n          player.hasExchanged) {\n        const action = gameState.gamePhase === 'trump_exchanging' ? 'exchanged trump card' : 'exchanged cards';\n        showBotMessage(`${player.name} ${action}`);\n      }\n    });\n    \n    prevPlayersRef.current = currentPlayers;\n  }, [gameState.players, showBotMessage]);\n\n  const handleReady = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: true });\n  };\n\n  const handleUnready = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: false });\n  };\n\n  const handleStartGame = () => {\n    if (!socket) return;\n    socket.emit('start_game', { gameId: gameState.id });\n  };\n\n  const handleEnterTurn = () => {\n    if (!socket) return;\n    socket.emit('enter_turn', { gameId: gameState.id });\n  };\n\n  const handleSkipTurn = () => {\n    if (!socket) return;\n    socket.emit('skip_turn', { gameId: gameState.id });\n  };\n\n  const handlePlayCard = (cardIndex: number) => {\n    if (!socket) return;\n    socket.emit('play_card', { gameId: gameState.id, cardIndex });\n  };\n\n  const handleCardSelectForExchange = (cardIndex: number) => {\n    setSelectedCardsForExchange(prev => {\n      if (prev.includes(cardIndex)) {\n        return prev.filter(index => index !== cardIndex);\n      }\n      \n      if (isTrumpExchange) {\n        // For trump exchange, only allow one card selection\n        return [cardIndex];\n      }\n      \n      // For regular exchange, limit to tree size\n      const maxExchangeable = gameState.tree.length;\n      if (prev.length >= maxExchangeable) {\n        // If already at max, don't add more cards\n        return prev;\n      }\n      \n      return [...prev, cardIndex];\n    });\n  };\n\n  const handleExchangeCards = () => {\n    if (!socket || selectedCardsForExchange.length === 0) return;\n    \n    if (isTrumpExchange) {\n      // For trump exchange, only exchange the first selected card\n      socket.emit('exchange_trump', { \n        gameId: gameState.id, \n        cardIndex: selectedCardsForExchange[0] \n      });\n    } else {\n      // For regular exchange, validate against tree size\n      const maxExchangeable = gameState.tree.length;\n      if (selectedCardsForExchange.length > maxExchangeable) {\n        console.warn(`Cannot exchange ${selectedCardsForExchange.length} cards when only ${maxExchangeable} are available in tree`);\n        return;\n      }\n      \n      socket.emit('exchange_cards', { \n        gameId: gameState.id, \n        cardIndices: selectedCardsForExchange \n      });\n    }\n    \n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleSkipExchange = () => {\n    if (!socket) return;\n    \n    if (isTrumpExchange) {\n      socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n    } else {\n      socket.emit('exchange_cards', { gameId: gameState.id, cardIndices: [] });\n    }\n    \n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleOpenExchange = () => {\n    setIsTrumpExchange(false);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleOpenTrumpExchange = () => {\n    setIsTrumpExchange(true);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleSkipTrumpExchange = () => {\n    if (!socket) return;\n    socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n  };\n\n  const handleSendChat = () => {\n    if (!socket || !chatMessage.trim()) return;\n    socket.emit('send_chat', { gameId: gameState.id, message: chatMessage.trim() });\n    setChatMessage('');\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendChat();\n    }\n  };\n\n  const isMyTurn = gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canMakeDecision = gameState.gamePhase === 'dealing' && updatedCurrentPlayer.enteredRound === undefined && isMyTurn;\n  const canExchange = gameState.gamePhase === 'exchanging' && updatedCurrentPlayer.enteredRound === true && !updatedCurrentPlayer.hasExchanged && isMyTurn;\n  const canExchangeTrump = gameState.gamePhase === 'trump_exchanging' && updatedCurrentPlayer.enteredRound === true && updatedCurrentPlayer.isDealer && gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canPlayCard = gameState.gamePhase === 'playing' && updatedCurrentPlayer.enteredRound === true && isMyTurn;\n\n  return (\n    <div className=\"game-room-new\">\n      <GameHeader gameState={gameState} onLeaveGame={onLeaveGame} />\n      \n      <GameTable\n        gameState={gameState}\n        currentPlayer={updatedCurrentPlayer}\n        canPlayCard={canPlayCard}\n        playableCards={playableCards}\n        selectedCardsForExchange={selectedCardsForExchange}\n        cardOrder={cardOrder}\n        draggedCardIndex={draggedCardIndex}\n        onDragOver={handleDragOver}\n        onDrop={(e, dropIndex) => handleDrop(e, dropIndex, cardOrder, setCardOrder)}\n        onDropToPlay={(e) => handleDropToPlay(e, cardOrder, playableCards, handlePlayCard)}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onCardSelectForExchange={handleCardSelectForExchange}\n        onPlayCard={handlePlayCard}\n        botActionMessage={botActionMessage}\n      />\n\n      <GameControls\n        gameState={gameState}\n        currentPlayer={updatedCurrentPlayer}\n        canMakeDecision={canMakeDecision}\n        canExchange={canExchange}\n        canExchangeTrump={canExchangeTrump}\n        onReady={handleReady}\n        onUnready={handleUnready}\n        onStartGame={handleStartGame}\n        onEnterTurn={handleEnterTurn}\n        onSkipTurn={handleSkipTurn}\n        onOpenExchange={handleOpenExchange}\n        onOpenTrumpExchange={handleOpenTrumpExchange}\n        onSkipExchange={handleSkipExchange}\n        onSkipTrumpExchange={handleSkipTrumpExchange}\n      />\n\n      <ExchangeModal\n        showExchangeModal={showExchangeModal}\n        isTrumpExchange={isTrumpExchange}\n        gameState={gameState}\n        currentPlayer={updatedCurrentPlayer}\n        selectedCardsForExchange={selectedCardsForExchange}\n        onCardSelectForExchange={handleCardSelectForExchange}\n        onExchangeCards={handleExchangeCards}\n        onSkipExchange={handleSkipExchange}\n      />\n\n      <ChatPanel\n        showChat={showChat}\n        chatMessage={chatMessage}\n        chatMessages={gameState.chatMessages}\n        onToggleChat={() => setShowChat(!showChat)}\n        onSendChat={handleSendChat}\n        onChatMessageChange={setChatMessage}\n        onKeyPress={handleKeyPress}\n      />\n    </div>\n  );\n};\n\nexport default GameRoom;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAGlD,MAAO,CAAAC,UAAU,KAAM,iCAAiC,CACxD,MAAO,CAAAC,SAAS,KAAM,8BAA8B,CACpD,MAAO,CAAAC,YAAY,KAAM,iCAAiC,CAC1D,MAAO,CAAAC,SAAS,KAAM,8BAA8B,CACpD,MAAO,CAAAC,aAAa,KAAM,kCAAkC,CAC5D,OAASC,cAAc,KAAQ,yBAAyB,CACxD,OAASC,aAAa,KAAQ,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvD,KAAM,CAAAC,QAKJ,CAAGC,IAAA,EAAuD,KAAAC,qBAAA,CAAAC,sBAAA,IAAtD,CAAEC,MAAM,CAAEC,SAAS,CAAEC,aAAa,CAAEC,WAAY,CAAC,CAAAN,IAAA,CACrD,KAAM,CAACO,WAAW,CAAEC,cAAc,CAAC,CAAGtB,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACuB,aAAa,CAAEC,gBAAgB,CAAC,CAAGxB,QAAQ,CAAW,EAAE,CAAC,CAChE,KAAM,CAACyB,QAAQ,CAAEC,WAAW,CAAC,CAAG1B,QAAQ,CAAC,KAAK,CAAC,CAC/C,KAAM,CAAC2B,wBAAwB,CAAEC,2BAA2B,CAAC,CAAG5B,QAAQ,CAAW,EAAE,CAAC,CACtF,KAAM,CAAC6B,iBAAiB,CAAEC,oBAAoB,CAAC,CAAG9B,QAAQ,CAAC,KAAK,CAAC,CACjE,KAAM,CAAC+B,eAAe,CAAEC,kBAAkB,CAAC,CAAGhC,QAAQ,CAAC,KAAK,CAAC,CAC7D,KAAM,CAACiC,SAAS,CAAEC,YAAY,CAAC,CAAGlC,QAAQ,CAAW,EAAE,CAAC,CAExD,KAAM,CAAEmC,gBAAgB,CAAEC,cAAc,CAAEC,eAAgB,CAAC,CAAG7B,aAAa,CAAC,CAAC,CAE7E,KAAM,CAAA8B,cAAc,CAAGvC,KAAK,CAACwC,MAAM,CAACrB,SAAS,CAACsB,OAAO,CAAC,CAEtD;AACA,KAAM,CAAAC,oBAAoB,CAAGvB,SAAS,CAACsB,OAAO,CAACE,IAAI,CAACC,MAAM,EAAIA,MAAM,CAACC,EAAE,GAAKzB,aAAa,CAACyB,EAAE,CAAC,EAAIzB,aAAa,CAE9G;AACA,KAAM,CACJ0B,gBAAgB,CAChBC,eAAe,CACfC,cAAc,CACdC,UAAU,CACVC,gBAAgB,CAChBC,aACF,CAAC,CAAG3C,cAAc,CAAC,CAAC,CAEpB;AACAN,SAAS,CAAC,IAAM,CACd,GAAIkD,KAAK,CAACC,OAAO,CAACX,oBAAoB,CAACY,IAAI,CAAC,CAAE,CAC5C;AACAnB,YAAY,CAACoB,SAAS,EAAI,CACxB,KAAM,CAAAC,SAAS,CAAGJ,KAAK,CAACC,OAAO,CAACX,oBAAoB,CAACY,IAAI,CAAC,CAAGZ,oBAAoB,CAACY,IAAI,CAAG,EAAE,CAC3F,KAAM,CAAAG,QAAQ,CAAGF,SAAS,CAACG,MAAM,CAACC,KAAK,EAAIA,KAAK,CAAGH,SAAS,CAACI,MAAM,CAAC,CACpE;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGL,SAAS,CAACI,MAAM,CAAEC,CAAC,EAAE,CAAE,CACzC,GAAI,CAACJ,QAAQ,CAACK,QAAQ,CAACD,CAAC,CAAC,CAAE,CACzBJ,QAAQ,CAACM,IAAI,CAACF,CAAC,CAAC,CAClB,CACF,CACA,MAAO,CAAAJ,QAAQ,CACjB,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAACf,oBAAoB,CAACY,IAAI,CAAC,CAAC,CAE/BpD,SAAS,CAAC,IAAM,CACd,GAAIgB,MAAM,EAAIC,SAAS,CAAC6C,SAAS,GAAK,SAAS,EAAIC,QAAQ,CAAE,CAC3D/C,MAAM,CAACgD,IAAI,CAAC,oBAAoB,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAG,CAAC,CAAC,CAC7D,CACF,CAAC,CAAE,CAAC3B,MAAM,CAAEC,SAAS,CAAC6C,SAAS,CAAE7C,SAAS,CAACiD,kBAAkB,CAAE1B,oBAAoB,CAACG,EAAE,CAAC,CAAC,CAExF3C,SAAS,CAAC,IAAM,CACd,GAAI,CAACgB,MAAM,CAAE,OAEbA,MAAM,CAACmD,EAAE,CAAC,gBAAgB,CAAGC,IAAiD,EAAK,CACjF,GAAIA,IAAI,CAACH,MAAM,GAAKhD,SAAS,CAAC0B,EAAE,CAAE,CAChCpB,gBAAgB,CAAC6C,IAAI,CAAC9C,aAAa,CAAC,CACtC,CACF,CAAC,CAAC,CAEF,MAAO,IAAM,CACXN,MAAM,CAACqD,GAAG,CAAC,gBAAgB,CAAC,CAC9B,CAAC,CACH,CAAC,CAAE,CAACrD,MAAM,CAAEC,SAAS,CAAC0B,EAAE,CAAEzB,aAAa,CAACoD,IAAI,CAAC,CAAC,CAE9C;AACAtE,SAAS,CAAC,IAAM,CACd,KAAM,CAAAkB,aAAa,CAAGD,SAAS,CAACsB,OAAO,CAACtB,SAAS,CAACiD,kBAAkB,CAAC,CACrE,GAAIhD,aAAa,SAAbA,aAAa,WAAbA,aAAa,CAAEqD,KAAK,CAAE,CACxB;AACAnC,eAAe,CAAC,CAAC,CACnB,CACF,CAAC,CAAE,CAACnB,SAAS,CAACiD,kBAAkB,CAAEjD,SAAS,CAACsB,OAAO,CAAEH,eAAe,CAAC,CAAC,CAEtE;AACApC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAwE,WAAW,CAAGnC,cAAc,CAACoC,OAAO,CAC1C,KAAM,CAAAC,cAAc,CAAGzD,SAAS,CAACsB,OAAO,CAExCmC,cAAc,CAACC,OAAO,CAAC,CAACjC,MAAM,CAAEe,KAAK,GAAK,CACxC,KAAM,CAAAmB,UAAU,CAAGJ,WAAW,CAACf,KAAK,CAAC,CACrC,GAAIf,MAAM,CAAC6B,KAAK,EACZK,UAAU,EACVA,UAAU,CAACC,YAAY,GAAKC,SAAS,EACrCpC,MAAM,CAACmC,YAAY,GAAKC,SAAS,CAAE,CACrC,KAAM,CAAAC,MAAM,CAAGrC,MAAM,CAACmC,YAAY,CAAG,SAAS,CAAG,UAAU,CAC3D1C,cAAc,IAAA6C,MAAA,CAAItC,MAAM,CAAC4B,IAAI,MAAAU,MAAA,CAAID,MAAM,cAAY,CAAC,CACtD,CAEA;AACA,GAAIrC,MAAM,CAAC6B,KAAK,EACZK,UAAU,EACV,CAACA,UAAU,CAACK,YAAY,EACxBvC,MAAM,CAACuC,YAAY,CAAE,CACvB,KAAM,CAAAF,MAAM,CAAG9D,SAAS,CAAC6C,SAAS,GAAK,kBAAkB,CAAG,sBAAsB,CAAG,iBAAiB,CACtG3B,cAAc,IAAA6C,MAAA,CAAItC,MAAM,CAAC4B,IAAI,MAAAU,MAAA,CAAID,MAAM,CAAE,CAAC,CAC5C,CACF,CAAC,CAAC,CAEF1C,cAAc,CAACoC,OAAO,CAAGC,cAAc,CACzC,CAAC,CAAE,CAACzD,SAAS,CAACsB,OAAO,CAAEJ,cAAc,CAAC,CAAC,CAEvC,KAAM,CAAA+C,WAAW,CAAGA,CAAA,GAAM,CACxB,GAAI,CAAClE,MAAM,CAAE,OACbA,MAAM,CAACgD,IAAI,CAAC,aAAa,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAE,CAAEwC,OAAO,CAAE,IAAK,CAAC,CAAC,CACrE,CAAC,CAED,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,GAAI,CAACpE,MAAM,CAAE,OACbA,MAAM,CAACgD,IAAI,CAAC,aAAa,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAE,CAAEwC,OAAO,CAAE,KAAM,CAAC,CAAC,CACtE,CAAC,CAED,KAAM,CAAAE,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAI,CAACrE,MAAM,CAAE,OACbA,MAAM,CAACgD,IAAI,CAAC,YAAY,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAG,CAAC,CAAC,CACrD,CAAC,CAED,KAAM,CAAA2C,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAI,CAACtE,MAAM,CAAE,OACbA,MAAM,CAACgD,IAAI,CAAC,YAAY,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAG,CAAC,CAAC,CACrD,CAAC,CAED,KAAM,CAAA4C,cAAc,CAAGA,CAAA,GAAM,CAC3B,GAAI,CAACvE,MAAM,CAAE,OACbA,MAAM,CAACgD,IAAI,CAAC,WAAW,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAG,CAAC,CAAC,CACpD,CAAC,CAED,KAAM,CAAA6C,cAAc,CAAIC,SAAiB,EAAK,CAC5C,GAAI,CAACzE,MAAM,CAAE,OACbA,MAAM,CAACgD,IAAI,CAAC,WAAW,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAE,CAAE8C,SAAU,CAAC,CAAC,CAC/D,CAAC,CAED,KAAM,CAAAC,2BAA2B,CAAID,SAAiB,EAAK,CACzD9D,2BAA2B,CAACgE,IAAI,EAAI,CAClC,GAAIA,IAAI,CAAC/B,QAAQ,CAAC6B,SAAS,CAAC,CAAE,CAC5B,MAAO,CAAAE,IAAI,CAACnC,MAAM,CAACC,KAAK,EAAIA,KAAK,GAAKgC,SAAS,CAAC,CAClD,CAEA,GAAI3D,eAAe,CAAE,CACnB;AACA,MAAO,CAAC2D,SAAS,CAAC,CACpB,CAEA;AACA,KAAM,CAAAG,eAAe,CAAG3E,SAAS,CAAC4E,IAAI,CAACnC,MAAM,CAC7C,GAAIiC,IAAI,CAACjC,MAAM,EAAIkC,eAAe,CAAE,CAClC;AACA,MAAO,CAAAD,IAAI,CACb,CAEA,MAAO,CAAC,GAAGA,IAAI,CAAEF,SAAS,CAAC,CAC7B,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAK,mBAAmB,CAAGA,CAAA,GAAM,CAChC,GAAI,CAAC9E,MAAM,EAAIU,wBAAwB,CAACgC,MAAM,GAAK,CAAC,CAAE,OAEtD,GAAI5B,eAAe,CAAE,CACnB;AACAd,MAAM,CAACgD,IAAI,CAAC,gBAAgB,CAAE,CAC5BC,MAAM,CAAEhD,SAAS,CAAC0B,EAAE,CACpB8C,SAAS,CAAE/D,wBAAwB,CAAC,CAAC,CACvC,CAAC,CAAC,CACJ,CAAC,IAAM,CACL;AACA,KAAM,CAAAkE,eAAe,CAAG3E,SAAS,CAAC4E,IAAI,CAACnC,MAAM,CAC7C,GAAIhC,wBAAwB,CAACgC,MAAM,CAAGkC,eAAe,CAAE,CACrDG,OAAO,CAACC,IAAI,oBAAAhB,MAAA,CAAoBtD,wBAAwB,CAACgC,MAAM,sBAAAsB,MAAA,CAAoBY,eAAe,0BAAwB,CAAC,CAC3H,OACF,CAEA5E,MAAM,CAACgD,IAAI,CAAC,gBAAgB,CAAE,CAC5BC,MAAM,CAAEhD,SAAS,CAAC0B,EAAE,CACpBsD,WAAW,CAAEvE,wBACf,CAAC,CAAC,CACJ,CAEAC,2BAA2B,CAAC,EAAE,CAAC,CAC/BE,oBAAoB,CAAC,KAAK,CAAC,CAC3BE,kBAAkB,CAAC,KAAK,CAAC,CAC3B,CAAC,CAED,KAAM,CAAAmE,kBAAkB,CAAGA,CAAA,GAAM,CAC/B,GAAI,CAAClF,MAAM,CAAE,OAEb,GAAIc,eAAe,CAAE,CACnBd,MAAM,CAACgD,IAAI,CAAC,gBAAgB,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAE,CAAE8C,SAAS,CAAE,CAAC,CAAE,CAAC,CAAC,CACxE,CAAC,IAAM,CACLzE,MAAM,CAACgD,IAAI,CAAC,gBAAgB,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAE,CAAEsD,WAAW,CAAE,EAAG,CAAC,CAAC,CAC1E,CAEApE,oBAAoB,CAAC,KAAK,CAAC,CAC3BE,kBAAkB,CAAC,KAAK,CAAC,CAC3B,CAAC,CAED,KAAM,CAAAoE,kBAAkB,CAAGA,CAAA,GAAM,CAC/BpE,kBAAkB,CAAC,KAAK,CAAC,CACzBJ,2BAA2B,CAAC,EAAE,CAAC,CAC/BE,oBAAoB,CAAC,IAAI,CAAC,CAC5B,CAAC,CAED,KAAM,CAAAuE,uBAAuB,CAAGA,CAAA,GAAM,CACpCrE,kBAAkB,CAAC,IAAI,CAAC,CACxBJ,2BAA2B,CAAC,EAAE,CAAC,CAC/BE,oBAAoB,CAAC,IAAI,CAAC,CAC5B,CAAC,CAED,KAAM,CAAAwE,uBAAuB,CAAGA,CAAA,GAAM,CACpC,GAAI,CAACrF,MAAM,CAAE,OACbA,MAAM,CAACgD,IAAI,CAAC,gBAAgB,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAE,CAAE8C,SAAS,CAAE,CAAC,CAAE,CAAC,CAAC,CACxE,CAAC,CAED,KAAM,CAAAa,cAAc,CAAGA,CAAA,GAAM,CAC3B,GAAI,CAACtF,MAAM,EAAI,CAACI,WAAW,CAACmF,IAAI,CAAC,CAAC,CAAE,OACpCvF,MAAM,CAACgD,IAAI,CAAC,WAAW,CAAE,CAAEC,MAAM,CAAEhD,SAAS,CAAC0B,EAAE,CAAE6D,OAAO,CAAEpF,WAAW,CAACmF,IAAI,CAAC,CAAE,CAAC,CAAC,CAC/ElF,cAAc,CAAC,EAAE,CAAC,CACpB,CAAC,CAED,KAAM,CAAAoF,cAAc,CAAIC,CAAsB,EAAK,CACjD,GAAIA,CAAC,CAACC,GAAG,GAAK,OAAO,EAAI,CAACD,CAAC,CAACE,QAAQ,CAAE,CACpCF,CAAC,CAACG,cAAc,CAAC,CAAC,CAClBP,cAAc,CAAC,CAAC,CAClB,CACF,CAAC,CAED,KAAM,CAAAvC,QAAQ,CAAG,EAAAjD,qBAAA,CAAAG,SAAS,CAACsB,OAAO,CAACtB,SAAS,CAACiD,kBAAkB,CAAC,UAAApD,qBAAA,iBAA/CA,qBAAA,CAAiD6B,EAAE,IAAKH,oBAAoB,CAACG,EAAE,CAChG,KAAM,CAAAmE,eAAe,CAAG7F,SAAS,CAAC6C,SAAS,GAAK,SAAS,EAAItB,oBAAoB,CAACqC,YAAY,GAAKC,SAAS,EAAIf,QAAQ,CACxH,KAAM,CAAAgD,WAAW,CAAG9F,SAAS,CAAC6C,SAAS,GAAK,YAAY,EAAItB,oBAAoB,CAACqC,YAAY,GAAK,IAAI,EAAI,CAACrC,oBAAoB,CAACyC,YAAY,EAAIlB,QAAQ,CACxJ,KAAM,CAAAiD,gBAAgB,CAAG/F,SAAS,CAAC6C,SAAS,GAAK,kBAAkB,EAAItB,oBAAoB,CAACqC,YAAY,GAAK,IAAI,EAAIrC,oBAAoB,CAACyE,QAAQ,EAAI,EAAAlG,sBAAA,CAAAE,SAAS,CAACsB,OAAO,CAACtB,SAAS,CAACiD,kBAAkB,CAAC,UAAAnD,sBAAA,iBAA/CA,sBAAA,CAAiD4B,EAAE,IAAKH,oBAAoB,CAACG,EAAE,CACrO,KAAM,CAAAuE,WAAW,CAAGjG,SAAS,CAAC6C,SAAS,GAAK,SAAS,EAAItB,oBAAoB,CAACqC,YAAY,GAAK,IAAI,EAAId,QAAQ,CAE/G,mBACEpD,KAAA,QAAKwG,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5B3G,IAAA,CAACR,UAAU,EAACgB,SAAS,CAAEA,SAAU,CAACE,WAAW,CAAEA,WAAY,CAAE,CAAC,cAE9DV,IAAA,CAACP,SAAS,EACRe,SAAS,CAAEA,SAAU,CACrBC,aAAa,CAAEsB,oBAAqB,CACpC0E,WAAW,CAAEA,WAAY,CACzB5F,aAAa,CAAEA,aAAc,CAC7BI,wBAAwB,CAAEA,wBAAyB,CACnDM,SAAS,CAAEA,SAAU,CACrBY,gBAAgB,CAAEA,gBAAiB,CACnCyE,UAAU,CAAEvE,cAAe,CAC3BwE,MAAM,CAAEA,CAACZ,CAAC,CAAEa,SAAS,GAAKxE,UAAU,CAAC2D,CAAC,CAAEa,SAAS,CAAEvF,SAAS,CAAEC,YAAY,CAAE,CAC5EuF,YAAY,CAAGd,CAAC,EAAK1D,gBAAgB,CAAC0D,CAAC,CAAE1E,SAAS,CAAEV,aAAa,CAAEkE,cAAc,CAAE,CACnFiC,WAAW,CAAE5E,eAAgB,CAC7B6E,SAAS,CAAEzE,aAAc,CACzB0E,uBAAuB,CAAEjC,2BAA4B,CACrDkC,UAAU,CAAEpC,cAAe,CAC3BtD,gBAAgB,CAAEA,gBAAiB,CACpC,CAAC,cAEFzB,IAAA,CAACN,YAAY,EACXc,SAAS,CAAEA,SAAU,CACrBC,aAAa,CAAEsB,oBAAqB,CACpCsE,eAAe,CAAEA,eAAgB,CACjCC,WAAW,CAAEA,WAAY,CACzBC,gBAAgB,CAAEA,gBAAiB,CACnCa,OAAO,CAAE3C,WAAY,CACrB4C,SAAS,CAAE1C,aAAc,CACzB2C,WAAW,CAAE1C,eAAgB,CAC7B2C,WAAW,CAAE1C,eAAgB,CAC7B2C,UAAU,CAAE1C,cAAe,CAC3B2C,cAAc,CAAE/B,kBAAmB,CACnCgC,mBAAmB,CAAE/B,uBAAwB,CAC7CgC,cAAc,CAAElC,kBAAmB,CACnCmC,mBAAmB,CAAEhC,uBAAwB,CAC9C,CAAC,cAEF5F,IAAA,CAACJ,aAAa,EACZuB,iBAAiB,CAAEA,iBAAkB,CACrCE,eAAe,CAAEA,eAAgB,CACjCb,SAAS,CAAEA,SAAU,CACrBC,aAAa,CAAEsB,oBAAqB,CACpCd,wBAAwB,CAAEA,wBAAyB,CACnDiG,uBAAuB,CAAEjC,2BAA4B,CACrD4C,eAAe,CAAExC,mBAAoB,CACrCsC,cAAc,CAAElC,kBAAmB,CACpC,CAAC,cAEFzF,IAAA,CAACL,SAAS,EACRoB,QAAQ,CAAEA,QAAS,CACnBJ,WAAW,CAAEA,WAAY,CACzBmH,YAAY,CAAEtH,SAAS,CAACsH,YAAa,CACrCC,YAAY,CAAEA,CAAA,GAAM/G,WAAW,CAAC,CAACD,QAAQ,CAAE,CAC3CiH,UAAU,CAAEnC,cAAe,CAC3BoC,mBAAmB,CAAErH,cAAe,CACpCsH,UAAU,CAAElC,cAAe,CAC5B,CAAC,EACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAA7F,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}