{"ast":null,"code":"var _jsxFileName = \"/Users/enkhmendeee/muushig/client/src/pages/GameRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getSuitSymbol } from '../utils/gameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameRoom = ({\n  socket,\n  gameState,\n  currentPlayer,\n  onLeaveGame\n}) => {\n  _s();\n  var _gameState$players$ga, _gameState$players$ga2, _gameState$players$ga3, _gameState$players$ga4, _gameState$players$ga5, _gameState$players$ga6, _gameState$players$ga7, _gameState$players$ga8, _gameState$players$ga9, _gameState$players$ga0, _gameState$players$ga1, _gameState$players$ga10, _gameState$players$ga11, _gameState$players$ga12, _gameState$trumpCard, _gameState$trumpCard2, _gameState$players$fi;\n  const [chatMessage, setChatMessage] = useState('');\n  const [playableCards, setPlayableCards] = useState([]);\n  const [showChat, setShowChat] = useState(false);\n  const [selectedCardsForExchange, setSelectedCardsForExchange] = useState([]);\n  const [showExchangeModal, setShowExchangeModal] = useState(false);\n  const [isTrumpExchange, setIsTrumpExchange] = useState(false);\n  const [botActionMessage, setBotActionMessage] = useState('');\n  const [cardOrder, setCardOrder] = useState([]);\n  const [draggedCardIndex, setDraggedCardIndex] = useState(null);\n  const [isDraggingToPlay, setIsDraggingToPlay] = useState(false);\n  const actualPlayerIndex = gameState.players.findIndex(player => player.id === currentPlayer.id);\n  const prevPlayersRef = React.useRef(gameState.players);\n\n  // Update currentPlayer with latest data from gameState\n  const updatedCurrentPlayer = gameState.players.find(player => player.id === currentPlayer.id) || currentPlayer;\n\n  // Initialize card order when hand changes\n  useEffect(() => {\n    if (Array.isArray(updatedCurrentPlayer.hand)) {\n      // Filter out indices that no longer exist in the hand\n      setCardOrder(prevOrder => {\n        const handArray = updatedCurrentPlayer.hand;\n        const newOrder = prevOrder.filter(index => index < handArray.length);\n        // Add any new indices that might have been added\n        for (let i = 0; i < handArray.length; i++) {\n          if (!newOrder.includes(i)) {\n            newOrder.push(i);\n          }\n        }\n        return newOrder;\n      });\n    }\n  }, [updatedCurrentPlayer.hand]);\n  useEffect(() => {\n    if (socket && gameState.gamePhase === 'playing' && isMyTurn) {\n      socket.emit('get_playable_cards', {\n        gameId: gameState.id\n      });\n    }\n  }, [socket, gameState.gamePhase, gameState.currentPlayerIndex, updatedCurrentPlayer.id]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('playable_cards', data => {\n      if (data.gameId === gameState.id) {\n        setPlayableCards(data.playableCards);\n      }\n    });\n    return () => {\n      socket.off('playable_cards');\n    };\n  }, [socket, gameState.id, currentPlayer.name]);\n\n  // Track bot decisions and show notifications\n  useEffect(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (currentPlayer !== null && currentPlayer !== void 0 && currentPlayer.isBot) {\n      // Clear any existing bot action message when a new bot starts thinking\n      setBotActionMessage('');\n    }\n  }, [gameState.currentPlayerIndex, gameState.players]);\n\n  // Track when bots make decisions\n  useEffect(() => {\n    const prevPlayers = prevPlayersRef.current;\n    const currentPlayers = gameState.players;\n    currentPlayers.forEach((player, index) => {\n      const prevPlayer = prevPlayers[index];\n      if (player.isBot && prevPlayer && prevPlayer.enteredRound === undefined && player.enteredRound !== undefined) {\n        const action = player.enteredRound ? 'entered' : 'declined';\n        setBotActionMessage(`${player.name} ${action} the round`);\n\n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n\n      // Track exchange decisions\n      if (player.isBot && prevPlayer && !prevPlayer.hasExchanged && player.hasExchanged) {\n        const action = gameState.gamePhase === 'trump_exchanging' ? 'exchanged trump card' : 'exchanged cards';\n        setBotActionMessage(`${player.name} ${action}`);\n\n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n    });\n    prevPlayersRef.current = currentPlayers;\n  }, [gameState.players]);\n  const handleReady = () => {\n    if (!socket) return;\n    socket.emit('ready_check', {\n      gameId: gameState.id,\n      isReady: true\n    });\n  };\n  const handleUnready = () => {\n    if (!socket) return;\n    socket.emit('ready_check', {\n      gameId: gameState.id,\n      isReady: false\n    });\n  };\n  const handleStartGame = () => {\n    if (!socket) return;\n    socket.emit('start_game', {\n      gameId: gameState.id\n    });\n  };\n  const handleEnterTurn = () => {\n    if (!socket) return;\n    socket.emit('enter_turn', {\n      gameId: gameState.id\n    });\n  };\n  const handleSkipTurn = () => {\n    if (!socket) return;\n    socket.emit('skip_turn', {\n      gameId: gameState.id\n    });\n  };\n  const handlePlayCard = cardIndex => {\n    if (!socket) return;\n    socket.emit('play_card', {\n      gameId: gameState.id,\n      cardIndex\n    });\n  };\n  const handleCardSelectForExchange = cardIndex => {\n    setSelectedCardsForExchange(prev => {\n      if (prev.includes(cardIndex)) {\n        return prev.filter(index => index !== cardIndex);\n      } else {\n        if (isTrumpExchange) {\n          // For trump exchange, only allow one card selection\n          return [cardIndex];\n        } else {\n          // For regular exchange, limit to tree size\n          const maxExchangeable = gameState.tree.length;\n          if (prev.length >= maxExchangeable) {\n            // If already at max, don't add more cards\n            return prev;\n          } else {\n            return [...prev, cardIndex];\n          }\n        }\n      }\n    });\n  };\n  const handleExchangeCards = () => {\n    if (!socket || selectedCardsForExchange.length === 0) return;\n    if (isTrumpExchange) {\n      // For trump exchange, only exchange the first selected card\n      socket.emit('exchange_trump', {\n        gameId: gameState.id,\n        cardIndex: selectedCardsForExchange[0]\n      });\n    } else {\n      // For regular exchange, validate against tree size\n      const maxExchangeable = gameState.tree.length;\n      if (selectedCardsForExchange.length > maxExchangeable) {\n        console.warn(`Cannot exchange ${selectedCardsForExchange.length} cards when only ${maxExchangeable} are available in tree`);\n        return;\n      }\n      socket.emit('exchange_cards', {\n        gameId: gameState.id,\n        cardIndices: selectedCardsForExchange\n      });\n    }\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n  const handleSkipExchange = () => {\n    if (!socket) return;\n    if (isTrumpExchange) {\n      socket.emit('exchange_trump', {\n        gameId: gameState.id,\n        cardIndex: -1\n      });\n    } else {\n      socket.emit('exchange_cards', {\n        gameId: gameState.id,\n        cardIndices: []\n      });\n    }\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n  const handleOpenExchange = () => {\n    setIsTrumpExchange(false);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n  const handleOpenTrumpExchange = () => {\n    setIsTrumpExchange(true);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n  const handleSkipTrumpExchange = () => {\n    if (!socket) return;\n    socket.emit('exchange_trump', {\n      gameId: gameState.id,\n      cardIndex: -1\n    });\n  };\n  const handleStartNextRound = () => {\n    if (!socket) return;\n    socket.emit('start_next_round', {\n      gameId: gameState.id\n    });\n  };\n  const handleSendChat = () => {\n    if (!socket || !chatMessage.trim()) return;\n    socket.emit('send_chat', {\n      gameId: gameState.id,\n      message: chatMessage.trim()\n    });\n    setChatMessage('');\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendChat();\n    }\n  };\n\n  // Drag and drop handlers for card reordering and playing\n  const handleDragStart = (e, cardIndex) => {\n    setDraggedCardIndex(cardIndex);\n    setIsDraggingToPlay(false);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', cardIndex.toString());\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n\n    // Add visual feedback for play drop zone\n    const target = e.currentTarget;\n    if (target.classList.contains('play-drop-zone')) {\n      target.classList.add('drag-over');\n    }\n  };\n  const handleDrop = (e, dropIndex) => {\n    e.preventDefault();\n    if (draggedCardIndex === null) return;\n    setCardOrder(prevOrder => {\n      const newOrder = [...prevOrder];\n      const draggedCardOriginalIndex = newOrder[draggedCardIndex];\n\n      // Remove the dragged card from its current position\n      newOrder.splice(draggedCardIndex, 1);\n\n      // Insert it at the new position\n      newOrder.splice(dropIndex, 0, draggedCardOriginalIndex);\n      return newOrder;\n    });\n    setDraggedCardIndex(null);\n  };\n  const handleDropToPlay = e => {\n    e.preventDefault();\n    if (draggedCardIndex === null || !canPlayCard) return;\n    const originalIndex = cardOrder[draggedCardIndex];\n    if (playableCards.includes(originalIndex)) {\n      handlePlayCard(originalIndex);\n    }\n    setDraggedCardIndex(null);\n  };\n  const handleDragEnd = () => {\n    setDraggedCardIndex(null);\n    setIsDraggingToPlay(false);\n\n    // Remove drag-over visual feedback\n    const dropZone = document.querySelector('.play-drop-zone');\n    if (dropZone) {\n      dropZone.classList.remove('drag-over');\n    }\n  };\n  const isMyTurn = ((_gameState$players$ga = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga === void 0 ? void 0 : _gameState$players$ga.id) === updatedCurrentPlayer.id;\n  const canMakeDecision = gameState.gamePhase === 'dealing' && updatedCurrentPlayer.enteredRound === undefined && isMyTurn;\n  const canExchange = gameState.gamePhase === 'exchanging' && updatedCurrentPlayer.enteredRound === true && !updatedCurrentPlayer.hasExchanged && isMyTurn;\n  const canExchangeTrump = gameState.gamePhase === 'trump_exchanging' && updatedCurrentPlayer.enteredRound === true && updatedCurrentPlayer.isDealer && ((_gameState$players$ga2 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga2 === void 0 ? void 0 : _gameState$players$ga2.id) === updatedCurrentPlayer.id;\n  const canPlayCard = gameState.gamePhase === 'playing' && updatedCurrentPlayer.enteredRound === true && isMyTurn;\n\n  // Calculate player positions around the table\n  const getPlayerPosition = (index, totalPlayers, actualPlayerIndex) => {\n    // Calculate relative position (how many positions away from current player)\n    let relativeIndex = index - actualPlayerIndex;\n    if (relativeIndex < 0) {\n      relativeIndex += totalPlayers;\n    }\n\n    // Position current player at bottom (270 degrees), others relative to that\n    const angle = relativeIndex * 360 / totalPlayers + 90; // Start from bottom\n\n    // Adjust radius based on number of players to prevent overlapping\n    const baseRadius = 250;\n    const radius = totalPlayers <= 3 ? baseRadius : baseRadius + (totalPlayers - 3) * 30;\n    const x = Math.cos(angle * Math.PI / 180) * radius;\n    const y = Math.sin(angle * Math.PI / 180) * radius;\n    return {\n      x,\n      y\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-room-new\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header-new\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"phase-badge-new\",\n          children: gameState.gamePhase.replace('_', ' ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bot-info\",\n          children: [\"\\uD83E\\uDD16 \", gameState.players.filter(p => p.isBot).length, \" Bots\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-id-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"room-badge-clickable\",\n          onClick: () => {\n            navigator.clipboard.writeText(gameState.id);\n            // Optional: Show a brief notification\n            const button = document.querySelector('.room-badge-clickable');\n            if (button) {\n              const originalText = button.textContent;\n              button.textContent = 'Copied!';\n              button.classList.add('copied');\n              setTimeout(() => {\n                button.textContent = originalText;\n                button.classList.remove('copied');\n              }, 2000);\n            }\n          },\n          title: \"Click to copy game ID\",\n          children: [\"Room: \", gameState.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onLeaveGame,\n        className: \"leave-btn-new\",\n        children: \"Leave Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `table-center ${canPlayCard ? 'play-drop-zone' : ''}`,\n          \"aria-label\": canPlayCard ? \"Card drop zone\" : undefined,\n          onDragOver: canPlayCard ? handleDragOver : undefined,\n          onDragLeave: e => {\n            if (canPlayCard && !e.currentTarget.contains(e.relatedTarget)) {\n              e.currentTarget.classList.remove('drag-over');\n            }\n          },\n          onDrop: canPlayCard ? e => handleDropToPlay(e) : undefined,\n          onKeyDown: canPlayCard ? e => e.preventDefault() : undefined,\n          onTouchStart: canPlayCard ? e => e.preventDefault() : undefined,\n          onMouseDown: canPlayCard ? e => e.preventDefault() : undefined,\n          children: [gameState.trumpCard && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trump-card-new\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card trump-new\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: gameState.trumpCard.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: getSuitSymbol(gameState.trumpCard.suit)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"trump-label\",\n              children: \"Trump\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-card-back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-count\",\n              children: gameState.tree.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), gameState.currentHouse.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-house-new\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"house-label\",\n              children: \"Current House\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"house-cards-new\",\n              children: gameState.currentHouse.map((houseCard, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"house-card-new\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card house-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `card-rank ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`,\n                    children: houseCard.card.rank\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `card-suit ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`,\n                    children: getSuitSymbol(houseCard.card.suit)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 418,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-player-name\",\n                  children: houseCard.playerName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 23\n                }, this)]\n              }, `${houseCard.playerId}-${houseCard.card.suit}-${houseCard.card.rank}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 15\n          }, this), gameState.houses.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"completed-houses\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"houses-label\",\n              children: [\"Completed Houses: \", gameState.houses.length, \"/5\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'dealing' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga3 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga3 !== void 0 && _gameState$players$ga3.isBot ? '🤖 ' : '', (_gameState$players$ga4 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga4 === void 0 ? void 0 : _gameState$players$ga4.name, \" is deciding to enter...\", ((_gameState$players$ga5 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga5 === void 0 ? void 0 : _gameState$players$ga5.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'exchanging' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga6 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga6 !== void 0 && _gameState$players$ga6.isBot ? '🤖 ' : '', (_gameState$players$ga7 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga7 === void 0 ? void 0 : _gameState$players$ga7.name, \" is exchanging cards...\", ((_gameState$players$ga8 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga8 === void 0 ? void 0 : _gameState$players$ga8.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'trump_exchanging' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga9 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga9 !== void 0 && _gameState$players$ga9.isBot ? '🤖 ' : '', (_gameState$players$ga0 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga0 === void 0 ? void 0 : _gameState$players$ga0.name, \" is exchanging trump card...\", ((_gameState$players$ga1 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga1 === void 0 ? void 0 : _gameState$players$ga1.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga10 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga10 !== void 0 && _gameState$players$ga10.isBot ? '🤖 ' : '', (_gameState$players$ga11 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga11 === void 0 ? void 0 : _gameState$players$ga11.name, \" is playing a card...\", ((_gameState$players$ga12 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga12 === void 0 ? void 0 : _gameState$players$ga12.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this), botActionMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bot-action-notification\",\n            children: botActionMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), gameState.players.map((player, index) => {\n          const position = getPlayerPosition(index, gameState.players.length, actualPlayerIndex);\n          const isCurrentPlayer = player.id === updatedCurrentPlayer.id;\n          const isActiveTurn = gameState.currentPlayerIndex === index;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `player-position ${isCurrentPlayer ? 'current-player' : ''} ${isActiveTurn ? 'active-turn' : ''}`,\n            style: {\n              '--x': `${position.x}px`,\n              '--y': `${position.y}px`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar\",\n              children: [player.isHost && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"crown\",\n                children: \"\\uD83D\\uDC51\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 37\n              }, this), player.isDealer && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"dealer-icon\",\n                children: \"\\uD83C\\uDFAF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 39\n              }, this), player.isMouth && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mouth-icon\",\n                children: \"\\uD83D\\uDC44\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 38\n              }, this), player.isBot && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"bot-icon\",\n                children: \"\\uD83E\\uDD16\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 36\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar-icon\",\n                children: player.name.charAt(0).toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-info-new\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-name-new\",\n                children: player.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 500,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-score-new\",\n                children: [player.score, \"/-\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-houses-new\",\n                children: [\"Houses: \", player.housesBuilt]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-hand-new\",\n              children: isCurrentPlayer ?\n              /*#__PURE__*/\n              // Show actual cards for current player\n              _jsxDEV(\"div\", {\n                className: \"hand-cards\",\n                children: Array.isArray(player.hand) ? cardOrder.map((originalIndex, displayIndex) => {\n                  const card = player.hand[originalIndex];\n                  // Skip rendering if card doesn't exist (was played)\n                  if (!card) return null;\n                  return /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `card hand-card ${playableCards.includes(originalIndex) ? 'playable' : ''} ${canPlayCard ? 'my-turn' : ''} ${selectedCardsForExchange.includes(originalIndex) ? 'selected-for-exchange' : ''} ${draggedCardIndex === displayIndex ? 'dragging' : ''}`,\n                    draggable: canPlayCard ? playableCards.includes(originalIndex) : true,\n                    onDragStart: e => handleDragStart(e, displayIndex),\n                    onDragOver: handleDragOver,\n                    onDrop: e => handleDrop(e, displayIndex),\n                    onDragEnd: handleDragEnd,\n                    onClick: () => {\n                      if (canExchange) {\n                        handleCardSelectForExchange(originalIndex);\n                      }\n                    },\n                    disabled: canPlayCard && !playableCards.includes(originalIndex),\n                    \"aria-label\": `Play ${card.rank} of ${card.suit}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                      children: card.rank\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 535,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                      children: getSuitSymbol(card.suit)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 538,\n                      columnNumber: 29\n                    }, this)]\n                  }, `${card.suit}-${card.rank}-${originalIndex}-${displayIndex}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 515,\n                    columnNumber: 27\n                  }, this);\n                }) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-count\",\n                  children: [player.hand, \" cards\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 544,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 21\n              }, this) :\n              /*#__PURE__*/\n              // Show card backs for other players\n              _jsxDEV(\"div\", {\n                className: \"opponent-cards\",\n                children: Array.isArray(player.hand) ? player.hand.map((_, cardIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card card-back\"\n                }, `${player.id}-card-back-${cardIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 25\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-count\",\n                  children: [player.hand, \" cards\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 553,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-status-new\",\n              children: [player.isReady && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ready-badge-new\",\n                children: \"Ready\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 38\n              }, this), player.enteredRound === true && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"entered-badge-new\",\n                children: \"Entered\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 52\n              }, this), player.enteredRound === false && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"declined-badge-new\",\n                children: \"Declined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 53\n              }, this), player.hasExchanged && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"exchanged-badge-new\",\n                children: \"Exchanged\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 43\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 17\n            }, this)]\n          }, player.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls-new\",\n      children: [gameState.gamePhase === 'waiting' && !updatedCurrentPlayer.isReady && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReady,\n        className: \"ready-btn-new\",\n        children: \"Ready\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 11\n      }, this), gameState.gamePhase === 'waiting' && updatedCurrentPlayer.isReady && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUnready,\n        className: \"unready-btn-new\",\n        children: \"Unready\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 11\n      }, this), updatedCurrentPlayer.isHost && gameState.gamePhase === 'ready' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartGame,\n        className: \"start-btn-new\",\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 11\n      }, this), canMakeDecision && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"decision-buttons-new\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEnterTurn,\n          className: \"enter-btn-new\",\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSkipTurn,\n          className: \"skip-btn-new\",\n          children: \"Skip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 11\n      }, this), canExchange && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOpenExchange,\n          className: \"exchange-btn\",\n          children: [\"Exchange Cards (\", gameState.tree.length, \" available)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSkipExchange,\n          className: \"skip-exchange-btn\",\n          children: \"Skip Exchange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 11\n      }, this), canExchangeTrump && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOpenTrumpExchange,\n          className: \"exchange-btn\",\n          children: \"Exchange Trump Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSkipTrumpExchange,\n          className: \"skip-exchange-btn\",\n          children: \"Skip Trump Exchange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this), showExchangeModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exchange-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: isTrumpExchange ? 'Exchange Trump Card' : 'Exchange Cards'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 13\n        }, this), isTrumpExchange && gameState.trumpCard && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trump-card-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card trump-new\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n              children: gameState.trumpCard.rank\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n              children: getSuitSymbol(gameState.trumpCard.suit)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trump-label\",\n            children: \"Trump Card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isTrumpExchange ? `Select one card to exchange with the trump card (${(_gameState$trumpCard = gameState.trumpCard) === null || _gameState$trumpCard === void 0 ? void 0 : _gameState$trumpCard.rank} of ${(_gameState$trumpCard2 = gameState.trumpCard) === null || _gameState$trumpCard2 === void 0 ? void 0 : _gameState$trumpCard2.suit})` : `Select cards to exchange with the tree. You can exchange up to ${gameState.tree.length} cards.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exchange-cards-preview\",\n          children: Array.isArray(updatedCurrentPlayer.hand) && updatedCurrentPlayer.hand.map((card, index) => {\n            const isSelected = selectedCardsForExchange.includes(index);\n            const maxReached = !isTrumpExchange && selectedCardsForExchange.length >= gameState.tree.length && !isSelected;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `card exchange-card ${isSelected ? 'selected' : ''} ${maxReached ? 'disabled' : ''}`,\n              onClick: () => handleCardSelectForExchange(index),\n              disabled: maxReached,\n              title: maxReached ? `Cannot select more than ${gameState.tree.length} cards` : '',\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: card.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 660,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: getSuitSymbol(card.suit)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 663,\n                columnNumber: 21\n              }, this)]\n            }, `${card.suit}-${card.rank}-${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exchange-modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleExchangeCards,\n            disabled: selectedCardsForExchange.length === 0 || !isTrumpExchange && selectedCardsForExchange.length > gameState.tree.length,\n            className: \"confirm-exchange-btn\",\n            children: isTrumpExchange ? `Exchange ${selectedCardsForExchange.length} Card` : `Exchange ${selectedCardsForExchange.length} Cards (max ${gameState.tree.length})`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSkipExchange,\n            className: \"skip-exchange-btn\",\n            children: isTrumpExchange ? 'Skip Trump Exchange' : 'Skip Exchange'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 9\n    }, this), gameState.gamePhase === 'round_finished' && gameState.roundScores.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-overlay-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-overlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Round \", gameState.roundScores[gameState.roundScores.length - 1].roundNumber, \" Results\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-results\",\n          children: gameState.roundScores[gameState.roundScores.length - 1].playerScores.map((playerScore, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `score-row ${playerScore.playerId === gameState.roundScores[gameState.roundScores.length - 1].winner ? 'winner' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: playerScore.playerName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"score-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"previous-score\",\n                children: playerScore.previousScore\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 699,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"arrow\",\n                children: \"\\u2192\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 700,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"new-score\",\n                children: playerScore.newScore\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 701,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"houses-built\",\n                children: [\"(\", playerScore.housesBuilt, \" houses)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 19\n            }, this)]\n          }, playerScore.playerId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"round-winner\",\n          children: [\"\\uD83C\\uDFC6 \", (_gameState$players$fi = gameState.players.find(p => p.id === gameState.roundScores[gameState.roundScores.length - 1].winner)) === null || _gameState$players$fi === void 0 ? void 0 : _gameState$players$fi.name, \" won the round!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDismissScoreOverlay,\n          className: \"dismiss-score-btn\",\n          disabled: !socket,\n          children: !socket ? 'Reconnecting...' : 'Continue to Next Round'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowChat(!showChat),\n      className: \"chat-toggle-btn\",\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 7\n    }, this), showChat && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowChat(false),\n          className: \"close-chat\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-new\",\n        children: gameState.chatMessages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message-new ${message.type}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-sender\",\n            children: [message.playerName, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-text\",\n            children: message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 17\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-new\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type a message...\",\n          value: chatMessage,\n          onChange: e => setChatMessage(e.target.value),\n          onKeyDown: handleKeyPress,\n          className: \"message-input-new\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendChat,\n          className: \"send-btn-new\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 5\n  }, this);\n};\n_s(GameRoom, \"z46YzEZRcWLtqOXqHKILRJdW5Kk=\");\n_c = GameRoom;\nexport default GameRoom;\nvar _c;\n$RefreshReg$(_c, \"GameRoom\");","map":{"version":3,"names":["React","useState","useEffect","getSuitSymbol","jsxDEV","_jsxDEV","GameRoom","socket","gameState","currentPlayer","onLeaveGame","_s","_gameState$players$ga","_gameState$players$ga2","_gameState$players$ga3","_gameState$players$ga4","_gameState$players$ga5","_gameState$players$ga6","_gameState$players$ga7","_gameState$players$ga8","_gameState$players$ga9","_gameState$players$ga0","_gameState$players$ga1","_gameState$players$ga10","_gameState$players$ga11","_gameState$players$ga12","_gameState$trumpCard","_gameState$trumpCard2","_gameState$players$fi","chatMessage","setChatMessage","playableCards","setPlayableCards","showChat","setShowChat","selectedCardsForExchange","setSelectedCardsForExchange","showExchangeModal","setShowExchangeModal","isTrumpExchange","setIsTrumpExchange","botActionMessage","setBotActionMessage","cardOrder","setCardOrder","draggedCardIndex","setDraggedCardIndex","isDraggingToPlay","setIsDraggingToPlay","actualPlayerIndex","players","findIndex","player","id","prevPlayersRef","useRef","updatedCurrentPlayer","find","Array","isArray","hand","prevOrder","handArray","newOrder","filter","index","length","i","includes","push","gamePhase","isMyTurn","emit","gameId","currentPlayerIndex","on","data","off","name","isBot","prevPlayers","current","currentPlayers","forEach","prevPlayer","enteredRound","undefined","action","setTimeout","hasExchanged","handleReady","isReady","handleUnready","handleStartGame","handleEnterTurn","handleSkipTurn","handlePlayCard","cardIndex","handleCardSelectForExchange","prev","maxExchangeable","tree","handleExchangeCards","console","warn","cardIndices","handleSkipExchange","handleOpenExchange","handleOpenTrumpExchange","handleSkipTrumpExchange","handleStartNextRound","handleSendChat","trim","message","handleKeyPress","e","key","shiftKey","preventDefault","handleDragStart","dataTransfer","effectAllowed","setData","toString","handleDragOver","dropEffect","target","currentTarget","classList","contains","add","handleDrop","dropIndex","draggedCardOriginalIndex","splice","handleDropToPlay","canPlayCard","originalIndex","handleDragEnd","dropZone","document","querySelector","remove","canMakeDecision","canExchange","canExchangeTrump","isDealer","getPlayerPosition","totalPlayers","relativeIndex","angle","baseRadius","radius","x","Math","cos","PI","y","sin","className","children","replace","fileName","_jsxFileName","lineNumber","columnNumber","p","onClick","navigator","clipboard","writeText","button","originalText","textContent","title","onDragOver","onDragLeave","relatedTarget","onDrop","onKeyDown","onTouchStart","onMouseDown","trumpCard","suit","rank","currentHouse","map","houseCard","card","playerName","playerId","houses","position","isCurrentPlayer","isActiveTurn","style","isHost","isMouth","charAt","toUpperCase","score","housesBuilt","displayIndex","draggable","onDragStart","onDragEnd","disabled","_","isSelected","maxReached","roundScores","roundNumber","playerScores","playerScore","winner","previousScore","newScore","handleDismissScoreOverlay","chatMessages","type","placeholder","value","onChange","_c","$RefreshReg$"],"sources":["/Users/enkhmendeee/muushig/client/src/pages/GameRoom.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Socket } from 'socket.io-client';\nimport { Player, GameState, ChatMessage } from '../types/game';\nimport { getSuitSymbol } from '../utils/gameUtils';\n\nconst GameRoom: React.FC<{\n  socket: Socket | null;\n  gameState: GameState;\n  currentPlayer: Player;\n  onLeaveGame: () => void;\n}> = ({ socket, gameState, currentPlayer, onLeaveGame }) => {\n  const [chatMessage, setChatMessage] = useState('');\n  const [playableCards, setPlayableCards] = useState<number[]>([]);\n  const [showChat, setShowChat] = useState(false);\n  const [selectedCardsForExchange, setSelectedCardsForExchange] = useState<number[]>([]);\n  const [showExchangeModal, setShowExchangeModal] = useState(false);\n  const [isTrumpExchange, setIsTrumpExchange] = useState(false);\n  const [botActionMessage, setBotActionMessage] = useState<string>('');\n  const [cardOrder, setCardOrder] = useState<number[]>([]);\n  const [draggedCardIndex, setDraggedCardIndex] = useState<number | null>(null);\n  const [isDraggingToPlay, setIsDraggingToPlay] = useState(false);\n\n  const actualPlayerIndex = gameState.players.findIndex(player => player.id === currentPlayer.id);\n  const prevPlayersRef = React.useRef(gameState.players);\n  \n  // Update currentPlayer with latest data from gameState\n  const updatedCurrentPlayer = gameState.players.find(player => player.id === currentPlayer.id) || currentPlayer;\n\n  // Initialize card order when hand changes\n  useEffect(() => {\n    if (Array.isArray(updatedCurrentPlayer.hand)) {\n      // Filter out indices that no longer exist in the hand\n      setCardOrder(prevOrder => {\n        const handArray = updatedCurrentPlayer.hand as any[];\n        const newOrder = prevOrder.filter(index => index < handArray.length);\n        // Add any new indices that might have been added\n        for (let i = 0; i < handArray.length; i++) {\n          if (!newOrder.includes(i)) {\n            newOrder.push(i);\n          }\n        }\n        return newOrder;\n      });\n    }\n  }, [updatedCurrentPlayer.hand]);\n\n  useEffect(() => {\n    if (socket && gameState.gamePhase === 'playing' && isMyTurn) {\n      socket.emit('get_playable_cards', { gameId: gameState.id });\n    }\n  }, [socket, gameState.gamePhase, gameState.currentPlayerIndex, updatedCurrentPlayer.id]);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('playable_cards', (data: { gameId: string; playableCards: number[] }) => {\n      if (data.gameId === gameState.id) {\n        setPlayableCards(data.playableCards);\n      }\n    });\n\n    return () => {\n      socket.off('playable_cards');\n    };\n  }, [socket, gameState.id, currentPlayer.name]);\n\n  // Track bot decisions and show notifications\n  useEffect(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (currentPlayer?.isBot) {\n      // Clear any existing bot action message when a new bot starts thinking\n      setBotActionMessage('');\n    }\n  }, [gameState.currentPlayerIndex, gameState.players]);\n\n  // Track when bots make decisions\n  useEffect(() => {\n    const prevPlayers = prevPlayersRef.current;\n    const currentPlayers = gameState.players;\n    \n    currentPlayers.forEach((player, index) => {\n      const prevPlayer = prevPlayers[index];\n      if (player.isBot && \n          prevPlayer && \n          prevPlayer.enteredRound === undefined && \n          player.enteredRound !== undefined) {\n        const action = player.enteredRound ? 'entered' : 'declined';\n        setBotActionMessage(`${player.name} ${action} the round`);\n        \n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n      \n      // Track exchange decisions\n      if (player.isBot && \n          prevPlayer && \n          !prevPlayer.hasExchanged && \n          player.hasExchanged) {\n        const action = gameState.gamePhase === 'trump_exchanging' ? 'exchanged trump card' : 'exchanged cards';\n        setBotActionMessage(`${player.name} ${action}`);\n        \n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n    });\n    \n    prevPlayersRef.current = currentPlayers;\n  }, [gameState.players]);\n\n  const handleReady = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: true });\n  };\n\n  const handleUnready = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: false });\n  };\n\n  const handleStartGame = () => {\n    if (!socket) return;\n    socket.emit('start_game', { gameId: gameState.id });\n  };\n\n  const handleEnterTurn = () => {\n    if (!socket) return;\n    socket.emit('enter_turn', { gameId: gameState.id });\n  };\n\n  const handleSkipTurn = () => {\n    if (!socket) return;\n    socket.emit('skip_turn', { gameId: gameState.id });\n  };\n\n  const handlePlayCard = (cardIndex: number) => {\n    if (!socket) return;\n    socket.emit('play_card', { gameId: gameState.id, cardIndex });\n  };\n\n  const handleCardSelectForExchange = (cardIndex: number) => {\n    setSelectedCardsForExchange(prev => {\n      if (prev.includes(cardIndex)) {\n        return prev.filter(index => index !== cardIndex);\n      } else {\n        if (isTrumpExchange) {\n          // For trump exchange, only allow one card selection\n          return [cardIndex];\n        } else {\n          // For regular exchange, limit to tree size\n          const maxExchangeable = gameState.tree.length;\n          if (prev.length >= maxExchangeable) {\n            // If already at max, don't add more cards\n            return prev;\n          } else {\n            return [...prev, cardIndex];\n          }\n        }\n      }\n    });\n  };\n\n  const handleExchangeCards = () => {\n    if (!socket || selectedCardsForExchange.length === 0) return;\n    \n    if (isTrumpExchange) {\n      // For trump exchange, only exchange the first selected card\n      socket.emit('exchange_trump', { \n        gameId: gameState.id, \n        cardIndex: selectedCardsForExchange[0] \n      });\n    } else {\n      // For regular exchange, validate against tree size\n      const maxExchangeable = gameState.tree.length;\n      if (selectedCardsForExchange.length > maxExchangeable) {\n        console.warn(`Cannot exchange ${selectedCardsForExchange.length} cards when only ${maxExchangeable} are available in tree`);\n        return;\n      }\n      \n      socket.emit('exchange_cards', { \n        gameId: gameState.id, \n        cardIndices: selectedCardsForExchange \n      });\n    }\n    \n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleSkipExchange = () => {\n    if (!socket) return;\n    \n    if (isTrumpExchange) {\n      socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n    } else {\n      socket.emit('exchange_cards', { gameId: gameState.id, cardIndices: [] });\n    }\n    \n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleOpenExchange = () => {\n    setIsTrumpExchange(false);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleOpenTrumpExchange = () => {\n    setIsTrumpExchange(true);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleSkipTrumpExchange = () => {\n    if (!socket) return;\n    socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n  };\n\n\n\n  const handleStartNextRound = () => {\n    if (!socket) return;\n    socket.emit('start_next_round', { gameId: gameState.id });\n  };\n\n  const handleSendChat = () => {\n    if (!socket || !chatMessage.trim()) return;\n    socket.emit('send_chat', { gameId: gameState.id, message: chatMessage.trim() });\n    setChatMessage('');\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendChat();\n    }\n  };\n\n  // Drag and drop handlers for card reordering and playing\n  const handleDragStart = (e: React.DragEvent, cardIndex: number) => {\n    setDraggedCardIndex(cardIndex);\n    setIsDraggingToPlay(false);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', cardIndex.toString());\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n    \n    // Add visual feedback for play drop zone\n    const target = e.currentTarget as HTMLElement;\n    if (target.classList.contains('play-drop-zone')) {\n      target.classList.add('drag-over');\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent, dropIndex: number) => {\n    e.preventDefault();\n    if (draggedCardIndex === null) return;\n\n    setCardOrder(prevOrder => {\n      const newOrder = [...prevOrder];\n      const draggedCardOriginalIndex = newOrder[draggedCardIndex];\n      \n      // Remove the dragged card from its current position\n      newOrder.splice(draggedCardIndex, 1);\n      \n      // Insert it at the new position\n      newOrder.splice(dropIndex, 0, draggedCardOriginalIndex);\n      \n      return newOrder;\n    });\n    \n    setDraggedCardIndex(null);\n  };\n\n  const handleDropToPlay = (e: React.DragEvent) => {\n    e.preventDefault();\n    if (draggedCardIndex === null || !canPlayCard) return;\n\n    const originalIndex = cardOrder[draggedCardIndex];\n    if (playableCards.includes(originalIndex)) {\n      handlePlayCard(originalIndex);\n    }\n    \n    setDraggedCardIndex(null);\n  };\n\n  const handleDragEnd = () => {\n    setDraggedCardIndex(null);\n    setIsDraggingToPlay(false);\n    \n    // Remove drag-over visual feedback\n    const dropZone = document.querySelector('.play-drop-zone');\n    if (dropZone) {\n      dropZone.classList.remove('drag-over');\n    }\n  };\n\n  const isMyTurn = gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canMakeDecision = gameState.gamePhase === 'dealing' && updatedCurrentPlayer.enteredRound === undefined && isMyTurn;\n  const canExchange = gameState.gamePhase === 'exchanging' && updatedCurrentPlayer.enteredRound === true && !updatedCurrentPlayer.hasExchanged && isMyTurn;\n  const canExchangeTrump = gameState.gamePhase === 'trump_exchanging' && updatedCurrentPlayer.enteredRound === true && updatedCurrentPlayer.isDealer && gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canPlayCard = gameState.gamePhase === 'playing' && updatedCurrentPlayer.enteredRound === true && isMyTurn;\n\n\n\n  // Calculate player positions around the table\n  const getPlayerPosition = (index: number, totalPlayers: number, actualPlayerIndex: number) => {\n    // Calculate relative position (how many positions away from current player)\n    let relativeIndex = index - actualPlayerIndex;\n    if (relativeIndex < 0) {\n      relativeIndex += totalPlayers;\n    }\n    \n    // Position current player at bottom (270 degrees), others relative to that\n    const angle = (relativeIndex * 360) / totalPlayers + 90; // Start from bottom\n    \n    // Adjust radius based on number of players to prevent overlapping\n    const baseRadius = 250;\n    const radius = totalPlayers <= 3 ? baseRadius : baseRadius + (totalPlayers - 3) * 30;\n    \n    const x = Math.cos((angle * Math.PI) / 180) * radius;\n    const y = Math.sin((angle * Math.PI) / 180) * radius;\n    \n    return { x, y };\n  };\n\n  return (\n    <div className=\"game-room-new\">\n      {/* Header */}\n      <div className=\"game-header-new\">\n        <div className=\"room-info\">\n          <span className=\"phase-badge-new\">{gameState.gamePhase.replace('_', ' ')}</span>\n          <span className=\"bot-info\">🤖 {gameState.players.filter(p => p.isBot).length} Bots</span>\n        </div>\n        <div className=\"room-id-center\">\n          <button \n            className=\"room-badge-clickable\"\n            onClick={() => {\n              navigator.clipboard.writeText(gameState.id);\n              // Optional: Show a brief notification\n              const button = document.querySelector('.room-badge-clickable');\n              if (button) {\n                const originalText = button.textContent;\n                button.textContent = 'Copied!';\n                button.classList.add('copied');\n                setTimeout(() => {\n                  button.textContent = originalText;\n                  button.classList.remove('copied');\n                }, 2000);\n              }\n            }}\n            title=\"Click to copy game ID\"\n          >\n            Room: {gameState.id}\n          </button>\n        </div>\n        <button onClick={onLeaveGame} className=\"leave-btn-new\">Leave Game</button>\n      </div>\n\n      {/* Game Table */}\n      <div className=\"game-table-container\">\n        <div className=\"game-table\">\n          {/* Central Table Area */}\n          <div \n            className={`table-center ${canPlayCard ? 'play-drop-zone' : ''}`}\n            aria-label={canPlayCard ? \"Card drop zone\" : undefined}\n            onDragOver={canPlayCard ? handleDragOver : undefined}\n            onDragLeave={(e) => {\n              if (canPlayCard && !e.currentTarget.contains(e.relatedTarget as Node)) {\n                e.currentTarget.classList.remove('drag-over');\n              }\n            }}\n            onDrop={canPlayCard ? (e) => handleDropToPlay(e) : undefined}\n            onKeyDown={canPlayCard ? (e) => e.preventDefault() : undefined}\n            onTouchStart={canPlayCard ? (e) => e.preventDefault() : undefined}\n            onMouseDown={canPlayCard ? (e) => e.preventDefault() : undefined}\n          >\n            {/* Trump Card */}\n            {gameState.trumpCard && (\n              <div className=\"trump-card-new\">\n                <div className=\"card trump-new\">\n                  <span className={`card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {gameState.trumpCard.rank}\n                  </span>\n                  <span className={`card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {getSuitSymbol(gameState.trumpCard.suit)}\n                  </span>\n                </div>\n                <div className=\"trump-label\">Trump</div>\n              </div>\n            )}\n\n            {/* Tree Cards */}\n            <div className=\"tree-cards\">\n              <div className=\"tree-card-back\"></div>\n              <div className=\"tree-count\">{gameState.tree.length}</div>\n            </div>\n\n            {/* Current House */}\n            {gameState.currentHouse.length > 0 && (\n              <div className=\"current-house-new\">\n                <div className=\"house-label\">Current House</div>\n                <div className=\"house-cards-new\">\n                  {gameState.currentHouse.map((houseCard, index) => (\n                    <div key={`${houseCard.playerId}-${houseCard.card.suit}-${houseCard.card.rank}-${index}`} className=\"house-card-new\">\n                      <div className=\"card house-card\">\n                        <span className={`card-rank ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                          {houseCard.card.rank}\n                        </span>\n                        <span className={`card-suit ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                          {getSuitSymbol(houseCard.card.suit)}\n                        </span>\n                      </div>\n                      <div className=\"card-player-name\">{houseCard.playerName}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Completed Houses */}\n            {gameState.houses.length > 0 && (\n              <div className=\"completed-houses\">\n                <div className=\"houses-label\">Completed Houses: {gameState.houses.length}/5</div>\n              </div>\n            )}\n\n            {/* Game Status Message */}\n            {gameState.gamePhase === 'dealing' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is deciding to enter...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            {gameState.gamePhase === 'exchanging' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is exchanging cards...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            {gameState.gamePhase === 'trump_exchanging' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is exchanging trump card...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            {gameState.gamePhase === 'playing' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is playing a card...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            \n            {/* Bot Action Notification */}\n            {botActionMessage && (\n              <div className=\"bot-action-notification\">\n                {botActionMessage}\n              </div>\n            )}\n          </div>\n\n          {/* Players Around the Table */}\n          {gameState.players.map((player, index) => {\n            const position = getPlayerPosition(index, gameState.players.length, actualPlayerIndex);\n            const isCurrentPlayer = player.id === updatedCurrentPlayer.id;\n            const isActiveTurn = gameState.currentPlayerIndex === index;\n            \n            return (\n              <div\n                key={player.id}\n                className={`player-position ${isCurrentPlayer ? 'current-player' : ''} ${isActiveTurn ? 'active-turn' : ''}`}\n                style={{\n                  '--x': `${position.x}px`,\n                  '--y': `${position.y}px`\n                } as React.CSSProperties}\n              >\n                <div className=\"player-avatar\">\n                  {player.isHost && <span className=\"crown\">👑</span>}\n                  {player.isDealer && <span className=\"dealer-icon\">🎯</span>}\n                  {player.isMouth && <span className=\"mouth-icon\">👄</span>}\n                  {player.isBot && <span className=\"bot-icon\">🤖</span>}\n                  <div className=\"avatar-icon\">\n                    {player.name.charAt(0).toUpperCase()}\n                  </div>\n                </div>\n                \n                <div className=\"player-info-new\">\n                  <div className=\"player-name-new\">{player.name}</div>\n                  <div className=\"player-score-new\">{player.score}/-</div>\n                  <div className=\"player-houses-new\">Houses: {player.housesBuilt}</div>\n                </div>\n\n                                  {/* Player Hand */}\n                <div className=\"player-hand-new\">\n                  {isCurrentPlayer ? (\n                    // Show actual cards for current player\n                    <div className=\"hand-cards\">\n                      {Array.isArray(player.hand) ? cardOrder.map((originalIndex, displayIndex) => {\n                        const card = (player.hand as any[])[originalIndex];\n                        // Skip rendering if card doesn't exist (was played)\n                        if (!card) return null;\n                        return (\n                          <button \n                            key={`${card.suit}-${card.rank}-${originalIndex}-${displayIndex}`}\n                            className={`card hand-card ${playableCards.includes(originalIndex) ? 'playable' : ''} ${\n                              canPlayCard ? 'my-turn' : ''\n                            } ${selectedCardsForExchange.includes(originalIndex) ? 'selected-for-exchange' : ''} ${\n                              draggedCardIndex === displayIndex ? 'dragging' : ''\n                            }`}\n                            draggable={canPlayCard ? playableCards.includes(originalIndex) : true}\n                            onDragStart={(e) => handleDragStart(e, displayIndex)}\n                            onDragOver={handleDragOver}\n                            onDrop={(e) => handleDrop(e, displayIndex)}\n                            onDragEnd={handleDragEnd}\n                            onClick={() => {\n                              if (canExchange) {\n                                handleCardSelectForExchange(originalIndex);\n                              }\n                            }}\n                            disabled={canPlayCard && !playableCards.includes(originalIndex)}\n                            aria-label={`Play ${card.rank} of ${card.suit}`}\n                          >\n                            <span className={`card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                              {card.rank}\n                            </span>\n                            <span className={`card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                              {getSuitSymbol(card.suit)}\n                            </span>\n                          </button>\n                        );\n                      }) : (\n                        <div className=\"card-count\">{player.hand} cards</div>\n                      )}\n                    </div>\n                  ) : (\n                    // Show card backs for other players\n                    <div className=\"opponent-cards\">\n                      {Array.isArray(player.hand) ? player.hand.map((_, cardIndex) => (\n                        <div key={`${player.id}-card-back-${cardIndex}`} className=\"card card-back\"></div>\n                      )) : (\n                        <div className=\"card-count\">{player.hand} cards</div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Player Status */}\n                <div className=\"player-status-new\">\n                  {player.isReady && <span className=\"ready-badge-new\">Ready</span>}\n                  {player.enteredRound === true && <span className=\"entered-badge-new\">Entered</span>}\n                  {player.enteredRound === false && <span className=\"declined-badge-new\">Declined</span>}\n                  {player.hasExchanged && <span className=\"exchanged-badge-new\">Exchanged</span>}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Game Controls */}\n      <div className=\"game-controls-new\">\n        \n        {gameState.gamePhase === 'waiting' && !updatedCurrentPlayer.isReady && (\n          <button onClick={handleReady} className=\"ready-btn-new\">Ready</button>\n        )}\n\n        {(gameState.gamePhase === 'waiting' ) && updatedCurrentPlayer.isReady && (\n          <button onClick={handleUnready} className=\"unready-btn-new\">Unready</button>\n        )}\n        \n        {updatedCurrentPlayer.isHost && gameState.gamePhase === 'ready' && (\n          <button onClick={handleStartGame} className=\"start-btn-new\">Start Game</button>\n        )}\n        \n        {canMakeDecision && (\n          <div className=\"decision-buttons-new\">\n            <button onClick={handleEnterTurn} className=\"enter-btn-new\">Enter</button>\n            <button onClick={handleSkipTurn} className=\"skip-btn-new\">Skip</button>\n          </div>\n        )}\n\n        {canExchange && (\n          <div className=\"exchange-controls\">\n            <button \n              onClick={handleOpenExchange}\n              className=\"exchange-btn\"\n            >\n              Exchange Cards ({gameState.tree.length} available)\n            </button>\n            <button onClick={handleSkipExchange} className=\"skip-exchange-btn\">\n              Skip Exchange\n            </button>\n          </div>\n        )}\n\n        {canExchangeTrump && (\n          <div className=\"exchange-controls\">\n            <button \n              onClick={handleOpenTrumpExchange}\n              className=\"exchange-btn\"\n            >\n              Exchange Trump Card\n            </button>\n            <button onClick={handleSkipTrumpExchange} className=\"skip-exchange-btn\">\n              Skip Trump Exchange\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Exchange Modal */}\n      {showExchangeModal && (\n        <div className=\"exchange-modal-overlay\">\n          <div className=\"exchange-modal\">\n            <h3>{isTrumpExchange ? 'Exchange Trump Card' : 'Exchange Cards'}</h3>\n            {isTrumpExchange && gameState.trumpCard && (\n              <div className=\"trump-card-display\">\n                <div className=\"card trump-new\">\n                  <span className={`card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {gameState.trumpCard.rank}\n                  </span>\n                  <span className={`card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {getSuitSymbol(gameState.trumpCard.suit)}\n                  </span>\n                </div>\n                <div className=\"trump-label\">Trump Card</div>\n              </div>\n            )}\n            <p>\n              {isTrumpExchange \n                ? `Select one card to exchange with the trump card (${gameState.trumpCard?.rank} of ${gameState.trumpCard?.suit})`\n                : `Select cards to exchange with the tree. You can exchange up to ${gameState.tree.length} cards.`\n              }\n            </p>\n            <div className=\"exchange-cards-preview\">\n              {Array.isArray(updatedCurrentPlayer.hand) && updatedCurrentPlayer.hand.map((card, index) => {\n                const isSelected = selectedCardsForExchange.includes(index);\n                const maxReached = !isTrumpExchange && selectedCardsForExchange.length >= gameState.tree.length && !isSelected;\n                \n                return (\n                  <button\n                    key={`${card.suit}-${card.rank}-${index}`}\n                    className={`card exchange-card ${isSelected ? 'selected' : ''} ${maxReached ? 'disabled' : ''}`}\n                    onClick={() => handleCardSelectForExchange(index)}\n                    disabled={maxReached}\n                    title={maxReached ? `Cannot select more than ${gameState.tree.length} cards` : ''}\n                  >\n                    <span className={`card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                      {card.rank}\n                    </span>\n                    <span className={`card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                      {getSuitSymbol(card.suit)}\n                    </span>\n                  </button>\n                );\n              })}\n            </div>\n            <div className=\"exchange-modal-buttons\">\n              <button \n                onClick={handleExchangeCards}\n                disabled={selectedCardsForExchange.length === 0 || (!isTrumpExchange && selectedCardsForExchange.length > gameState.tree.length)}\n                className=\"confirm-exchange-btn\"\n              >\n                {isTrumpExchange \n                  ? `Exchange ${selectedCardsForExchange.length} Card`\n                  : `Exchange ${selectedCardsForExchange.length} Cards (max ${gameState.tree.length})`\n                }\n              </button>\n              <button onClick={handleSkipExchange} className=\"skip-exchange-btn\">\n                {isTrumpExchange ? 'Skip Trump Exchange' : 'Skip Exchange'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Score Overlay */}\n      {gameState.gamePhase === 'round_finished' && gameState.roundScores.length > 0 && (\n        <div className=\"score-overlay-overlay\">\n          <div className=\"score-overlay\">\n            <h3>Round {gameState.roundScores[gameState.roundScores.length - 1].roundNumber} Results</h3>\n            <div className=\"score-results\">\n              {gameState.roundScores[gameState.roundScores.length - 1].playerScores.map((playerScore, index) => (\n                <div key={playerScore.playerId} className={`score-row ${playerScore.playerId === gameState.roundScores[gameState.roundScores.length - 1].winner ? 'winner' : ''}`}>\n                  <div className=\"player-name\">{playerScore.playerName}</div>\n                  <div className=\"score-details\">\n                    <span className=\"previous-score\">{playerScore.previousScore}</span>\n                    <span className=\"arrow\">→</span>\n                    <span className=\"new-score\">{playerScore.newScore}</span>\n                    <span className=\"houses-built\">({playerScore.housesBuilt} houses)</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"round-winner\">\n              🏆 {gameState.players.find(p => p.id === gameState.roundScores[gameState.roundScores.length - 1].winner)?.name} won the round!\n            </div>\n            <button \n              onClick={handleDismissScoreOverlay} \n              className=\"dismiss-score-btn\"\n              disabled={!socket}\n            >\n              {!socket ? 'Reconnecting...' : 'Continue to Next Round'}\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Chat Toggle */}\n      <button \n        onClick={() => setShowChat(!showChat)} \n        className=\"chat-toggle-btn\"\n      >\n        💬\n      </button>\n\n      {/* Chat Panel */}\n      {showChat && (\n        <div className=\"chat-panel\">\n          <div className=\"chat-header\">\n            <h3>Chat</h3>\n            <button onClick={() => setShowChat(false)} className=\"close-chat\">×</button>\n          </div>\n          <div className=\"chat-messages-new\">\n            {gameState.chatMessages.map((message: ChatMessage) => (\n              <div key={message.id} className={`chat-message-new ${message.type}`}>\n                <span className=\"message-sender\">{message.playerName}:</span>\n                <span className=\"message-text\">{message.message}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"chat-input-new\">\n            <input\n              type=\"text\"\n              placeholder=\"Type a message...\"\n              value={chatMessage}\n              onChange={(e) => setChatMessage(e.target.value)}\n              onKeyDown={handleKeyPress}\n              className=\"message-input-new\"\n            />\n            <button onClick={handleSendChat} className=\"send-btn-new\">Send</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameRoom;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAGlD,SAASC,aAAa,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAKJ,GAAGA,CAAC;EAAEC,MAAM;EAAEC,SAAS;EAAEC,aAAa;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,uBAAA,EAAAC,uBAAA,EAAAC,uBAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EAC1D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC8B,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAW,EAAE,CAAC;EAChE,MAAM,CAACgC,QAAQ,EAAEC,WAAW,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACkC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGnC,QAAQ,CAAW,EAAE,CAAC;EACtF,MAAM,CAACoC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACsC,eAAe,EAAEC,kBAAkB,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACwC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzC,QAAQ,CAAS,EAAE,CAAC;EACpE,MAAM,CAAC0C,SAAS,EAAEC,YAAY,CAAC,GAAG3C,QAAQ,CAAW,EAAE,CAAC;EACxD,MAAM,CAAC4C,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG7C,QAAQ,CAAgB,IAAI,CAAC;EAC7E,MAAM,CAAC8C,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/C,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAMgD,iBAAiB,GAAGzC,SAAS,CAAC0C,OAAO,CAACC,SAAS,CAACC,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAK5C,aAAa,CAAC4C,EAAE,CAAC;EAC/F,MAAMC,cAAc,GAAGtD,KAAK,CAACuD,MAAM,CAAC/C,SAAS,CAAC0C,OAAO,CAAC;;EAEtD;EACA,MAAMM,oBAAoB,GAAGhD,SAAS,CAAC0C,OAAO,CAACO,IAAI,CAACL,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAK5C,aAAa,CAAC4C,EAAE,CAAC,IAAI5C,aAAa;;EAE9G;EACAP,SAAS,CAAC,MAAM;IACd,IAAIwD,KAAK,CAACC,OAAO,CAACH,oBAAoB,CAACI,IAAI,CAAC,EAAE;MAC5C;MACAhB,YAAY,CAACiB,SAAS,IAAI;QACxB,MAAMC,SAAS,GAAGN,oBAAoB,CAACI,IAAa;QACpD,MAAMG,QAAQ,GAAGF,SAAS,CAACG,MAAM,CAACC,KAAK,IAAIA,KAAK,GAAGH,SAAS,CAACI,MAAM,CAAC;QACpE;QACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;UACzC,IAAI,CAACJ,QAAQ,CAACK,QAAQ,CAACD,CAAC,CAAC,EAAE;YACzBJ,QAAQ,CAACM,IAAI,CAACF,CAAC,CAAC;UAClB;QACF;QACA,OAAOJ,QAAQ;MACjB,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACP,oBAAoB,CAACI,IAAI,CAAC,CAAC;EAE/B1D,SAAS,CAAC,MAAM;IACd,IAAIK,MAAM,IAAIC,SAAS,CAAC8D,SAAS,KAAK,SAAS,IAAIC,QAAQ,EAAE;MAC3DhE,MAAM,CAACiE,IAAI,CAAC,oBAAoB,EAAE;QAAEC,MAAM,EAAEjE,SAAS,CAAC6C;MAAG,CAAC,CAAC;IAC7D;EACF,CAAC,EAAE,CAAC9C,MAAM,EAAEC,SAAS,CAAC8D,SAAS,EAAE9D,SAAS,CAACkE,kBAAkB,EAAElB,oBAAoB,CAACH,EAAE,CAAC,CAAC;EAExFnD,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,MAAM,EAAE;IAEbA,MAAM,CAACoE,EAAE,CAAC,gBAAgB,EAAGC,IAAiD,IAAK;MACjF,IAAIA,IAAI,CAACH,MAAM,KAAKjE,SAAS,CAAC6C,EAAE,EAAE;QAChCrB,gBAAgB,CAAC4C,IAAI,CAAC7C,aAAa,CAAC;MACtC;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXxB,MAAM,CAACsE,GAAG,CAAC,gBAAgB,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,CAACtE,MAAM,EAAEC,SAAS,CAAC6C,EAAE,EAAE5C,aAAa,CAACqE,IAAI,CAAC,CAAC;;EAE9C;EACA5E,SAAS,CAAC,MAAM;IACd,MAAMO,aAAa,GAAGD,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC;IACrE,IAAIjE,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEsE,KAAK,EAAE;MACxB;MACArC,mBAAmB,CAAC,EAAE,CAAC;IACzB;EACF,CAAC,EAAE,CAAClC,SAAS,CAACkE,kBAAkB,EAAElE,SAAS,CAAC0C,OAAO,CAAC,CAAC;;EAErD;EACAhD,SAAS,CAAC,MAAM;IACd,MAAM8E,WAAW,GAAG1B,cAAc,CAAC2B,OAAO;IAC1C,MAAMC,cAAc,GAAG1E,SAAS,CAAC0C,OAAO;IAExCgC,cAAc,CAACC,OAAO,CAAC,CAAC/B,MAAM,EAAEa,KAAK,KAAK;MACxC,MAAMmB,UAAU,GAAGJ,WAAW,CAACf,KAAK,CAAC;MACrC,IAAIb,MAAM,CAAC2B,KAAK,IACZK,UAAU,IACVA,UAAU,CAACC,YAAY,KAAKC,SAAS,IACrClC,MAAM,CAACiC,YAAY,KAAKC,SAAS,EAAE;QACrC,MAAMC,MAAM,GAAGnC,MAAM,CAACiC,YAAY,GAAG,SAAS,GAAG,UAAU;QAC3D3C,mBAAmB,CAAC,GAAGU,MAAM,CAAC0B,IAAI,IAAIS,MAAM,YAAY,CAAC;;QAEzD;QACAC,UAAU,CAAC,MAAM;UACf9C,mBAAmB,CAAC,EAAE,CAAC;QACzB,CAAC,EAAE,IAAI,CAAC;MACV;;MAEA;MACA,IAAIU,MAAM,CAAC2B,KAAK,IACZK,UAAU,IACV,CAACA,UAAU,CAACK,YAAY,IACxBrC,MAAM,CAACqC,YAAY,EAAE;QACvB,MAAMF,MAAM,GAAG/E,SAAS,CAAC8D,SAAS,KAAK,kBAAkB,GAAG,sBAAsB,GAAG,iBAAiB;QACtG5B,mBAAmB,CAAC,GAAGU,MAAM,CAAC0B,IAAI,IAAIS,MAAM,EAAE,CAAC;;QAE/C;QACAC,UAAU,CAAC,MAAM;UACf9C,mBAAmB,CAAC,EAAE,CAAC;QACzB,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,CAAC;IAEFY,cAAc,CAAC2B,OAAO,GAAGC,cAAc;EACzC,CAAC,EAAE,CAAC1E,SAAS,CAAC0C,OAAO,CAAC,CAAC;EAEvB,MAAMwC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACnF,MAAM,EAAE;IACbA,MAAM,CAACiE,IAAI,CAAC,aAAa,EAAE;MAAEC,MAAM,EAAEjE,SAAS,CAAC6C,EAAE;MAAEsC,OAAO,EAAE;IAAK,CAAC,CAAC;EACrE,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAACrF,MAAM,EAAE;IACbA,MAAM,CAACiE,IAAI,CAAC,aAAa,EAAE;MAAEC,MAAM,EAAEjE,SAAS,CAAC6C,EAAE;MAAEsC,OAAO,EAAE;IAAM,CAAC,CAAC;EACtE,CAAC;EAED,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACtF,MAAM,EAAE;IACbA,MAAM,CAACiE,IAAI,CAAC,YAAY,EAAE;MAAEC,MAAM,EAAEjE,SAAS,CAAC6C;IAAG,CAAC,CAAC;EACrD,CAAC;EAED,MAAMyC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACvF,MAAM,EAAE;IACbA,MAAM,CAACiE,IAAI,CAAC,YAAY,EAAE;MAAEC,MAAM,EAAEjE,SAAS,CAAC6C;IAAG,CAAC,CAAC;EACrD,CAAC;EAED,MAAM0C,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACxF,MAAM,EAAE;IACbA,MAAM,CAACiE,IAAI,CAAC,WAAW,EAAE;MAAEC,MAAM,EAAEjE,SAAS,CAAC6C;IAAG,CAAC,CAAC;EACpD,CAAC;EAED,MAAM2C,cAAc,GAAIC,SAAiB,IAAK;IAC5C,IAAI,CAAC1F,MAAM,EAAE;IACbA,MAAM,CAACiE,IAAI,CAAC,WAAW,EAAE;MAAEC,MAAM,EAAEjE,SAAS,CAAC6C,EAAE;MAAE4C;IAAU,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMC,2BAA2B,GAAID,SAAiB,IAAK;IACzD7D,2BAA2B,CAAC+D,IAAI,IAAI;MAClC,IAAIA,IAAI,CAAC/B,QAAQ,CAAC6B,SAAS,CAAC,EAAE;QAC5B,OAAOE,IAAI,CAACnC,MAAM,CAACC,KAAK,IAAIA,KAAK,KAAKgC,SAAS,CAAC;MAClD,CAAC,MAAM;QACL,IAAI1D,eAAe,EAAE;UACnB;UACA,OAAO,CAAC0D,SAAS,CAAC;QACpB,CAAC,MAAM;UACL;UACA,MAAMG,eAAe,GAAG5F,SAAS,CAAC6F,IAAI,CAACnC,MAAM;UAC7C,IAAIiC,IAAI,CAACjC,MAAM,IAAIkC,eAAe,EAAE;YAClC;YACA,OAAOD,IAAI;UACb,CAAC,MAAM;YACL,OAAO,CAAC,GAAGA,IAAI,EAAEF,SAAS,CAAC;UAC7B;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMK,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAI,CAAC/F,MAAM,IAAI4B,wBAAwB,CAAC+B,MAAM,KAAK,CAAC,EAAE;IAEtD,IAAI3B,eAAe,EAAE;MACnB;MACAhC,MAAM,CAACiE,IAAI,CAAC,gBAAgB,EAAE;QAC5BC,MAAM,EAAEjE,SAAS,CAAC6C,EAAE;QACpB4C,SAAS,EAAE9D,wBAAwB,CAAC,CAAC;MACvC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,MAAMiE,eAAe,GAAG5F,SAAS,CAAC6F,IAAI,CAACnC,MAAM;MAC7C,IAAI/B,wBAAwB,CAAC+B,MAAM,GAAGkC,eAAe,EAAE;QACrDG,OAAO,CAACC,IAAI,CAAC,mBAAmBrE,wBAAwB,CAAC+B,MAAM,oBAAoBkC,eAAe,wBAAwB,CAAC;QAC3H;MACF;MAEA7F,MAAM,CAACiE,IAAI,CAAC,gBAAgB,EAAE;QAC5BC,MAAM,EAAEjE,SAAS,CAAC6C,EAAE;QACpBoD,WAAW,EAAEtE;MACf,CAAC,CAAC;IACJ;IAEAC,2BAA2B,CAAC,EAAE,CAAC;IAC/BE,oBAAoB,CAAC,KAAK,CAAC;IAC3BE,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMkE,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAACnG,MAAM,EAAE;IAEb,IAAIgC,eAAe,EAAE;MACnBhC,MAAM,CAACiE,IAAI,CAAC,gBAAgB,EAAE;QAAEC,MAAM,EAAEjE,SAAS,CAAC6C,EAAE;QAAE4C,SAAS,EAAE,CAAC;MAAE,CAAC,CAAC;IACxE,CAAC,MAAM;MACL1F,MAAM,CAACiE,IAAI,CAAC,gBAAgB,EAAE;QAAEC,MAAM,EAAEjE,SAAS,CAAC6C,EAAE;QAAEoD,WAAW,EAAE;MAAG,CAAC,CAAC;IAC1E;IAEAnE,oBAAoB,CAAC,KAAK,CAAC;IAC3BE,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMmE,kBAAkB,GAAGA,CAAA,KAAM;IAC/BnE,kBAAkB,CAAC,KAAK,CAAC;IACzBJ,2BAA2B,CAAC,EAAE,CAAC;IAC/BE,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMsE,uBAAuB,GAAGA,CAAA,KAAM;IACpCpE,kBAAkB,CAAC,IAAI,CAAC;IACxBJ,2BAA2B,CAAC,EAAE,CAAC;IAC/BE,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMuE,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAI,CAACtG,MAAM,EAAE;IACbA,MAAM,CAACiE,IAAI,CAAC,gBAAgB,EAAE;MAAEC,MAAM,EAAEjE,SAAS,CAAC6C,EAAE;MAAE4C,SAAS,EAAE,CAAC;IAAE,CAAC,CAAC;EACxE,CAAC;EAID,MAAMa,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAACvG,MAAM,EAAE;IACbA,MAAM,CAACiE,IAAI,CAAC,kBAAkB,EAAE;MAAEC,MAAM,EAAEjE,SAAS,CAAC6C;IAAG,CAAC,CAAC;EAC3D,CAAC;EAED,MAAM0D,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACxG,MAAM,IAAI,CAACsB,WAAW,CAACmF,IAAI,CAAC,CAAC,EAAE;IACpCzG,MAAM,CAACiE,IAAI,CAAC,WAAW,EAAE;MAAEC,MAAM,EAAEjE,SAAS,CAAC6C,EAAE;MAAE4D,OAAO,EAAEpF,WAAW,CAACmF,IAAI,CAAC;IAAE,CAAC,CAAC;IAC/ElF,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,MAAMoF,cAAc,GAAIC,CAAsB,IAAK;IACjD,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,IAAI,CAACD,CAAC,CAACE,QAAQ,EAAE;MACpCF,CAAC,CAACG,cAAc,CAAC,CAAC;MAClBP,cAAc,CAAC,CAAC;IAClB;EACF,CAAC;;EAED;EACA,MAAMQ,eAAe,GAAGA,CAACJ,CAAkB,EAAElB,SAAiB,KAAK;IACjEnD,mBAAmB,CAACmD,SAAS,CAAC;IAC9BjD,mBAAmB,CAAC,KAAK,CAAC;IAC1BmE,CAAC,CAACK,YAAY,CAACC,aAAa,GAAG,MAAM;IACrCN,CAAC,CAACK,YAAY,CAACE,OAAO,CAAC,WAAW,EAAEzB,SAAS,CAAC0B,QAAQ,CAAC,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMC,cAAc,GAAIT,CAAkB,IAAK;IAC7CA,CAAC,CAACG,cAAc,CAAC,CAAC;IAClBH,CAAC,CAACK,YAAY,CAACK,UAAU,GAAG,MAAM;;IAElC;IACA,MAAMC,MAAM,GAAGX,CAAC,CAACY,aAA4B;IAC7C,IAAID,MAAM,CAACE,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;MAC/CH,MAAM,CAACE,SAAS,CAACE,GAAG,CAAC,WAAW,CAAC;IACnC;EACF,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAChB,CAAkB,EAAEiB,SAAiB,KAAK;IAC5DjB,CAAC,CAACG,cAAc,CAAC,CAAC;IAClB,IAAIzE,gBAAgB,KAAK,IAAI,EAAE;IAE/BD,YAAY,CAACiB,SAAS,IAAI;MACxB,MAAME,QAAQ,GAAG,CAAC,GAAGF,SAAS,CAAC;MAC/B,MAAMwE,wBAAwB,GAAGtE,QAAQ,CAAClB,gBAAgB,CAAC;;MAE3D;MACAkB,QAAQ,CAACuE,MAAM,CAACzF,gBAAgB,EAAE,CAAC,CAAC;;MAEpC;MACAkB,QAAQ,CAACuE,MAAM,CAACF,SAAS,EAAE,CAAC,EAAEC,wBAAwB,CAAC;MAEvD,OAAOtE,QAAQ;IACjB,CAAC,CAAC;IAEFjB,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAED,MAAMyF,gBAAgB,GAAIpB,CAAkB,IAAK;IAC/CA,CAAC,CAACG,cAAc,CAAC,CAAC;IAClB,IAAIzE,gBAAgB,KAAK,IAAI,IAAI,CAAC2F,WAAW,EAAE;IAE/C,MAAMC,aAAa,GAAG9F,SAAS,CAACE,gBAAgB,CAAC;IACjD,IAAId,aAAa,CAACqC,QAAQ,CAACqE,aAAa,CAAC,EAAE;MACzCzC,cAAc,CAACyC,aAAa,CAAC;IAC/B;IAEA3F,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAED,MAAM4F,aAAa,GAAGA,CAAA,KAAM;IAC1B5F,mBAAmB,CAAC,IAAI,CAAC;IACzBE,mBAAmB,CAAC,KAAK,CAAC;;IAE1B;IACA,MAAM2F,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,iBAAiB,CAAC;IAC1D,IAAIF,QAAQ,EAAE;MACZA,QAAQ,CAACX,SAAS,CAACc,MAAM,CAAC,WAAW,CAAC;IACxC;EACF,CAAC;EAED,MAAMvE,QAAQ,GAAG,EAAA3D,qBAAA,GAAAJ,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAA9D,qBAAA,uBAA/CA,qBAAA,CAAiDyC,EAAE,MAAKG,oBAAoB,CAACH,EAAE;EAChG,MAAM0F,eAAe,GAAGvI,SAAS,CAAC8D,SAAS,KAAK,SAAS,IAAId,oBAAoB,CAAC6B,YAAY,KAAKC,SAAS,IAAIf,QAAQ;EACxH,MAAMyE,WAAW,GAAGxI,SAAS,CAAC8D,SAAS,KAAK,YAAY,IAAId,oBAAoB,CAAC6B,YAAY,KAAK,IAAI,IAAI,CAAC7B,oBAAoB,CAACiC,YAAY,IAAIlB,QAAQ;EACxJ,MAAM0E,gBAAgB,GAAGzI,SAAS,CAAC8D,SAAS,KAAK,kBAAkB,IAAId,oBAAoB,CAAC6B,YAAY,KAAK,IAAI,IAAI7B,oBAAoB,CAAC0F,QAAQ,IAAI,EAAArI,sBAAA,GAAAL,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAA7D,sBAAA,uBAA/CA,sBAAA,CAAiDwC,EAAE,MAAKG,oBAAoB,CAACH,EAAE;EACrO,MAAMmF,WAAW,GAAGhI,SAAS,CAAC8D,SAAS,KAAK,SAAS,IAAId,oBAAoB,CAAC6B,YAAY,KAAK,IAAI,IAAId,QAAQ;;EAI/G;EACA,MAAM4E,iBAAiB,GAAGA,CAAClF,KAAa,EAAEmF,YAAoB,EAAEnG,iBAAyB,KAAK;IAC5F;IACA,IAAIoG,aAAa,GAAGpF,KAAK,GAAGhB,iBAAiB;IAC7C,IAAIoG,aAAa,GAAG,CAAC,EAAE;MACrBA,aAAa,IAAID,YAAY;IAC/B;;IAEA;IACA,MAAME,KAAK,GAAID,aAAa,GAAG,GAAG,GAAID,YAAY,GAAG,EAAE,CAAC,CAAC;;IAEzD;IACA,MAAMG,UAAU,GAAG,GAAG;IACtB,MAAMC,MAAM,GAAGJ,YAAY,IAAI,CAAC,GAAGG,UAAU,GAAGA,UAAU,GAAG,CAACH,YAAY,GAAG,CAAC,IAAI,EAAE;IAEpF,MAAMK,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAEL,KAAK,GAAGI,IAAI,CAACE,EAAE,GAAI,GAAG,CAAC,GAAGJ,MAAM;IACpD,MAAMK,CAAC,GAAGH,IAAI,CAACI,GAAG,CAAER,KAAK,GAAGI,IAAI,CAACE,EAAE,GAAI,GAAG,CAAC,GAAGJ,MAAM;IAEpD,OAAO;MAAEC,CAAC;MAAEI;IAAE,CAAC;EACjB,CAAC;EAED,oBACExJ,OAAA;IAAK0J,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAE5B3J,OAAA;MAAK0J,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B3J,OAAA;QAAK0J,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB3J,OAAA;UAAM0J,SAAS,EAAC,iBAAiB;UAAAC,QAAA,EAAExJ,SAAS,CAAC8D,SAAS,CAAC2F,OAAO,CAAC,GAAG,EAAE,GAAG;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAChFhK,OAAA;UAAM0J,SAAS,EAAC,UAAU;UAAAC,QAAA,GAAC,eAAG,EAACxJ,SAAS,CAAC0C,OAAO,CAACc,MAAM,CAACsG,CAAC,IAAIA,CAAC,CAACvF,KAAK,CAAC,CAACb,MAAM,EAAC,OAAK;QAAA;UAAAgG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtF,CAAC,eACNhK,OAAA;QAAK0J,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC7B3J,OAAA;UACE0J,SAAS,EAAC,sBAAsB;UAChCQ,OAAO,EAAEA,CAAA,KAAM;YACbC,SAAS,CAACC,SAAS,CAACC,SAAS,CAAClK,SAAS,CAAC6C,EAAE,CAAC;YAC3C;YACA,MAAMsH,MAAM,GAAG/B,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;YAC9D,IAAI8B,MAAM,EAAE;cACV,MAAMC,YAAY,GAAGD,MAAM,CAACE,WAAW;cACvCF,MAAM,CAACE,WAAW,GAAG,SAAS;cAC9BF,MAAM,CAAC3C,SAAS,CAACE,GAAG,CAAC,QAAQ,CAAC;cAC9B1C,UAAU,CAAC,MAAM;gBACfmF,MAAM,CAACE,WAAW,GAAGD,YAAY;gBACjCD,MAAM,CAAC3C,SAAS,CAACc,MAAM,CAAC,QAAQ,CAAC;cACnC,CAAC,EAAE,IAAI,CAAC;YACV;UACF,CAAE;UACFgC,KAAK,EAAC,uBAAuB;UAAAd,QAAA,GAC9B,QACO,EAACxJ,SAAS,CAAC6C,EAAE;QAAA;UAAA6G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACNhK,OAAA;QAAQkK,OAAO,EAAE7J,WAAY;QAACqJ,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxE,CAAC,eAGNhK,OAAA;MAAK0J,SAAS,EAAC,sBAAsB;MAAAC,QAAA,eACnC3J,OAAA;QAAK0J,SAAS,EAAC,YAAY;QAAAC,QAAA,gBAEzB3J,OAAA;UACE0J,SAAS,EAAE,gBAAgBvB,WAAW,GAAG,gBAAgB,GAAG,EAAE,EAAG;UACjE,cAAYA,WAAW,GAAG,gBAAgB,GAAGlD,SAAU;UACvDyF,UAAU,EAAEvC,WAAW,GAAGZ,cAAc,GAAGtC,SAAU;UACrD0F,WAAW,EAAG7D,CAAC,IAAK;YAClB,IAAIqB,WAAW,IAAI,CAACrB,CAAC,CAACY,aAAa,CAACE,QAAQ,CAACd,CAAC,CAAC8D,aAAqB,CAAC,EAAE;cACrE9D,CAAC,CAACY,aAAa,CAACC,SAAS,CAACc,MAAM,CAAC,WAAW,CAAC;YAC/C;UACF,CAAE;UACFoC,MAAM,EAAE1C,WAAW,GAAIrB,CAAC,IAAKoB,gBAAgB,CAACpB,CAAC,CAAC,GAAG7B,SAAU;UAC7D6F,SAAS,EAAE3C,WAAW,GAAIrB,CAAC,IAAKA,CAAC,CAACG,cAAc,CAAC,CAAC,GAAGhC,SAAU;UAC/D8F,YAAY,EAAE5C,WAAW,GAAIrB,CAAC,IAAKA,CAAC,CAACG,cAAc,CAAC,CAAC,GAAGhC,SAAU;UAClE+F,WAAW,EAAE7C,WAAW,GAAIrB,CAAC,IAAKA,CAAC,CAACG,cAAc,CAAC,CAAC,GAAGhC,SAAU;UAAA0E,QAAA,GAGhExJ,SAAS,CAAC8K,SAAS,iBAClBjL,OAAA;YAAK0J,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC7B3J,OAAA;cAAK0J,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC7B3J,OAAA;gBAAM0J,SAAS,EAAE,aAAavJ,SAAS,CAAC8K,SAAS,CAACC,IAAI,KAAK,QAAQ,IAAI/K,SAAS,CAAC8K,SAAS,CAACC,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;gBAAAvB,QAAA,EAChIxJ,SAAS,CAAC8K,SAAS,CAACE;cAAI;gBAAAtB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACrB,CAAC,eACPhK,OAAA;gBAAM0J,SAAS,EAAE,aAAavJ,SAAS,CAAC8K,SAAS,CAACC,IAAI,KAAK,QAAQ,IAAI/K,SAAS,CAAC8K,SAAS,CAACC,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;gBAAAvB,QAAA,EAChI7J,aAAa,CAACK,SAAS,CAAC8K,SAAS,CAACC,IAAI;cAAC;gBAAArB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC,eACNhK,OAAA;cAAK0J,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAC;YAAK;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CACN,eAGDhK,OAAA;YAAK0J,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACzB3J,OAAA;cAAK0J,SAAS,EAAC;YAAgB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACtChK,OAAA;cAAK0J,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAExJ,SAAS,CAAC6F,IAAI,CAACnC;YAAM;cAAAgG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtD,CAAC,EAGL7J,SAAS,CAACiL,YAAY,CAACvH,MAAM,GAAG,CAAC,iBAChC7D,OAAA;YAAK0J,SAAS,EAAC,mBAAmB;YAAAC,QAAA,gBAChC3J,OAAA;cAAK0J,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAC;YAAa;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAChDhK,OAAA;cAAK0J,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAC7BxJ,SAAS,CAACiL,YAAY,CAACC,GAAG,CAAC,CAACC,SAAS,EAAE1H,KAAK,kBAC3C5D,OAAA;gBAA0F0J,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAClH3J,OAAA;kBAAK0J,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,gBAC9B3J,OAAA;oBAAM0J,SAAS,EAAE,aAAa4B,SAAS,CAACC,IAAI,CAACL,IAAI,KAAK,QAAQ,IAAII,SAAS,CAACC,IAAI,CAACL,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;oBAAAvB,QAAA,EACtH2B,SAAS,CAACC,IAAI,CAACJ;kBAAI;oBAAAtB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAChB,CAAC,eACPhK,OAAA;oBAAM0J,SAAS,EAAE,aAAa4B,SAAS,CAACC,IAAI,CAACL,IAAI,KAAK,QAAQ,IAAII,SAAS,CAACC,IAAI,CAACL,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;oBAAAvB,QAAA,EACtH7J,aAAa,CAACwL,SAAS,CAACC,IAAI,CAACL,IAAI;kBAAC;oBAAArB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC/B,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACJ,CAAC,eACNhK,OAAA;kBAAK0J,SAAS,EAAC,kBAAkB;kBAAAC,QAAA,EAAE2B,SAAS,CAACE;gBAAU;kBAAA3B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA,GATtD,GAAGsB,SAAS,CAACG,QAAQ,IAAIH,SAAS,CAACC,IAAI,CAACL,IAAI,IAAII,SAAS,CAACC,IAAI,CAACJ,IAAI,IAAIvH,KAAK,EAAE;gBAAAiG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAUnF,CACN;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACN,EAGA7J,SAAS,CAACuL,MAAM,CAAC7H,MAAM,GAAG,CAAC,iBAC1B7D,OAAA;YAAK0J,SAAS,EAAC,kBAAkB;YAAAC,QAAA,eAC/B3J,OAAA;cAAK0J,SAAS,EAAC,cAAc;cAAAC,QAAA,GAAC,oBAAkB,EAACxJ,SAAS,CAACuL,MAAM,CAAC7H,MAAM,EAAC,IAAE;YAAA;cAAAgG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9E,CACN,EAGA7J,SAAS,CAAC8D,SAAS,KAAK,SAAS,iBAChCjE,OAAA;YAAK0J,SAAS,EAAC,aAAa;YAAAC,QAAA,GACzB,CAAAlJ,sBAAA,GAAAN,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAA5D,sBAAA,eAA/CA,sBAAA,CAAiDiE,KAAK,GAAG,KAAK,GAAG,EAAE,GAAAhE,sBAAA,GACnEP,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAA3D,sBAAA,uBAA/CA,sBAAA,CAAiD+D,IAAI,EAAC,0BACvD,EAAC,EAAA9D,sBAAA,GAAAR,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAA1D,sBAAA,uBAA/CA,sBAAA,CAAiD+D,KAAK,KAAI,gBAAgB;UAAA;YAAAmF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxE,CACN,EACA7J,SAAS,CAAC8D,SAAS,KAAK,YAAY,iBACnCjE,OAAA;YAAK0J,SAAS,EAAC,aAAa;YAAAC,QAAA,GACzB,CAAA/I,sBAAA,GAAAT,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAAzD,sBAAA,eAA/CA,sBAAA,CAAiD8D,KAAK,GAAG,KAAK,GAAG,EAAE,GAAA7D,sBAAA,GACnEV,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAAxD,sBAAA,uBAA/CA,sBAAA,CAAiD4D,IAAI,EAAC,yBACvD,EAAC,EAAA3D,sBAAA,GAAAX,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAAvD,sBAAA,uBAA/CA,sBAAA,CAAiD4D,KAAK,KAAI,gBAAgB;UAAA;YAAAmF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxE,CACN,EACA7J,SAAS,CAAC8D,SAAS,KAAK,kBAAkB,iBACzCjE,OAAA;YAAK0J,SAAS,EAAC,aAAa;YAAAC,QAAA,GACzB,CAAA5I,sBAAA,GAAAZ,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAAtD,sBAAA,eAA/CA,sBAAA,CAAiD2D,KAAK,GAAG,KAAK,GAAG,EAAE,GAAA1D,sBAAA,GACnEb,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAArD,sBAAA,uBAA/CA,sBAAA,CAAiDyD,IAAI,EAAC,8BACvD,EAAC,EAAAxD,sBAAA,GAAAd,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAApD,sBAAA,uBAA/CA,sBAAA,CAAiDyD,KAAK,KAAI,gBAAgB;UAAA;YAAAmF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxE,CACN,EACA7J,SAAS,CAAC8D,SAAS,KAAK,SAAS,iBAChCjE,OAAA;YAAK0J,SAAS,EAAC,aAAa;YAAAC,QAAA,GACzB,CAAAzI,uBAAA,GAAAf,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAAnD,uBAAA,eAA/CA,uBAAA,CAAiDwD,KAAK,GAAG,KAAK,GAAG,EAAE,GAAAvD,uBAAA,GACnEhB,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAAlD,uBAAA,uBAA/CA,uBAAA,CAAiDsD,IAAI,EAAC,uBACvD,EAAC,EAAArD,uBAAA,GAAAjB,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACkE,kBAAkB,CAAC,cAAAjD,uBAAA,uBAA/CA,uBAAA,CAAiDsD,KAAK,KAAI,gBAAgB;UAAA;YAAAmF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxE,CACN,EAGA5H,gBAAgB,iBACfpC,OAAA;YAAK0J,SAAS,EAAC,yBAAyB;YAAAC,QAAA,EACrCvH;UAAgB;YAAAyH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACd,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,EAGL7J,SAAS,CAAC0C,OAAO,CAACwI,GAAG,CAAC,CAACtI,MAAM,EAAEa,KAAK,KAAK;UACxC,MAAM+H,QAAQ,GAAG7C,iBAAiB,CAAClF,KAAK,EAAEzD,SAAS,CAAC0C,OAAO,CAACgB,MAAM,EAAEjB,iBAAiB,CAAC;UACtF,MAAMgJ,eAAe,GAAG7I,MAAM,CAACC,EAAE,KAAKG,oBAAoB,CAACH,EAAE;UAC7D,MAAM6I,YAAY,GAAG1L,SAAS,CAACkE,kBAAkB,KAAKT,KAAK;UAE3D,oBACE5D,OAAA;YAEE0J,SAAS,EAAE,mBAAmBkC,eAAe,GAAG,gBAAgB,GAAG,EAAE,IAAIC,YAAY,GAAG,aAAa,GAAG,EAAE,EAAG;YAC7GC,KAAK,EAAE;cACL,KAAK,EAAE,GAAGH,QAAQ,CAACvC,CAAC,IAAI;cACxB,KAAK,EAAE,GAAGuC,QAAQ,CAACnC,CAAC;YACtB,CAAyB;YAAAG,QAAA,gBAEzB3J,OAAA;cAAK0J,SAAS,EAAC,eAAe;cAAAC,QAAA,GAC3B5G,MAAM,CAACgJ,MAAM,iBAAI/L,OAAA;gBAAM0J,SAAS,EAAC,OAAO;gBAAAC,QAAA,EAAC;cAAE;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EAClDjH,MAAM,CAAC8F,QAAQ,iBAAI7I,OAAA;gBAAM0J,SAAS,EAAC,aAAa;gBAAAC,QAAA,EAAC;cAAE;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EAC1DjH,MAAM,CAACiJ,OAAO,iBAAIhM,OAAA;gBAAM0J,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAE;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EACxDjH,MAAM,CAAC2B,KAAK,iBAAI1E,OAAA;gBAAM0J,SAAS,EAAC,UAAU;gBAAAC,QAAA,EAAC;cAAE;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACrDhK,OAAA;gBAAK0J,SAAS,EAAC,aAAa;gBAAAC,QAAA,EACzB5G,MAAM,CAAC0B,IAAI,CAACwH,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC;cAAC;gBAAArC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eAENhK,OAAA;cAAK0J,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9B3J,OAAA;gBAAK0J,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,EAAE5G,MAAM,CAAC0B;cAAI;gBAAAoF,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACpDhK,OAAA;gBAAK0J,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,GAAE5G,MAAM,CAACoJ,KAAK,EAAC,IAAE;cAAA;gBAAAtC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACxDhK,OAAA;gBAAK0J,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,GAAC,UAAQ,EAAC5G,MAAM,CAACqJ,WAAW;cAAA;gBAAAvC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClE,CAAC,eAGNhK,OAAA;cAAK0J,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAC7BiC,eAAe;cAAA;cACd;cACA5L,OAAA;gBAAK0J,SAAS,EAAC,YAAY;gBAAAC,QAAA,EACxBtG,KAAK,CAACC,OAAO,CAACP,MAAM,CAACQ,IAAI,CAAC,GAAGjB,SAAS,CAAC+I,GAAG,CAAC,CAACjD,aAAa,EAAEiE,YAAY,KAAK;kBAC3E,MAAMd,IAAI,GAAIxI,MAAM,CAACQ,IAAI,CAAW6E,aAAa,CAAC;kBAClD;kBACA,IAAI,CAACmD,IAAI,EAAE,OAAO,IAAI;kBACtB,oBACEvL,OAAA;oBAEE0J,SAAS,EAAE,kBAAkBhI,aAAa,CAACqC,QAAQ,CAACqE,aAAa,CAAC,GAAG,UAAU,GAAG,EAAE,IAClFD,WAAW,GAAG,SAAS,GAAG,EAAE,IAC1BrG,wBAAwB,CAACiC,QAAQ,CAACqE,aAAa,CAAC,GAAG,uBAAuB,GAAG,EAAE,IACjF5F,gBAAgB,KAAK6J,YAAY,GAAG,UAAU,GAAG,EAAE,EAClD;oBACHC,SAAS,EAAEnE,WAAW,GAAGzG,aAAa,CAACqC,QAAQ,CAACqE,aAAa,CAAC,GAAG,IAAK;oBACtEmE,WAAW,EAAGzF,CAAC,IAAKI,eAAe,CAACJ,CAAC,EAAEuF,YAAY,CAAE;oBACrD3B,UAAU,EAAEnD,cAAe;oBAC3BsD,MAAM,EAAG/D,CAAC,IAAKgB,UAAU,CAAChB,CAAC,EAAEuF,YAAY,CAAE;oBAC3CG,SAAS,EAAEnE,aAAc;oBACzB6B,OAAO,EAAEA,CAAA,KAAM;sBACb,IAAIvB,WAAW,EAAE;wBACf9C,2BAA2B,CAACuC,aAAa,CAAC;sBAC5C;oBACF,CAAE;oBACFqE,QAAQ,EAAEtE,WAAW,IAAI,CAACzG,aAAa,CAACqC,QAAQ,CAACqE,aAAa,CAAE;oBAChE,cAAY,QAAQmD,IAAI,CAACJ,IAAI,OAAOI,IAAI,CAACL,IAAI,EAAG;oBAAAvB,QAAA,gBAEhD3J,OAAA;sBAAM0J,SAAS,EAAE,aAAa6B,IAAI,CAACL,IAAI,KAAK,QAAQ,IAAIK,IAAI,CAACL,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;sBAAAvB,QAAA,EAClG4B,IAAI,CAACJ;oBAAI;sBAAAtB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACN,CAAC,eACPhK,OAAA;sBAAM0J,SAAS,EAAE,aAAa6B,IAAI,CAACL,IAAI,KAAK,QAAQ,IAAIK,IAAI,CAACL,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;sBAAAvB,QAAA,EAClG7J,aAAa,CAACyL,IAAI,CAACL,IAAI;oBAAC;sBAAArB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACrB,CAAC;kBAAA,GAxBF,GAAGuB,IAAI,CAACL,IAAI,IAAIK,IAAI,CAACJ,IAAI,IAAI/C,aAAa,IAAIiE,YAAY,EAAE;oBAAAxC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAyB3D,CAAC;gBAEb,CAAC,CAAC,gBACAhK,OAAA;kBAAK0J,SAAS,EAAC,YAAY;kBAAAC,QAAA,GAAE5G,MAAM,CAACQ,IAAI,EAAC,QAAM;gBAAA;kBAAAsG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK;cACrD;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC;cAAA;cAEN;cACAhK,OAAA;gBAAK0J,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,EAC5BtG,KAAK,CAACC,OAAO,CAACP,MAAM,CAACQ,IAAI,CAAC,GAAGR,MAAM,CAACQ,IAAI,CAAC8H,GAAG,CAAC,CAACqB,CAAC,EAAE9G,SAAS,kBACzD5F,OAAA;kBAAiD0J,SAAS,EAAC;gBAAgB,GAAjE,GAAG3G,MAAM,CAACC,EAAE,cAAc4C,SAAS,EAAE;kBAAAiE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAkC,CAClF,CAAC,gBACAhK,OAAA;kBAAK0J,SAAS,EAAC,YAAY;kBAAAC,QAAA,GAAE5G,MAAM,CAACQ,IAAI,EAAC,QAAM;gBAAA;kBAAAsG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK;cACrD;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE;YACN;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC,eAGNhK,OAAA;cAAK0J,SAAS,EAAC,mBAAmB;cAAAC,QAAA,GAC/B5G,MAAM,CAACuC,OAAO,iBAAItF,OAAA;gBAAM0J,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,EAAC;cAAK;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EAChEjH,MAAM,CAACiC,YAAY,KAAK,IAAI,iBAAIhF,OAAA;gBAAM0J,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,EAAC;cAAO;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EAClFjH,MAAM,CAACiC,YAAY,KAAK,KAAK,iBAAIhF,OAAA;gBAAM0J,SAAS,EAAC,oBAAoB;gBAAAC,QAAA,EAAC;cAAQ;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,EACrFjH,MAAM,CAACqC,YAAY,iBAAIpF,OAAA;gBAAM0J,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,EAAC;cAAS;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3E,CAAC;UAAA,GAnFDjH,MAAM,CAACC,EAAE;YAAA6G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAoFX,CAAC;QAEV,CAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNhK,OAAA;MAAK0J,SAAS,EAAC,mBAAmB;MAAAC,QAAA,GAE/BxJ,SAAS,CAAC8D,SAAS,KAAK,SAAS,IAAI,CAACd,oBAAoB,CAACmC,OAAO,iBACjEtF,OAAA;QAAQkK,OAAO,EAAE7E,WAAY;QAACqE,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACtE,EAEC7J,SAAS,CAAC8D,SAAS,KAAK,SAAS,IAAMd,oBAAoB,CAACmC,OAAO,iBACnEtF,OAAA;QAAQkK,OAAO,EAAE3E,aAAc;QAACmE,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAC5E,EAEA7G,oBAAoB,CAAC4I,MAAM,IAAI5L,SAAS,CAAC8D,SAAS,KAAK,OAAO,iBAC7DjE,OAAA;QAAQkK,OAAO,EAAE1E,eAAgB;QAACkE,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAC/E,EAEAtB,eAAe,iBACd1I,OAAA;QAAK0J,SAAS,EAAC,sBAAsB;QAAAC,QAAA,gBACnC3J,OAAA;UAAQkK,OAAO,EAAEzE,eAAgB;UAACiE,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC1EhK,OAAA;UAAQkK,OAAO,EAAExE,cAAe;UAACgE,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CACN,EAEArB,WAAW,iBACV3I,OAAA;QAAK0J,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChC3J,OAAA;UACEkK,OAAO,EAAE5D,kBAAmB;UAC5BoD,SAAS,EAAC,cAAc;UAAAC,QAAA,GACzB,kBACiB,EAACxJ,SAAS,CAAC6F,IAAI,CAACnC,MAAM,EAAC,aACzC;QAAA;UAAAgG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACThK,OAAA;UAAQkK,OAAO,EAAE7D,kBAAmB;UAACqD,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAEnE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN,EAEApB,gBAAgB,iBACf5I,OAAA;QAAK0J,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChC3J,OAAA;UACEkK,OAAO,EAAE3D,uBAAwB;UACjCmD,SAAS,EAAC,cAAc;UAAAC,QAAA,EACzB;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACThK,OAAA;UAAQkK,OAAO,EAAE1D,uBAAwB;UAACkD,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAExE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAGLhI,iBAAiB,iBAChBhC,OAAA;MAAK0J,SAAS,EAAC,wBAAwB;MAAAC,QAAA,eACrC3J,OAAA;QAAK0J,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7B3J,OAAA;UAAA2J,QAAA,EAAKzH,eAAe,GAAG,qBAAqB,GAAG;QAAgB;UAAA2H,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACpE9H,eAAe,IAAI/B,SAAS,CAAC8K,SAAS,iBACrCjL,OAAA;UAAK0J,SAAS,EAAC,oBAAoB;UAAAC,QAAA,gBACjC3J,OAAA;YAAK0J,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC7B3J,OAAA;cAAM0J,SAAS,EAAE,aAAavJ,SAAS,CAAC8K,SAAS,CAACC,IAAI,KAAK,QAAQ,IAAI/K,SAAS,CAAC8K,SAAS,CAACC,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;cAAAvB,QAAA,EAChIxJ,SAAS,CAAC8K,SAAS,CAACE;YAAI;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrB,CAAC,eACPhK,OAAA;cAAM0J,SAAS,EAAE,aAAavJ,SAAS,CAAC8K,SAAS,CAACC,IAAI,KAAK,QAAQ,IAAI/K,SAAS,CAAC8K,SAAS,CAACC,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;cAAAvB,QAAA,EAChI7J,aAAa,CAACK,SAAS,CAAC8K,SAAS,CAACC,IAAI;YAAC;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACNhK,OAAA;YAAK0J,SAAS,EAAC,aAAa;YAAAC,QAAA,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C,CACN,eACDhK,OAAA;UAAA2J,QAAA,EACGzH,eAAe,GACZ,qDAAAb,oBAAA,GAAoDlB,SAAS,CAAC8K,SAAS,cAAA5J,oBAAA,uBAAnBA,oBAAA,CAAqB8J,IAAI,QAAA7J,qBAAA,GAAOnB,SAAS,CAAC8K,SAAS,cAAA3J,qBAAA,uBAAnBA,qBAAA,CAAqB4J,IAAI,GAAG,GAChH,kEAAkE/K,SAAS,CAAC6F,IAAI,CAACnC,MAAM;QAAS;UAAAgG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEnG,CAAC,eACJhK,OAAA;UAAK0J,SAAS,EAAC,wBAAwB;UAAAC,QAAA,EACpCtG,KAAK,CAACC,OAAO,CAACH,oBAAoB,CAACI,IAAI,CAAC,IAAIJ,oBAAoB,CAACI,IAAI,CAAC8H,GAAG,CAAC,CAACE,IAAI,EAAE3H,KAAK,KAAK;YAC1F,MAAM+I,UAAU,GAAG7K,wBAAwB,CAACiC,QAAQ,CAACH,KAAK,CAAC;YAC3D,MAAMgJ,UAAU,GAAG,CAAC1K,eAAe,IAAIJ,wBAAwB,CAAC+B,MAAM,IAAI1D,SAAS,CAAC6F,IAAI,CAACnC,MAAM,IAAI,CAAC8I,UAAU;YAE9G,oBACE3M,OAAA;cAEE0J,SAAS,EAAE,sBAAsBiD,UAAU,GAAG,UAAU,GAAG,EAAE,IAAIC,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;cAChG1C,OAAO,EAAEA,CAAA,KAAMrE,2BAA2B,CAACjC,KAAK,CAAE;cAClD6I,QAAQ,EAAEG,UAAW;cACrBnC,KAAK,EAAEmC,UAAU,GAAG,2BAA2BzM,SAAS,CAAC6F,IAAI,CAACnC,MAAM,QAAQ,GAAG,EAAG;cAAA8F,QAAA,gBAElF3J,OAAA;gBAAM0J,SAAS,EAAE,aAAa6B,IAAI,CAACL,IAAI,KAAK,QAAQ,IAAIK,IAAI,CAACL,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;gBAAAvB,QAAA,EAClG4B,IAAI,CAACJ;cAAI;gBAAAtB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC,eACPhK,OAAA;gBAAM0J,SAAS,EAAE,aAAa6B,IAAI,CAACL,IAAI,KAAK,QAAQ,IAAIK,IAAI,CAACL,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,OAAO,EAAG;gBAAAvB,QAAA,EAClG7J,aAAa,CAACyL,IAAI,CAACL,IAAI;cAAC;gBAAArB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACrB,CAAC;YAAA,GAXF,GAAGuB,IAAI,CAACL,IAAI,IAAIK,IAAI,CAACJ,IAAI,IAAIvH,KAAK,EAAE;cAAAiG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAYnC,CAAC;UAEb,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNhK,OAAA;UAAK0J,SAAS,EAAC,wBAAwB;UAAAC,QAAA,gBACrC3J,OAAA;YACEkK,OAAO,EAAEjE,mBAAoB;YAC7BwG,QAAQ,EAAE3K,wBAAwB,CAAC+B,MAAM,KAAK,CAAC,IAAK,CAAC3B,eAAe,IAAIJ,wBAAwB,CAAC+B,MAAM,GAAG1D,SAAS,CAAC6F,IAAI,CAACnC,MAAQ;YACjI6F,SAAS,EAAC,sBAAsB;YAAAC,QAAA,EAE/BzH,eAAe,GACZ,YAAYJ,wBAAwB,CAAC+B,MAAM,OAAO,GAClD,YAAY/B,wBAAwB,CAAC+B,MAAM,eAAe1D,SAAS,CAAC6F,IAAI,CAACnC,MAAM;UAAG;YAAAgG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEhF,CAAC,eACThK,OAAA;YAAQkK,OAAO,EAAE7D,kBAAmB;YAACqD,SAAS,EAAC,mBAAmB;YAAAC,QAAA,EAC/DzH,eAAe,GAAG,qBAAqB,GAAG;UAAe;YAAA2H,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAGA7J,SAAS,CAAC8D,SAAS,KAAK,gBAAgB,IAAI9D,SAAS,CAAC0M,WAAW,CAAChJ,MAAM,GAAG,CAAC,iBAC3E7D,OAAA;MAAK0J,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eACpC3J,OAAA;QAAK0J,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5B3J,OAAA;UAAA2J,QAAA,GAAI,QAAM,EAACxJ,SAAS,CAAC0M,WAAW,CAAC1M,SAAS,CAAC0M,WAAW,CAAChJ,MAAM,GAAG,CAAC,CAAC,CAACiJ,WAAW,EAAC,UAAQ;QAAA;UAAAjD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5FhK,OAAA;UAAK0J,SAAS,EAAC,eAAe;UAAAC,QAAA,EAC3BxJ,SAAS,CAAC0M,WAAW,CAAC1M,SAAS,CAAC0M,WAAW,CAAChJ,MAAM,GAAG,CAAC,CAAC,CAACkJ,YAAY,CAAC1B,GAAG,CAAC,CAAC2B,WAAW,EAAEpJ,KAAK,kBAC3F5D,OAAA;YAAgC0J,SAAS,EAAE,aAAasD,WAAW,CAACvB,QAAQ,KAAKtL,SAAS,CAAC0M,WAAW,CAAC1M,SAAS,CAAC0M,WAAW,CAAChJ,MAAM,GAAG,CAAC,CAAC,CAACoJ,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAG;YAAAtD,QAAA,gBAChK3J,OAAA;cAAK0J,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAEqD,WAAW,CAACxB;YAAU;cAAA3B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC3DhK,OAAA;cAAK0J,SAAS,EAAC,eAAe;cAAAC,QAAA,gBAC5B3J,OAAA;gBAAM0J,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,EAAEqD,WAAW,CAACE;cAAa;gBAAArD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACnEhK,OAAA;gBAAM0J,SAAS,EAAC,OAAO;gBAAAC,QAAA,EAAC;cAAC;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAChChK,OAAA;gBAAM0J,SAAS,EAAC,WAAW;gBAAAC,QAAA,EAAEqD,WAAW,CAACG;cAAQ;gBAAAtD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACzDhK,OAAA;gBAAM0J,SAAS,EAAC,cAAc;gBAAAC,QAAA,GAAC,GAAC,EAACqD,WAAW,CAACZ,WAAW,EAAC,UAAQ;cAAA;gBAAAvC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrE,CAAC;UAAA,GAPEgD,WAAW,CAACvB,QAAQ;YAAA5B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQzB,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNhK,OAAA;UAAK0J,SAAS,EAAC,cAAc;UAAAC,QAAA,GAAC,eACzB,GAAApI,qBAAA,GAACpB,SAAS,CAAC0C,OAAO,CAACO,IAAI,CAAC6G,CAAC,IAAIA,CAAC,CAACjH,EAAE,KAAK7C,SAAS,CAAC0M,WAAW,CAAC1M,SAAS,CAAC0M,WAAW,CAAChJ,MAAM,GAAG,CAAC,CAAC,CAACoJ,MAAM,CAAC,cAAA1L,qBAAA,uBAApGA,qBAAA,CAAsGkD,IAAI,EAAC,iBACjH;QAAA;UAAAoF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACNhK,OAAA;UACEkK,OAAO,EAAEkD,yBAA0B;UACnC1D,SAAS,EAAC,mBAAmB;UAC7B+C,QAAQ,EAAE,CAACvM,MAAO;UAAAyJ,QAAA,EAEjB,CAACzJ,MAAM,GAAG,iBAAiB,GAAG;QAAwB;UAAA2J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAGDhK,OAAA;MACEkK,OAAO,EAAEA,CAAA,KAAMrI,WAAW,CAAC,CAACD,QAAQ,CAAE;MACtC8H,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC5B;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGRpI,QAAQ,iBACP5B,OAAA;MAAK0J,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB3J,OAAA;QAAK0J,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1B3J,OAAA;UAAA2J,QAAA,EAAI;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACbhK,OAAA;UAAQkK,OAAO,EAAEA,CAAA,KAAMrI,WAAW,CAAC,KAAK,CAAE;UAAC6H,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC,eACNhK,OAAA;QAAK0J,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC/BxJ,SAAS,CAACkN,YAAY,CAAChC,GAAG,CAAEzE,OAAoB,iBAC/C5G,OAAA;UAAsB0J,SAAS,EAAE,oBAAoB9C,OAAO,CAAC0G,IAAI,EAAG;UAAA3D,QAAA,gBAClE3J,OAAA;YAAM0J,SAAS,EAAC,gBAAgB;YAAAC,QAAA,GAAE/C,OAAO,CAAC4E,UAAU,EAAC,GAAC;UAAA;YAAA3B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC7DhK,OAAA;YAAM0J,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAE/C,OAAO,CAACA;UAAO;YAAAiD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA,GAF/CpD,OAAO,CAAC5D,EAAE;UAAA6G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGf,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNhK,OAAA;QAAK0J,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7B3J,OAAA;UACEsN,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,mBAAmB;UAC/BC,KAAK,EAAEhM,WAAY;UACnBiM,QAAQ,EAAG3G,CAAC,IAAKrF,cAAc,CAACqF,CAAC,CAACW,MAAM,CAAC+F,KAAK,CAAE;UAChD1C,SAAS,EAAEjE,cAAe;UAC1B6C,SAAS,EAAC;QAAmB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC,eACFhK,OAAA;UAAQkK,OAAO,EAAExD,cAAe;UAACgD,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1J,EAAA,CAjvBIL,QAKJ;AAAAyN,EAAA,GALIzN,QAKJ;AA8uBF,eAAeA,QAAQ;AAAC,IAAAyN,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}