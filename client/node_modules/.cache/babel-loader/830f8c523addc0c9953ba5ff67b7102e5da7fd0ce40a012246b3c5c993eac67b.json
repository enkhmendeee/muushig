{"ast":null,"code":"var _jsxFileName = \"/Users/enkhmendeee/muushig/client/src/pages/GameRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getSuitSymbol } from '../utils/gameUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameRoom = ({\n  socket,\n  gameState,\n  currentPlayer,\n  onLeaveGame\n}) => {\n  _s();\n  var _gameState$players$ga, _gameState$players$ga2, _gameState$players$ga3, _gameState$players$ga4, _gameState$players$ga5, _gameState$players$ga6, _gameState$players$ga7, _gameState$players$ga8, _gameState$players$ga9, _gameState$players$ga0, _gameState$players$ga1, _gameState$players$ga10, _gameState$players$ga11, _gameState$players$ga12, _gameState$players$ga13, _gameState$players$ga14, _gameState$trumpCard, _gameState$trumpCard2;\n  const [chatMessage, setChatMessage] = useState('');\n  const [playableCards, setPlayableCards] = useState([]);\n  const [showChat, setShowChat] = useState(false);\n  const [selectedCardsForExchange, setSelectedCardsForExchange] = useState([]);\n  const [showExchangeModal, setShowExchangeModal] = useState(false);\n  const [isTrumpExchange, setIsTrumpExchange] = useState(false);\n  const [botActionMessage, setBotActionMessage] = useState('');\n  const [cardOrder, setCardOrder] = useState([]);\n  const [draggedCardIndex, setDraggedCardIndex] = useState(null);\n  const actualPlayerIndex = gameState.players.findIndex(player => player.id === currentPlayer.id);\n  const prevPlayersRef = React.useRef(gameState.players);\n\n  // Update currentPlayer with latest data from gameState\n  const updatedCurrentPlayer = gameState.players.find(player => player.id === currentPlayer.id) || currentPlayer;\n\n  // Initialize card order when hand changes\n  useEffect(() => {\n    if (Array.isArray(updatedCurrentPlayer.hand)) {\n      setCardOrder(updatedCurrentPlayer.hand.map((_, index) => index));\n    }\n  }, [updatedCurrentPlayer.hand]);\n  useEffect(() => {\n    if (socket && gameState.gamePhase === 'playing' && isMyTurn) {\n      console.log('Fetching playable cards for player turn');\n      socket.emit('get_playable_cards', {\n        gameId: gameState.id\n      });\n    }\n  }, [socket, gameState.gamePhase, gameState.currentPlayerIndex, updatedCurrentPlayer.id]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('playable_cards', data => {\n      if (data.gameId === gameState.id) {\n        setPlayableCards(data.playableCards);\n      }\n    });\n    return () => {\n      socket.off('playable_cards');\n    };\n  }, [socket, gameState.id]);\n\n  // Track bot decisions and show notifications\n  useEffect(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (currentPlayer !== null && currentPlayer !== void 0 && currentPlayer.isBot) {\n      // Clear any existing bot action message when a new bot starts thinking\n      setBotActionMessage('');\n    }\n  }, [gameState.currentPlayerIndex, gameState.players]);\n\n  // Track when bots make decisions\n  useEffect(() => {\n    const prevPlayers = prevPlayersRef.current;\n    const currentPlayers = gameState.players;\n    currentPlayers.forEach((player, index) => {\n      const prevPlayer = prevPlayers[index];\n      if (player.isBot && prevPlayer && prevPlayer.enteredRound === undefined && player.enteredRound !== undefined) {\n        const action = player.enteredRound ? 'entered' : 'declined';\n        setBotActionMessage(`${player.name} ${action} the round`);\n\n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n\n      // Track exchange decisions\n      if (player.isBot && prevPlayer && !prevPlayer.hasExchanged && player.hasExchanged) {\n        const action = gameState.gamePhase === 'trump_exchanging' ? 'exchanged trump card' : 'exchanged cards';\n        setBotActionMessage(`${player.name} ${action}`);\n\n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n    });\n    prevPlayersRef.current = currentPlayers;\n  }, [gameState.players]);\n  const handleReady = () => {\n    if (!socket) return;\n    socket.emit('ready_check', {\n      gameId: gameState.id,\n      isReady: true\n    });\n  };\n  const handleUnready = () => {\n    if (!socket) return;\n    socket.emit('ready_check', {\n      gameId: gameState.id,\n      isReady: false\n    });\n  };\n  const handleStartGame = () => {\n    if (!socket) return;\n    socket.emit('start_game', {\n      gameId: gameState.id\n    });\n  };\n  const handleEnterTurn = () => {\n    if (!socket) return;\n    socket.emit('enter_turn', {\n      gameId: gameState.id\n    });\n  };\n  const handleSkipTurn = () => {\n    if (!socket) return;\n    socket.emit('skip_turn', {\n      gameId: gameState.id\n    });\n  };\n  const handlePlayCard = cardIndex => {\n    if (!socket) return;\n    socket.emit('play_card', {\n      gameId: gameState.id,\n      cardIndex\n    });\n  };\n  const handleCardSelectForExchange = cardIndex => {\n    setSelectedCardsForExchange(prev => {\n      if (prev.includes(cardIndex)) {\n        return prev.filter(index => index !== cardIndex);\n      } else {\n        if (isTrumpExchange) {\n          // For trump exchange, only allow one card selection\n          return [cardIndex];\n        } else {\n          // For regular exchange, limit to tree size\n          const maxExchangeable = gameState.tree.length;\n          if (prev.length >= maxExchangeable) {\n            // If already at max, don't add more cards\n            return prev;\n          } else {\n            return [...prev, cardIndex];\n          }\n        }\n      }\n    });\n  };\n  const handleExchangeCards = () => {\n    if (!socket || selectedCardsForExchange.length === 0) return;\n    if (isTrumpExchange) {\n      // For trump exchange, only exchange the first selected card\n      socket.emit('exchange_trump', {\n        gameId: gameState.id,\n        cardIndex: selectedCardsForExchange[0]\n      });\n    } else {\n      // For regular exchange, validate against tree size\n      const maxExchangeable = gameState.tree.length;\n      if (selectedCardsForExchange.length > maxExchangeable) {\n        console.warn(`Cannot exchange ${selectedCardsForExchange.length} cards when only ${maxExchangeable} are available in tree`);\n        return;\n      }\n      socket.emit('exchange_cards', {\n        gameId: gameState.id,\n        cardIndices: selectedCardsForExchange\n      });\n    }\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n  const handleSkipExchange = () => {\n    if (!socket) return;\n    if (isTrumpExchange) {\n      socket.emit('exchange_trump', {\n        gameId: gameState.id,\n        cardIndex: -1\n      });\n    } else {\n      socket.emit('exchange_cards', {\n        gameId: gameState.id,\n        cardIndices: []\n      });\n    }\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n  const handleOpenExchange = () => {\n    setIsTrumpExchange(false);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n  const handleOpenTrumpExchange = () => {\n    setIsTrumpExchange(true);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n  const handleSkipTrumpExchange = () => {\n    if (!socket) return;\n    socket.emit('exchange_trump', {\n      gameId: gameState.id,\n      cardIndex: -1\n    });\n  };\n  const handleSendChat = () => {\n    if (!socket || !chatMessage.trim()) return;\n    socket.emit('send_chat', {\n      gameId: gameState.id,\n      message: chatMessage.trim()\n    });\n    setChatMessage('');\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendChat();\n    }\n  };\n  const isMyTurn = ((_gameState$players$ga = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga === void 0 ? void 0 : _gameState$players$ga.id) === updatedCurrentPlayer.id;\n  const canMakeDecision = gameState.gamePhase === 'dealing' && updatedCurrentPlayer.enteredRound === undefined && isMyTurn;\n  const canExchange = gameState.gamePhase === 'exchanging' && updatedCurrentPlayer.enteredRound === true && !updatedCurrentPlayer.hasExchanged && isMyTurn;\n  const canExchangeTrump = gameState.gamePhase === 'trump_exchanging' && updatedCurrentPlayer.enteredRound === true && updatedCurrentPlayer.isDealer && ((_gameState$players$ga2 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga2 === void 0 ? void 0 : _gameState$players$ga2.id) === updatedCurrentPlayer.id;\n  const canPlayCard = gameState.gamePhase === 'playing' && updatedCurrentPlayer.enteredRound === true && isMyTurn;\n\n  // Debug card playing state\n  console.log(`Card playing debug:`, {\n    gamePhase: gameState.gamePhase,\n    currentPlayerIndex: gameState.currentPlayerIndex,\n    currentPlayerName: (_gameState$players$ga3 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga3 === void 0 ? void 0 : _gameState$players$ga3.name,\n    myPlayerName: updatedCurrentPlayer.name,\n    myPlayerId: updatedCurrentPlayer.id,\n    currentPlayerId: (_gameState$players$ga4 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga4 === void 0 ? void 0 : _gameState$players$ga4.id,\n    isMyTurn,\n    enteredRound: updatedCurrentPlayer.enteredRound,\n    canPlayCard,\n    playableCards,\n    playableCardsLength: playableCards.length\n  });\n\n  // Calculate player positions around the table\n  const getPlayerPosition = (index, totalPlayers, actualPlayerIndex) => {\n    // Calculate relative position (how many positions away from current player)\n    let relativeIndex = index - actualPlayerIndex;\n    if (relativeIndex < 0) {\n      relativeIndex += totalPlayers;\n    }\n\n    // Position current player at bottom (270 degrees), others relative to that\n    const angle = relativeIndex * 360 / totalPlayers + 90; // Start from bottom\n\n    // Adjust radius based on number of players to prevent overlapping\n    const baseRadius = 250;\n    const radius = totalPlayers <= 3 ? baseRadius : baseRadius + (totalPlayers - 3) * 30;\n    const x = Math.cos(angle * Math.PI / 180) * radius;\n    const y = Math.sin(angle * Math.PI / 180) * radius;\n    return {\n      x,\n      y\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-room-new\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header-new\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"phase-badge-new\",\n          children: gameState.gamePhase.replace('_', ' ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bot-info\",\n          children: [\"\\uD83E\\uDD16 \", gameState.players.filter(p => p.isBot).length, \" Bots\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-id-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"room-badge-clickable\",\n          onClick: () => {\n            navigator.clipboard.writeText(gameState.id);\n            // Optional: Show a brief notification\n            const button = document.querySelector('.room-badge-clickable');\n            if (button) {\n              const originalText = button.textContent;\n              button.textContent = 'Copied!';\n              button.classList.add('copied');\n              setTimeout(() => {\n                button.textContent = originalText;\n                button.classList.remove('copied');\n              }, 2000);\n            }\n          },\n          title: \"Click to copy game ID\",\n          children: [\"Room: \", gameState.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onLeaveGame,\n        className: \"leave-btn-new\",\n        children: \"Leave Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-center\",\n          children: [gameState.trumpCard && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trump-card-new\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card trump-new\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: gameState.trumpCard.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: getSuitSymbol(gameState.trumpCard.suit)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"trump-label\",\n              children: \"Trump\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-card-back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-count\",\n              children: gameState.tree.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this), gameState.currentHouse.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-house-new\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"house-label\",\n              children: \"Current House\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"house-cards-new\",\n              children: gameState.currentHouse.map((houseCard, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"house-card-new\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card house-card\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `card-rank ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`,\n                    children: houseCard.card.rank\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 334,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `card-suit ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`,\n                    children: getSuitSymbol(houseCard.card.suit)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-player-name\",\n                  children: houseCard.playerName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 23\n                }, this)]\n              }, `${houseCard.playerId}-${houseCard.card.suit}-${houseCard.card.rank}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this), gameState.houses.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"completed-houses\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"houses-label\",\n              children: [\"Completed Houses: \", gameState.houses.length, \"/5\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'dealing' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga5 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga5 !== void 0 && _gameState$players$ga5.isBot ? '🤖 ' : '', (_gameState$players$ga6 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga6 === void 0 ? void 0 : _gameState$players$ga6.name, \" is deciding to enter...\", ((_gameState$players$ga7 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga7 === void 0 ? void 0 : _gameState$players$ga7.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'exchanging' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga8 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga8 !== void 0 && _gameState$players$ga8.isBot ? '🤖 ' : '', (_gameState$players$ga9 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga9 === void 0 ? void 0 : _gameState$players$ga9.name, \" is exchanging cards...\", ((_gameState$players$ga0 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga0 === void 0 ? void 0 : _gameState$players$ga0.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'trump_exchanging' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga1 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga1 !== void 0 && _gameState$players$ga1.isBot ? '🤖 ' : '', (_gameState$players$ga10 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga10 === void 0 ? void 0 : _gameState$players$ga10.name, \" is exchanging trump card...\", ((_gameState$players$ga11 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga11 === void 0 ? void 0 : _gameState$players$ga11.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this), gameState.gamePhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: [(_gameState$players$ga12 = gameState.players[gameState.currentPlayerIndex]) !== null && _gameState$players$ga12 !== void 0 && _gameState$players$ga12.isBot ? '🤖 ' : '', (_gameState$players$ga13 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga13 === void 0 ? void 0 : _gameState$players$ga13.name, \" is playing a card...\", ((_gameState$players$ga14 = gameState.players[gameState.currentPlayerIndex]) === null || _gameState$players$ga14 === void 0 ? void 0 : _gameState$players$ga14.isBot) && ' (thinking...)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this), botActionMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bot-action-notification\",\n            children: botActionMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), gameState.players.map((player, index) => {\n          const position = getPlayerPosition(index, gameState.players.length, actualPlayerIndex);\n          const isCurrentPlayer = player.id === updatedCurrentPlayer.id;\n          const isActiveTurn = gameState.currentPlayerIndex === index;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `player-position ${isCurrentPlayer ? 'current-player' : ''} ${isActiveTurn ? 'active-turn' : ''}`,\n            style: {\n              '--x': `${position.x}px`,\n              '--y': `${position.y}px`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar\",\n              children: [player.isHost && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"crown\",\n                children: \"\\uD83D\\uDC51\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 37\n              }, this), player.isDealer && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"dealer-icon\",\n                children: \"\\uD83C\\uDFAF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 39\n              }, this), player.isMouth && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mouth-icon\",\n                children: \"\\uD83D\\uDC44\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 38\n              }, this), player.isBot && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"bot-icon\",\n                children: \"\\uD83E\\uDD16\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 36\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar-icon\",\n                children: player.name.charAt(0).toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-info-new\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-name-new\",\n                children: player.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-score-new\",\n                children: [player.score, \"/-\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player-houses-new\",\n                children: [\"Houses: \", player.housesBuilt]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-hand-new\",\n              children: isCurrentPlayer ?\n              /*#__PURE__*/\n              // Show actual cards for current player\n              _jsxDEV(\"div\", {\n                className: \"hand-cards\",\n                children: Array.isArray(player.hand) ? player.hand.map((card, cardIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `card hand-card ${playableCards.includes(cardIndex) ? 'playable' : ''} ${canPlayCard ? 'my-turn' : ''} ${selectedCardsForExchange.includes(cardIndex) ? 'selected-for-exchange' : ''}`,\n                  onClick: () => {\n                    console.log(`Card clicked: index=${cardIndex}, canExchange=${canExchange}, isMyTurn=${isMyTurn}, canPlayCard=${canPlayCard}, playableCards=${playableCards}`);\n                    if (canExchange) {\n                      handleCardSelectForExchange(cardIndex);\n                    } else if (canPlayCard && playableCards.includes(cardIndex)) {\n                      handlePlayCard(cardIndex);\n                    }\n                  },\n                  disabled: !canPlayCard && !canExchange || canPlayCard && !playableCards.includes(cardIndex),\n                  \"aria-label\": `Play ${card.rank} of ${card.suit}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                    children: card.rank\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                    children: getSuitSymbol(card.suit)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 27\n                  }, this)]\n                }, `${card.suit}-${card.rank}-${cardIndex}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 25\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-count\",\n                  children: [player.hand, \" cards\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 21\n              }, this) :\n              /*#__PURE__*/\n              // Show card backs for other players\n              _jsxDEV(\"div\", {\n                className: \"opponent-cards\",\n                children: Array.isArray(player.hand) ? player.hand.map((_, cardIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card card-back\"\n                }, `${player.id}-card-back-${cardIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 461,\n                  columnNumber: 25\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-count\",\n                  children: [player.hand, \" cards\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-status-new\",\n              children: [player.isReady && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ready-badge-new\",\n                children: \"Ready\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 38\n              }, this), player.enteredRound === true && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"entered-badge-new\",\n                children: \"Entered\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 52\n              }, this), player.enteredRound === false && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"declined-badge-new\",\n                children: \"Declined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 53\n              }, this), player.hasExchanged && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"exchanged-badge-new\",\n                children: \"Exchanged\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 43\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this)]\n          }, player.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls-new\",\n      children: [gameState.gamePhase === 'waiting' && !updatedCurrentPlayer.isReady && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReady,\n        className: \"ready-btn-new\",\n        children: \"Ready\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }, this), gameState.gamePhase === 'waiting' && updatedCurrentPlayer.isReady && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUnready,\n        className: \"unready-btn-new\",\n        children: \"Unready\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 11\n      }, this), updatedCurrentPlayer.isHost && gameState.gamePhase === 'ready' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartGame,\n        className: \"start-btn-new\",\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }, this), canMakeDecision && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"decision-buttons-new\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEnterTurn,\n          className: \"enter-btn-new\",\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSkipTurn,\n          className: \"skip-btn-new\",\n          children: \"Skip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 11\n      }, this), canExchange && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOpenExchange,\n          className: \"exchange-btn\",\n          children: [\"Exchange Cards (\", gameState.tree.length, \" available)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSkipExchange,\n          className: \"skip-exchange-btn\",\n          children: \"Skip Exchange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this), canExchangeTrump && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleOpenTrumpExchange,\n          className: \"exchange-btn\",\n          children: \"Exchange Trump Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSkipTrumpExchange,\n          className: \"skip-exchange-btn\",\n          children: \"Skip Trump Exchange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 7\n    }, this), showExchangeModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exchange-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: isTrumpExchange ? 'Exchange Trump Card' : 'Exchange Cards'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 13\n        }, this), isTrumpExchange && gameState.trumpCard && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trump-card-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card trump-new\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n              children: gameState.trumpCard.rank\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`,\n              children: getSuitSymbol(gameState.trumpCard.suit)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trump-label\",\n            children: \"Trump Card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isTrumpExchange ? `Select one card to exchange with the trump card (${(_gameState$trumpCard = gameState.trumpCard) === null || _gameState$trumpCard === void 0 ? void 0 : _gameState$trumpCard.rank} of ${(_gameState$trumpCard2 = gameState.trumpCard) === null || _gameState$trumpCard2 === void 0 ? void 0 : _gameState$trumpCard2.suit})` : `Select cards to exchange with the tree. You can exchange up to ${gameState.tree.length} cards.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exchange-cards-preview\",\n          children: Array.isArray(updatedCurrentPlayer.hand) && updatedCurrentPlayer.hand.map((card, index) => {\n            const isSelected = selectedCardsForExchange.includes(index);\n            const maxReached = !isTrumpExchange && selectedCardsForExchange.length >= gameState.tree.length && !isSelected;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `card exchange-card ${isSelected ? 'selected' : ''} ${maxReached ? 'disabled' : ''}`,\n              onClick: () => handleCardSelectForExchange(index),\n              disabled: maxReached,\n              title: maxReached ? `Cannot select more than ${gameState.tree.length} cards` : '',\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: card.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`,\n                children: getSuitSymbol(card.suit)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 21\n              }, this)]\n            }, `${card.suit}-${card.rank}-${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exchange-modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleExchangeCards,\n            disabled: selectedCardsForExchange.length === 0 || !isTrumpExchange && selectedCardsForExchange.length > gameState.tree.length,\n            className: \"confirm-exchange-btn\",\n            children: isTrumpExchange ? `Exchange ${selectedCardsForExchange.length} Card` : `Exchange ${selectedCardsForExchange.length} Cards (max ${gameState.tree.length})`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSkipExchange,\n            className: \"skip-exchange-btn\",\n            children: isTrumpExchange ? 'Skip Trump Exchange' : 'Skip Exchange'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowChat(!showChat),\n      className: \"chat-toggle-btn\",\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this), showChat && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowChat(false),\n          className: \"close-chat\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-new\",\n        children: gameState.chatMessages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message-new ${message.type}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-sender\",\n            children: [message.playerName, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-text\",\n            children: message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 17\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-new\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type a message...\",\n          value: chatMessage,\n          onChange: e => setChatMessage(e.target.value),\n          onKeyDown: handleKeyPress,\n          className: \"message-input-new\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendChat,\n          className: \"send-btn-new\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n};\n_s(GameRoom, \"1y1kbhr+uOn1wpWaFTXizXoKung=\");\n_c = GameRoom;\nexport default GameRoom;\nvar _c;\n$RefreshReg$(_c, \"GameRoom\");","map":{"version":3,"names":["React","useState","useEffect","getSuitSymbol","jsxDEV","_jsxDEV","GameRoom","socket","gameState","currentPlayer","onLeaveGame","_s","_gameState$players$ga","_gameState$players$ga2","_gameState$players$ga3","_gameState$players$ga4","_gameState$players$ga5","_gameState$players$ga6","_gameState$players$ga7","_gameState$players$ga8","_gameState$players$ga9","_gameState$players$ga0","_gameState$players$ga1","_gameState$players$ga10","_gameState$players$ga11","_gameState$players$ga12","_gameState$players$ga13","_gameState$players$ga14","_gameState$trumpCard","_gameState$trumpCard2","chatMessage","setChatMessage","playableCards","setPlayableCards","showChat","setShowChat","selectedCardsForExchange","setSelectedCardsForExchange","showExchangeModal","setShowExchangeModal","isTrumpExchange","setIsTrumpExchange","botActionMessage","setBotActionMessage","cardOrder","setCardOrder","draggedCardIndex","setDraggedCardIndex","actualPlayerIndex","players","findIndex","player","id","prevPlayersRef","useRef","updatedCurrentPlayer","find","Array","isArray","hand","map","_","index","gamePhase","isMyTurn","console","log","emit","gameId","currentPlayerIndex","on","data","off","isBot","prevPlayers","current","currentPlayers","forEach","prevPlayer","enteredRound","undefined","action","name","setTimeout","hasExchanged","handleReady","isReady","handleUnready","handleStartGame","handleEnterTurn","handleSkipTurn","handlePlayCard","cardIndex","handleCardSelectForExchange","prev","includes","filter","maxExchangeable","tree","length","handleExchangeCards","warn","cardIndices","handleSkipExchange","handleOpenExchange","handleOpenTrumpExchange","handleSkipTrumpExchange","handleSendChat","trim","message","handleKeyPress","e","key","shiftKey","preventDefault","canMakeDecision","canExchange","canExchangeTrump","isDealer","canPlayCard","currentPlayerName","myPlayerName","myPlayerId","currentPlayerId","playableCardsLength","getPlayerPosition","totalPlayers","relativeIndex","angle","baseRadius","radius","x","Math","cos","PI","y","sin","className","children","replace","fileName","_jsxFileName","lineNumber","columnNumber","p","onClick","navigator","clipboard","writeText","button","document","querySelector","originalText","textContent","classList","add","remove","title","trumpCard","suit","rank","currentHouse","houseCard","card","playerName","playerId","houses","position","isCurrentPlayer","isActiveTurn","style","isHost","isMouth","charAt","toUpperCase","score","housesBuilt","disabled","isSelected","maxReached","chatMessages","type","placeholder","value","onChange","target","onKeyDown","_c","$RefreshReg$"],"sources":["/Users/enkhmendeee/muushig/client/src/pages/GameRoom.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Socket } from 'socket.io-client';\nimport { Player, GameState, ChatMessage } from '../types/game';\nimport { getSuitSymbol } from '../utils/gameUtils';\n\nconst GameRoom: React.FC<{\n  socket: Socket | null;\n  gameState: GameState;\n  currentPlayer: Player;\n  onLeaveGame: () => void;\n}> = ({ socket, gameState, currentPlayer, onLeaveGame }) => {\n  const [chatMessage, setChatMessage] = useState('');\n  const [playableCards, setPlayableCards] = useState<number[]>([]);\n  const [showChat, setShowChat] = useState(false);\n  const [selectedCardsForExchange, setSelectedCardsForExchange] = useState<number[]>([]);\n  const [showExchangeModal, setShowExchangeModal] = useState(false);\n  const [isTrumpExchange, setIsTrumpExchange] = useState(false);\n  const [botActionMessage, setBotActionMessage] = useState<string>('');\n  const [cardOrder, setCardOrder] = useState<number[]>([]);\n  const [draggedCardIndex, setDraggedCardIndex] = useState<number | null>(null);\n  const actualPlayerIndex = gameState.players.findIndex(player => player.id === currentPlayer.id);\n  const prevPlayersRef = React.useRef(gameState.players);\n  \n  // Update currentPlayer with latest data from gameState\n  const updatedCurrentPlayer = gameState.players.find(player => player.id === currentPlayer.id) || currentPlayer;\n\n  // Initialize card order when hand changes\n  useEffect(() => {\n    if (Array.isArray(updatedCurrentPlayer.hand)) {\n      setCardOrder(updatedCurrentPlayer.hand.map((_, index) => index));\n    }\n  }, [updatedCurrentPlayer.hand]);\n\n  useEffect(() => {\n    if (socket && gameState.gamePhase === 'playing' && isMyTurn) {\n      console.log('Fetching playable cards for player turn');\n      socket.emit('get_playable_cards', { gameId: gameState.id });\n    }\n  }, [socket, gameState.gamePhase, gameState.currentPlayerIndex, updatedCurrentPlayer.id]);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('playable_cards', (data: { gameId: string; playableCards: number[] }) => {\n      if (data.gameId === gameState.id) {\n        setPlayableCards(data.playableCards);\n      }\n    });\n\n    return () => {\n      socket.off('playable_cards');\n    };\n  }, [socket, gameState.id]);\n\n  // Track bot decisions and show notifications\n  useEffect(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (currentPlayer?.isBot) {\n      // Clear any existing bot action message when a new bot starts thinking\n      setBotActionMessage('');\n    }\n  }, [gameState.currentPlayerIndex, gameState.players]);\n\n  // Track when bots make decisions\n  useEffect(() => {\n    const prevPlayers = prevPlayersRef.current;\n    const currentPlayers = gameState.players;\n    \n    currentPlayers.forEach((player, index) => {\n      const prevPlayer = prevPlayers[index];\n      if (player.isBot && \n          prevPlayer && \n          prevPlayer.enteredRound === undefined && \n          player.enteredRound !== undefined) {\n        const action = player.enteredRound ? 'entered' : 'declined';\n        setBotActionMessage(`${player.name} ${action} the round`);\n        \n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n      \n      // Track exchange decisions\n      if (player.isBot && \n          prevPlayer && \n          !prevPlayer.hasExchanged && \n          player.hasExchanged) {\n        const action = gameState.gamePhase === 'trump_exchanging' ? 'exchanged trump card' : 'exchanged cards';\n        setBotActionMessage(`${player.name} ${action}`);\n        \n        // Clear the message after 3 seconds\n        setTimeout(() => {\n          setBotActionMessage('');\n        }, 3000);\n      }\n    });\n    \n    prevPlayersRef.current = currentPlayers;\n  }, [gameState.players]);\n\n  const handleReady = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: true });\n  };\n\n  const handleUnready = () => {\n    if (!socket) return;\n    socket.emit('ready_check', { gameId: gameState.id, isReady: false });\n  };\n\n  const handleStartGame = () => {\n    if (!socket) return;\n    socket.emit('start_game', { gameId: gameState.id });\n  };\n\n  const handleEnterTurn = () => {\n    if (!socket) return;\n    socket.emit('enter_turn', { gameId: gameState.id });\n  };\n\n  const handleSkipTurn = () => {\n    if (!socket) return;\n    socket.emit('skip_turn', { gameId: gameState.id });\n  };\n\n  const handlePlayCard = (cardIndex: number) => {\n    if (!socket) return;\n    socket.emit('play_card', { gameId: gameState.id, cardIndex });\n  };\n\n  const handleCardSelectForExchange = (cardIndex: number) => {\n    setSelectedCardsForExchange(prev => {\n      if (prev.includes(cardIndex)) {\n        return prev.filter(index => index !== cardIndex);\n      } else {\n        if (isTrumpExchange) {\n          // For trump exchange, only allow one card selection\n          return [cardIndex];\n        } else {\n          // For regular exchange, limit to tree size\n          const maxExchangeable = gameState.tree.length;\n          if (prev.length >= maxExchangeable) {\n            // If already at max, don't add more cards\n            return prev;\n          } else {\n            return [...prev, cardIndex];\n          }\n        }\n      }\n    });\n  };\n\n  const handleExchangeCards = () => {\n    if (!socket || selectedCardsForExchange.length === 0) return;\n    \n    if (isTrumpExchange) {\n      // For trump exchange, only exchange the first selected card\n      socket.emit('exchange_trump', { \n        gameId: gameState.id, \n        cardIndex: selectedCardsForExchange[0] \n      });\n    } else {\n      // For regular exchange, validate against tree size\n      const maxExchangeable = gameState.tree.length;\n      if (selectedCardsForExchange.length > maxExchangeable) {\n        console.warn(`Cannot exchange ${selectedCardsForExchange.length} cards when only ${maxExchangeable} are available in tree`);\n        return;\n      }\n      \n      socket.emit('exchange_cards', { \n        gameId: gameState.id, \n        cardIndices: selectedCardsForExchange \n      });\n    }\n    \n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleSkipExchange = () => {\n    if (!socket) return;\n    \n    if (isTrumpExchange) {\n      socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n    } else {\n      socket.emit('exchange_cards', { gameId: gameState.id, cardIndices: [] });\n    }\n    \n    setShowExchangeModal(false);\n    setIsTrumpExchange(false);\n  };\n\n  const handleOpenExchange = () => {\n    setIsTrumpExchange(false);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleOpenTrumpExchange = () => {\n    setIsTrumpExchange(true);\n    setSelectedCardsForExchange([]);\n    setShowExchangeModal(true);\n  };\n\n  const handleSkipTrumpExchange = () => {\n    if (!socket) return;\n    socket.emit('exchange_trump', { gameId: gameState.id, cardIndex: -1 });\n  };\n\n  const handleSendChat = () => {\n    if (!socket || !chatMessage.trim()) return;\n    socket.emit('send_chat', { gameId: gameState.id, message: chatMessage.trim() });\n    setChatMessage('');\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendChat();\n    }\n  };\n\n  const isMyTurn = gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canMakeDecision = gameState.gamePhase === 'dealing' && updatedCurrentPlayer.enteredRound === undefined && isMyTurn;\n  const canExchange = gameState.gamePhase === 'exchanging' && updatedCurrentPlayer.enteredRound === true && !updatedCurrentPlayer.hasExchanged && isMyTurn;\n  const canExchangeTrump = gameState.gamePhase === 'trump_exchanging' && updatedCurrentPlayer.enteredRound === true && updatedCurrentPlayer.isDealer && gameState.players[gameState.currentPlayerIndex]?.id === updatedCurrentPlayer.id;\n  const canPlayCard = gameState.gamePhase === 'playing' && updatedCurrentPlayer.enteredRound === true && isMyTurn;\n\n  // Debug card playing state\n  console.log(`Card playing debug:`, {\n    gamePhase: gameState.gamePhase,\n    currentPlayerIndex: gameState.currentPlayerIndex,\n    currentPlayerName: gameState.players[gameState.currentPlayerIndex]?.name,\n    myPlayerName: updatedCurrentPlayer.name,\n    myPlayerId: updatedCurrentPlayer.id,\n    currentPlayerId: gameState.players[gameState.currentPlayerIndex]?.id,\n    isMyTurn,\n    enteredRound: updatedCurrentPlayer.enteredRound,\n    canPlayCard,\n    playableCards,\n    playableCardsLength: playableCards.length\n  });\n\n  // Calculate player positions around the table\n  const getPlayerPosition = (index: number, totalPlayers: number, actualPlayerIndex: number) => {\n    // Calculate relative position (how many positions away from current player)\n    let relativeIndex = index - actualPlayerIndex;\n    if (relativeIndex < 0) {\n      relativeIndex += totalPlayers;\n    }\n    \n    // Position current player at bottom (270 degrees), others relative to that\n    const angle = (relativeIndex * 360) / totalPlayers + 90; // Start from bottom\n    \n    // Adjust radius based on number of players to prevent overlapping\n    const baseRadius = 250;\n    const radius = totalPlayers <= 3 ? baseRadius : baseRadius + (totalPlayers - 3) * 30;\n    \n    const x = Math.cos((angle * Math.PI) / 180) * radius;\n    const y = Math.sin((angle * Math.PI) / 180) * radius;\n    \n    return { x, y };\n  };\n\n  return (\n    <div className=\"game-room-new\">\n      {/* Header */}\n      <div className=\"game-header-new\">\n        <div className=\"room-info\">\n          <span className=\"phase-badge-new\">{gameState.gamePhase.replace('_', ' ')}</span>\n          <span className=\"bot-info\">🤖 {gameState.players.filter(p => p.isBot).length} Bots</span>\n        </div>\n        <div className=\"room-id-center\">\n          <button \n            className=\"room-badge-clickable\"\n            onClick={() => {\n              navigator.clipboard.writeText(gameState.id);\n              // Optional: Show a brief notification\n              const button = document.querySelector('.room-badge-clickable');\n              if (button) {\n                const originalText = button.textContent;\n                button.textContent = 'Copied!';\n                button.classList.add('copied');\n                setTimeout(() => {\n                  button.textContent = originalText;\n                  button.classList.remove('copied');\n                }, 2000);\n              }\n            }}\n            title=\"Click to copy game ID\"\n          >\n            Room: {gameState.id}\n          </button>\n        </div>\n        <button onClick={onLeaveGame} className=\"leave-btn-new\">Leave Game</button>\n      </div>\n\n      {/* Game Table */}\n      <div className=\"game-table-container\">\n        <div className=\"game-table\">\n          {/* Central Table Area */}\n          <div className=\"table-center\">\n            {/* Trump Card */}\n            {gameState.trumpCard && (\n              <div className=\"trump-card-new\">\n                <div className=\"card trump-new\">\n                  <span className={`card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {gameState.trumpCard.rank}\n                  </span>\n                  <span className={`card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {getSuitSymbol(gameState.trumpCard.suit)}\n                  </span>\n                </div>\n                <div className=\"trump-label\">Trump</div>\n              </div>\n            )}\n\n            {/* Tree Cards */}\n            <div className=\"tree-cards\">\n              <div className=\"tree-card-back\"></div>\n              <div className=\"tree-count\">{gameState.tree.length}</div>\n            </div>\n\n            {/* Current House */}\n            {gameState.currentHouse.length > 0 && (\n              <div className=\"current-house-new\">\n                <div className=\"house-label\">Current House</div>\n                <div className=\"house-cards-new\">\n                  {gameState.currentHouse.map((houseCard, index) => (\n                    <div key={`${houseCard.playerId}-${houseCard.card.suit}-${houseCard.card.rank}-${index}`} className=\"house-card-new\">\n                      <div className=\"card house-card\">\n                        <span className={`card-rank ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                          {houseCard.card.rank}\n                        </span>\n                        <span className={`card-suit ${houseCard.card.suit === 'hearts' || houseCard.card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                          {getSuitSymbol(houseCard.card.suit)}\n                        </span>\n                      </div>\n                      <div className=\"card-player-name\">{houseCard.playerName}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Completed Houses */}\n            {gameState.houses.length > 0 && (\n              <div className=\"completed-houses\">\n                <div className=\"houses-label\">Completed Houses: {gameState.houses.length}/5</div>\n              </div>\n            )}\n\n            {/* Game Status Message */}\n            {gameState.gamePhase === 'dealing' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is deciding to enter...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            {gameState.gamePhase === 'exchanging' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is exchanging cards...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            {gameState.gamePhase === 'trump_exchanging' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is exchanging trump card...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            {gameState.gamePhase === 'playing' && (\n              <div className=\"game-status\">\n                {gameState.players[gameState.currentPlayerIndex]?.isBot ? '🤖 ' : ''}\n                {gameState.players[gameState.currentPlayerIndex]?.name} is playing a card...\n                {gameState.players[gameState.currentPlayerIndex]?.isBot && ' (thinking...)'}\n              </div>\n            )}\n            \n            {/* Bot Action Notification */}\n            {botActionMessage && (\n              <div className=\"bot-action-notification\">\n                {botActionMessage}\n              </div>\n            )}\n          </div>\n\n          {/* Players Around the Table */}\n          {gameState.players.map((player, index) => {\n            const position = getPlayerPosition(index, gameState.players.length, actualPlayerIndex);\n            const isCurrentPlayer = player.id === updatedCurrentPlayer.id;\n            const isActiveTurn = gameState.currentPlayerIndex === index;\n            \n            return (\n              <div\n                key={player.id}\n                className={`player-position ${isCurrentPlayer ? 'current-player' : ''} ${isActiveTurn ? 'active-turn' : ''}`}\n                style={{\n                  '--x': `${position.x}px`,\n                  '--y': `${position.y}px`\n                } as React.CSSProperties}\n              >\n                <div className=\"player-avatar\">\n                  {player.isHost && <span className=\"crown\">👑</span>}\n                  {player.isDealer && <span className=\"dealer-icon\">🎯</span>}\n                  {player.isMouth && <span className=\"mouth-icon\">👄</span>}\n                  {player.isBot && <span className=\"bot-icon\">🤖</span>}\n                  <div className=\"avatar-icon\">\n                    {player.name.charAt(0).toUpperCase()}\n                  </div>\n                </div>\n                \n                <div className=\"player-info-new\">\n                  <div className=\"player-name-new\">{player.name}</div>\n                  <div className=\"player-score-new\">{player.score}/-</div>\n                  <div className=\"player-houses-new\">Houses: {player.housesBuilt}</div>\n                </div>\n\n                                  {/* Player Hand */}\n                <div className=\"player-hand-new\">\n                  {isCurrentPlayer ? (\n                    // Show actual cards for current player\n                    <div className=\"hand-cards\">\n                      {Array.isArray(player.hand) ? player.hand.map((card, cardIndex) => (\n                        <button \n                          key={`${card.suit}-${card.rank}-${cardIndex}`}\n                          className={`card hand-card ${playableCards.includes(cardIndex) ? 'playable' : ''} ${\n                            canPlayCard ? 'my-turn' : ''\n                          } ${selectedCardsForExchange.includes(cardIndex) ? 'selected-for-exchange' : ''}`}\n                          onClick={() => {\n                            console.log(`Card clicked: index=${cardIndex}, canExchange=${canExchange}, isMyTurn=${isMyTurn}, canPlayCard=${canPlayCard}, playableCards=${playableCards}`);\n                            if (canExchange) {\n                              handleCardSelectForExchange(cardIndex);\n                            } else if (canPlayCard && playableCards.includes(cardIndex)) {\n                              handlePlayCard(cardIndex);\n                            }\n                          }}\n                          disabled={(!canPlayCard && !canExchange) || (canPlayCard && !playableCards.includes(cardIndex))}\n                          aria-label={`Play ${card.rank} of ${card.suit}`}\n                        >\n                          <span className={`card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                            {card.rank}\n                          </span>\n                          <span className={`card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                            {getSuitSymbol(card.suit)}\n                          </span>\n                        </button>\n                      )) : (\n                        <div className=\"card-count\">{player.hand} cards</div>\n                      )}\n                    </div>\n                  ) : (\n                    // Show card backs for other players\n                    <div className=\"opponent-cards\">\n                      {Array.isArray(player.hand) ? player.hand.map((_, cardIndex) => (\n                        <div key={`${player.id}-card-back-${cardIndex}`} className=\"card card-back\"></div>\n                      )) : (\n                        <div className=\"card-count\">{player.hand} cards</div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Player Status */}\n                <div className=\"player-status-new\">\n                  {player.isReady && <span className=\"ready-badge-new\">Ready</span>}\n                  {player.enteredRound === true && <span className=\"entered-badge-new\">Entered</span>}\n                  {player.enteredRound === false && <span className=\"declined-badge-new\">Declined</span>}\n                  {player.hasExchanged && <span className=\"exchanged-badge-new\">Exchanged</span>}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Game Controls */}\n      <div className=\"game-controls-new\">\n        \n        {gameState.gamePhase === 'waiting' && !updatedCurrentPlayer.isReady && (\n          <button onClick={handleReady} className=\"ready-btn-new\">Ready</button>\n        )}\n\n        {(gameState.gamePhase === 'waiting' ) && updatedCurrentPlayer.isReady && (\n          <button onClick={handleUnready} className=\"unready-btn-new\">Unready</button>\n        )}\n        \n        {updatedCurrentPlayer.isHost && gameState.gamePhase === 'ready' && (\n          <button onClick={handleStartGame} className=\"start-btn-new\">Start Game</button>\n        )}\n        \n        {canMakeDecision && (\n          <div className=\"decision-buttons-new\">\n            <button onClick={handleEnterTurn} className=\"enter-btn-new\">Enter</button>\n            <button onClick={handleSkipTurn} className=\"skip-btn-new\">Skip</button>\n          </div>\n        )}\n\n        {canExchange && (\n          <div className=\"exchange-controls\">\n            <button \n              onClick={handleOpenExchange}\n              className=\"exchange-btn\"\n            >\n              Exchange Cards ({gameState.tree.length} available)\n            </button>\n            <button onClick={handleSkipExchange} className=\"skip-exchange-btn\">\n              Skip Exchange\n            </button>\n          </div>\n        )}\n\n        {canExchangeTrump && (\n          <div className=\"exchange-controls\">\n            <button \n              onClick={handleOpenTrumpExchange}\n              className=\"exchange-btn\"\n            >\n              Exchange Trump Card\n            </button>\n            <button onClick={handleSkipTrumpExchange} className=\"skip-exchange-btn\">\n              Skip Trump Exchange\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Exchange Modal */}\n      {showExchangeModal && (\n        <div className=\"exchange-modal-overlay\">\n          <div className=\"exchange-modal\">\n            <h3>{isTrumpExchange ? 'Exchange Trump Card' : 'Exchange Cards'}</h3>\n            {isTrumpExchange && gameState.trumpCard && (\n              <div className=\"trump-card-display\">\n                <div className=\"card trump-new\">\n                  <span className={`card-rank ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {gameState.trumpCard.rank}\n                  </span>\n                  <span className={`card-suit ${gameState.trumpCard.suit === 'hearts' || gameState.trumpCard.suit === 'diamonds' ? 'red' : 'black'}`}>\n                    {getSuitSymbol(gameState.trumpCard.suit)}\n                  </span>\n                </div>\n                <div className=\"trump-label\">Trump Card</div>\n              </div>\n            )}\n            <p>\n              {isTrumpExchange \n                ? `Select one card to exchange with the trump card (${gameState.trumpCard?.rank} of ${gameState.trumpCard?.suit})`\n                : `Select cards to exchange with the tree. You can exchange up to ${gameState.tree.length} cards.`\n              }\n            </p>\n            <div className=\"exchange-cards-preview\">\n              {Array.isArray(updatedCurrentPlayer.hand) && updatedCurrentPlayer.hand.map((card, index) => {\n                const isSelected = selectedCardsForExchange.includes(index);\n                const maxReached = !isTrumpExchange && selectedCardsForExchange.length >= gameState.tree.length && !isSelected;\n                \n                return (\n                  <button\n                    key={`${card.suit}-${card.rank}-${index}`}\n                    className={`card exchange-card ${isSelected ? 'selected' : ''} ${maxReached ? 'disabled' : ''}`}\n                    onClick={() => handleCardSelectForExchange(index)}\n                    disabled={maxReached}\n                    title={maxReached ? `Cannot select more than ${gameState.tree.length} cards` : ''}\n                  >\n                    <span className={`card-rank ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                      {card.rank}\n                    </span>\n                    <span className={`card-suit ${card.suit === 'hearts' || card.suit === 'diamonds' ? 'red' : 'black'}`}>\n                      {getSuitSymbol(card.suit)}\n                    </span>\n                  </button>\n                );\n              })}\n            </div>\n            <div className=\"exchange-modal-buttons\">\n              <button \n                onClick={handleExchangeCards}\n                disabled={selectedCardsForExchange.length === 0 || (!isTrumpExchange && selectedCardsForExchange.length > gameState.tree.length)}\n                className=\"confirm-exchange-btn\"\n              >\n                {isTrumpExchange \n                  ? `Exchange ${selectedCardsForExchange.length} Card`\n                  : `Exchange ${selectedCardsForExchange.length} Cards (max ${gameState.tree.length})`\n                }\n              </button>\n              <button onClick={handleSkipExchange} className=\"skip-exchange-btn\">\n                {isTrumpExchange ? 'Skip Trump Exchange' : 'Skip Exchange'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Chat Toggle */}\n      <button \n        onClick={() => setShowChat(!showChat)} \n        className=\"chat-toggle-btn\"\n      >\n        💬\n      </button>\n\n      {/* Chat Panel */}\n      {showChat && (\n        <div className=\"chat-panel\">\n          <div className=\"chat-header\">\n            <h3>Chat</h3>\n            <button onClick={() => setShowChat(false)} className=\"close-chat\">×</button>\n          </div>\n          <div className=\"chat-messages-new\">\n            {gameState.chatMessages.map((message: ChatMessage) => (\n              <div key={message.id} className={`chat-message-new ${message.type}`}>\n                <span className=\"message-sender\">{message.playerName}:</span>\n                <span className=\"message-text\">{message.message}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"chat-input-new\">\n            <input\n              type=\"text\"\n              placeholder=\"Type a message...\"\n              value={chatMessage}\n              onChange={(e) => setChatMessage(e.target.value)}\n              onKeyDown={handleKeyPress}\n              className=\"message-input-new\"\n            />\n            <button onClick={handleSendChat} className=\"send-btn-new\">Send</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}